!(function (e, t) {
  "object" == typeof exports && "object" == typeof module
    ? (module.exports = t())
    : "function" == typeof define && define.amd
    ? define("HiPlayer", [], t)
    : "object" == typeof exports
    ? (exports.HiPlayer = t())
    : (e.HiPlayer = t());
})(this, function () {
  return (function (e) {
    var t = {};
    function r(i) {
      if (t[i]) return t[i].exports;
      var a = (t[i] = {
        i: i,
        l: !1,
        exports: {},
      });
      return e[i].call(a.exports, a, a.exports, r), (a.l = !0), a.exports;
    }
    return (
      (r.m = e),
      (r.c = t),
      (r.d = function (e, t, i) {
        r.o(e, t) ||
          Object.defineProperty(e, t, {
            enumerable: !0,
            get: i,
          });
      }),
      (r.r = function (e) {
        "undefined" != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module",
          }),
          Object.defineProperty(e, "__esModule", {
            value: !0,
          });
      }),
      (r.t = function (e, t) {
        if ((1 & t && (e = r(e)), 8 & t)) return e;
        if (4 & t && "object" == typeof e && e && e.__esModule) return e;
        var i = Object.create(null);
        if (
          (r.r(i),
          Object.defineProperty(i, "default", {
            enumerable: !0,
            value: e,
          }),
          2 & t && "string" != typeof e)
        )
          for (var a in e)
            r.d(
              i,
              a,
              function (t) {
                return e[t];
              }.bind(null, a)
            );
        return i;
      }),
      (r.n = function (e) {
        var t =
          e && e.__esModule
            ? function () {
                return e.default;
              }
            : function () {
                return e;
              };
        return r.d(t, "a", t), t;
      }),
      (r.o = function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }),
      (r.p = "/"),
      r((r.s = 63))
    );
  })([
    function (e, t, r) {
      (function (t) {
        var i;
        e.exports =
          ((i =
            i ||
            (function (e, i) {
              var a;
              if (
                ("undefined" != typeof window &&
                  window.crypto &&
                  (a = window.crypto),
                "undefined" != typeof self && self.crypto && (a = self.crypto),
                "undefined" != typeof globalThis &&
                  globalThis.crypto &&
                  (a = globalThis.crypto),
                !a &&
                  "undefined" != typeof window &&
                  window.msCrypto &&
                  (a = window.msCrypto),
                !a && void 0 !== t && t.crypto && (a = t.crypto),
                !a)
              )
                try {
                  a = r(38);
                } catch (e) {}
              var n = function () {
                  if (a) {
                    if ("function" == typeof a.getRandomValues)
                      try {
                        return a.getRandomValues(new Uint32Array(1))[0];
                      } catch (e) {}
                    if ("function" == typeof a.randomBytes)
                      try {
                        return a.randomBytes(4).readInt32LE();
                      } catch (e) {}
                  }
                  throw new Error(
                    "Native crypto module could not be used to get secure random number."
                  );
                },
                o =
                  Object.create ||
                  (function () {
                    function e() {}
                    return function (t) {
                      var r;
                      return (
                        (e.prototype = t),
                        (r = new e()),
                        (e.prototype = null),
                        r
                      );
                    };
                  })(),
                s = {},
                l = (s.lib = {}),
                d = (l.Base = {
                  extend: function (e) {
                    var t = o(this);
                    return (
                      e && t.mixIn(e),
                      (t.hasOwnProperty("init") && this.init !== t.init) ||
                        (t.init = function () {
                          t.$super.init.apply(this, arguments);
                        }),
                      (t.init.prototype = t),
                      (t.$super = this),
                      t
                    );
                  },
                  create: function () {
                    var e = this.extend();
                    return e.init.apply(e, arguments), e;
                  },
                  init: function () {},
                  mixIn: function (e) {
                    for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t]);
                    e.hasOwnProperty("toString") &&
                      (this.toString = e.toString);
                  },
                  clone: function () {
                    return this.init.prototype.extend(this);
                  },
                }),
                u = (l.WordArray = d.extend({
                  init: function (e, t) {
                    (e = this.words = e || []),
                      (this.sigBytes = null != t ? t : 4 * e.length);
                  },
                  toString: function (e) {
                    return (e || h).stringify(this);
                  },
                  concat: function (e) {
                    var t = this.words,
                      r = e.words,
                      i = this.sigBytes,
                      a = e.sigBytes;
                    if ((this.clamp(), i % 4))
                      for (var n = 0; n < a; n++) {
                        var o = (r[n >>> 2] >>> (24 - (n % 4) * 8)) & 255;
                        t[(i + n) >>> 2] |= o << (24 - ((i + n) % 4) * 8);
                      }
                    else
                      for (var s = 0; s < a; s += 4)
                        t[(i + s) >>> 2] = r[s >>> 2];
                    return (this.sigBytes += a), this;
                  },
                  clamp: function () {
                    var t = this.words,
                      r = this.sigBytes;
                    (t[r >>> 2] &= 4294967295 << (32 - (r % 4) * 8)),
                      (t.length = e.ceil(r / 4));
                  },
                  clone: function () {
                    var e = d.clone.call(this);
                    return (e.words = this.words.slice(0)), e;
                  },
                  random: function (e) {
                    for (var t = [], r = 0; r < e; r += 4) t.push(n());
                    return new u.init(t, e);
                  },
                })),
                c = (s.enc = {}),
                h = (c.Hex = {
                  stringify: function (e) {
                    for (
                      var t = e.words, r = e.sigBytes, i = [], a = 0;
                      a < r;
                      a++
                    ) {
                      var n = (t[a >>> 2] >>> (24 - (a % 4) * 8)) & 255;
                      i.push((n >>> 4).toString(16)),
                        i.push((15 & n).toString(16));
                    }
                    return i.join("");
                  },
                  parse: function (e) {
                    for (var t = e.length, r = [], i = 0; i < t; i += 2)
                      r[i >>> 3] |=
                        parseInt(e.substr(i, 2), 16) << (24 - (i % 8) * 4);
                    return new u.init(r, t / 2);
                  },
                }),
                f = (c.Latin1 = {
                  stringify: function (e) {
                    for (
                      var t = e.words, r = e.sigBytes, i = [], a = 0;
                      a < r;
                      a++
                    ) {
                      var n = (t[a >>> 2] >>> (24 - (a % 4) * 8)) & 255;
                      i.push(String.fromCharCode(n));
                    }
                    return i.join("");
                  },
                  parse: function (e) {
                    for (var t = e.length, r = [], i = 0; i < t; i++)
                      r[i >>> 2] |=
                        (255 & e.charCodeAt(i)) << (24 - (i % 4) * 8);
                    return new u.init(r, t);
                  },
                }),
                p = (c.Utf8 = {
                  stringify: function (e) {
                    try {
                      return decodeURIComponent(escape(f.stringify(e)));
                    } catch (e) {
                      throw new Error("Malformed UTF-8 data");
                    }
                  },
                  parse: function (e) {
                    return f.parse(unescape(encodeURIComponent(e)));
                  },
                }),
                g = (l.BufferedBlockAlgorithm = d.extend({
                  reset: function () {
                    (this._data = new u.init()), (this._nDataBytes = 0);
                  },
                  _append: function (e) {
                    "string" == typeof e && (e = p.parse(e)),
                      this._data.concat(e),
                      (this._nDataBytes += e.sigBytes);
                  },
                  _process: function (t) {
                    var r,
                      i = this._data,
                      a = i.words,
                      n = i.sigBytes,
                      o = this.blockSize,
                      s = n / (4 * o),
                      l =
                        (s = t
                          ? e.ceil(s)
                          : e.max((0 | s) - this._minBufferSize, 0)) * o,
                      d = e.min(4 * l, n);
                    if (l) {
                      for (var c = 0; c < l; c += o) this._doProcessBlock(a, c);
                      (r = a.splice(0, l)), (i.sigBytes -= d);
                    }
                    return new u.init(r, d);
                  },
                  clone: function () {
                    var e = d.clone.call(this);
                    return (e._data = this._data.clone()), e;
                  },
                  _minBufferSize: 0,
                })),
                v =
                  ((l.Hasher = g.extend({
                    cfg: d.extend(),
                    init: function (e) {
                      (this.cfg = this.cfg.extend(e)), this.reset();
                    },
                    reset: function () {
                      g.reset.call(this), this._doReset();
                    },
                    update: function (e) {
                      return this._append(e), this._process(), this;
                    },
                    finalize: function (e) {
                      return e && this._append(e), this._doFinalize();
                    },
                    blockSize: 16,
                    _createHelper: function (e) {
                      return function (t, r) {
                        return new e.init(r).finalize(t);
                      };
                    },
                    _createHmacHelper: function (e) {
                      return function (t, r) {
                        return new v.HMAC.init(e, r).finalize(t);
                      };
                    },
                  })),
                  (s.algo = {}));
              return s;
            })(Math)),
          i);
      }).call(this, r(37));
    },
    function (e, t, r) {
      var i, a, n, o, s, l, d, u, c, h, f, p, g, v, y, m, b, _, w;
      e.exports =
        ((i = r(0)),
        r(2),
        void (
          i.lib.Cipher ||
          ((a = i),
          (n = a.lib),
          (o = n.Base),
          (s = n.WordArray),
          (l = n.BufferedBlockAlgorithm),
          (d = a.enc),
          d.Utf8,
          (u = d.Base64),
          (c = a.algo.EvpKDF),
          (h = n.Cipher =
            l.extend({
              cfg: o.extend(),
              createEncryptor: function (e, t) {
                return this.create(this._ENC_XFORM_MODE, e, t);
              },
              createDecryptor: function (e, t) {
                return this.create(this._DEC_XFORM_MODE, e, t);
              },
              init: function (e, t, r) {
                (this.cfg = this.cfg.extend(r)),
                  (this._xformMode = e),
                  (this._key = t),
                  this.reset();
              },
              reset: function () {
                l.reset.call(this), this._doReset();
              },
              process: function (e) {
                return this._append(e), this._process();
              },
              finalize: function (e) {
                return e && this._append(e), this._doFinalize();
              },
              keySize: 4,
              ivSize: 4,
              _ENC_XFORM_MODE: 1,
              _DEC_XFORM_MODE: 2,
              _createHelper: (function () {
                function e(e) {
                  return "string" == typeof e ? w : b;
                }
                return function (t) {
                  return {
                    encrypt: function (r, i, a) {
                      return e(i).encrypt(t, r, i, a);
                    },
                    decrypt: function (r, i, a) {
                      return e(i).decrypt(t, r, i, a);
                    },
                  };
                };
              })(),
            })),
          (n.StreamCipher = h.extend({
            _doFinalize: function () {
              return this._process(!0);
            },
            blockSize: 1,
          })),
          (f = a.mode = {}),
          (p = n.BlockCipherMode =
            o.extend({
              createEncryptor: function (e, t) {
                return this.Encryptor.create(e, t);
              },
              createDecryptor: function (e, t) {
                return this.Decryptor.create(e, t);
              },
              init: function (e, t) {
                (this._cipher = e), (this._iv = t);
              },
            })),
          (g = f.CBC =
            (function () {
              var e = p.extend();
              function t(e, t, r) {
                var i,
                  a = this._iv;
                a ? ((i = a), (this._iv = void 0)) : (i = this._prevBlock);
                for (var n = 0; n < r; n++) e[t + n] ^= i[n];
              }
              return (
                (e.Encryptor = e.extend({
                  processBlock: function (e, r) {
                    var i = this._cipher,
                      a = i.blockSize;
                    t.call(this, e, r, a),
                      i.encryptBlock(e, r),
                      (this._prevBlock = e.slice(r, r + a));
                  },
                })),
                (e.Decryptor = e.extend({
                  processBlock: function (e, r) {
                    var i = this._cipher,
                      a = i.blockSize,
                      n = e.slice(r, r + a);
                    i.decryptBlock(e, r),
                      t.call(this, e, r, a),
                      (this._prevBlock = n);
                  },
                })),
                e
              );
            })()),
          (v = (a.pad = {}).Pkcs7 =
            {
              pad: function (e, t) {
                for (
                  var r = 4 * t,
                    i = r - (e.sigBytes % r),
                    a = (i << 24) | (i << 16) | (i << 8) | i,
                    n = [],
                    o = 0;
                  o < i;
                  o += 4
                )
                  n.push(a);
                var l = s.create(n, i);
                e.concat(l);
              },
              unpad: function (e) {
                var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                e.sigBytes -= t;
              },
            }),
          (n.BlockCipher = h.extend({
            cfg: h.cfg.extend({
              mode: g,
              padding: v,
            }),
            reset: function () {
              var e;
              h.reset.call(this);
              var t = this.cfg,
                r = t.iv,
                i = t.mode;
              this._xformMode == this._ENC_XFORM_MODE
                ? (e = i.createEncryptor)
                : ((e = i.createDecryptor), (this._minBufferSize = 1)),
                this._mode && this._mode.__creator == e
                  ? this._mode.init(this, r && r.words)
                  : ((this._mode = e.call(i, this, r && r.words)),
                    (this._mode.__creator = e));
            },
            _doProcessBlock: function (e, t) {
              this._mode.processBlock(e, t);
            },
            _doFinalize: function () {
              var e,
                t = this.cfg.padding;
              return (
                this._xformMode == this._ENC_XFORM_MODE
                  ? (t.pad(this._data, this.blockSize), (e = this._process(!0)))
                  : ((e = this._process(!0)), t.unpad(e)),
                e
              );
            },
            blockSize: 4,
          })),
          (y = n.CipherParams =
            o.extend({
              init: function (e) {
                this.mixIn(e);
              },
              toString: function (e) {
                return (e || this.formatter).stringify(this);
              },
            })),
          (m = (a.format = {}).OpenSSL =
            {
              stringify: function (e) {
                var t = e.ciphertext,
                  r = e.salt;
                return (
                  r ? s.create([1398893684, 1701076831]).concat(r).concat(t) : t
                ).toString(u);
              },
              parse: function (e) {
                var t,
                  r = u.parse(e),
                  i = r.words;
                return (
                  1398893684 == i[0] &&
                    1701076831 == i[1] &&
                    ((t = s.create(i.slice(2, 4))),
                    i.splice(0, 4),
                    (r.sigBytes -= 16)),
                  y.create({
                    ciphertext: r,
                    salt: t,
                  })
                );
              },
            }),
          (b = n.SerializableCipher =
            o.extend({
              cfg: o.extend({
                format: m,
              }),
              encrypt: function (e, t, r, i) {
                i = this.cfg.extend(i);
                var a = e.createEncryptor(r, i),
                  n = a.finalize(t),
                  o = a.cfg;
                return y.create({
                  ciphertext: n,
                  key: r,
                  iv: o.iv,
                  algorithm: e,
                  mode: o.mode,
                  padding: o.padding,
                  blockSize: e.blockSize,
                  formatter: i.format,
                });
              },
              decrypt: function (e, t, r, i) {
                return (
                  (i = this.cfg.extend(i)),
                  (t = this._parse(t, i.format)),
                  e.createDecryptor(r, i).finalize(t.ciphertext)
                );
              },
              _parse: function (e, t) {
                return "string" == typeof e ? t.parse(e, this) : e;
              },
            })),
          (_ = (a.kdf = {}).OpenSSL =
            {
              execute: function (e, t, r, i) {
                i || (i = s.random(8));
                var a = c
                    .create({
                      keySize: t + r,
                    })
                    .compute(e, i),
                  n = s.create(a.words.slice(t), 4 * r);
                return (
                  (a.sigBytes = 4 * t),
                  y.create({
                    key: a,
                    iv: n,
                    salt: i,
                  })
                );
              },
            }),
          (w = n.PasswordBasedCipher =
            b.extend({
              cfg: b.cfg.extend({
                kdf: _,
              }),
              encrypt: function (e, t, r, i) {
                var a = (i = this.cfg.extend(i)).kdf.execute(
                  r,
                  e.keySize,
                  e.ivSize
                );
                i.iv = a.iv;
                var n = b.encrypt.call(this, e, t, a.key, i);
                return n.mixIn(a), n;
              },
              decrypt: function (e, t, r, i) {
                (i = this.cfg.extend(i)), (t = this._parse(t, i.format));
                var a = i.kdf.execute(r, e.keySize, e.ivSize, t.salt);
                return (i.iv = a.iv), b.decrypt.call(this, e, t, a.key, i);
              },
            })))
        ));
    },
    function (e, t, r) {
      var i, a, n, o, s, l, d, u;
      e.exports =
        ((u = r(0)),
        r(7),
        r(8),
        (a = (i = u).lib),
        (n = a.Base),
        (o = a.WordArray),
        (s = i.algo),
        (l = s.MD5),
        (d = s.EvpKDF =
          n.extend({
            cfg: n.extend({
              keySize: 4,
              hasher: l,
              iterations: 1,
            }),
            init: function (e) {
              this.cfg = this.cfg.extend(e);
            },
            compute: function (e, t) {
              for (
                var r,
                  i = this.cfg,
                  a = i.hasher.create(),
                  n = o.create(),
                  s = n.words,
                  l = i.keySize,
                  d = i.iterations;
                s.length < l;

              ) {
                r && a.update(r), (r = a.update(e).finalize(t)), a.reset();
                for (var u = 1; u < d; u++) (r = a.finalize(r)), a.reset();
                n.concat(r);
              }
              return (n.sigBytes = 4 * l), n;
            },
          })),
        (i.EvpKDF = function (e, t, r) {
          return d.create(r).compute(e, t);
        }),
        u.EvpKDF);
    },
    function (e, t, r) {
      var i, a, n;
      e.exports =
        ((n = r(0)),
        (a = (i = n).lib.WordArray),
        (i.enc.Base64 = {
          stringify: function (e) {
            var t = e.words,
              r = e.sigBytes,
              i = this._map;
            e.clamp();
            for (var a = [], n = 0; n < r; n += 3)
              for (
                var o =
                    (((t[n >>> 2] >>> (24 - (n % 4) * 8)) & 255) << 16) |
                    (((t[(n + 1) >>> 2] >>> (24 - ((n + 1) % 4) * 8)) & 255) <<
                      8) |
                    ((t[(n + 2) >>> 2] >>> (24 - ((n + 2) % 4) * 8)) & 255),
                  s = 0;
                s < 4 && n + 0.75 * s < r;
                s++
              )
                a.push(i.charAt((o >>> (6 * (3 - s))) & 63));
            var l = i.charAt(64);
            if (l) for (; a.length % 4; ) a.push(l);
            return a.join("");
          },
          parse: function (e) {
            var t = e.length,
              r = this._map,
              i = this._reverseMap;
            if (!i) {
              i = this._reverseMap = [];
              for (var n = 0; n < r.length; n++) i[r.charCodeAt(n)] = n;
            }
            var o = r.charAt(64);
            if (o) {
              var s = e.indexOf(o);
              -1 !== s && (t = s);
            }
            return (function (e, t, r) {
              for (var i = [], n = 0, o = 0; o < t; o++)
                if (o % 4) {
                  var s = r[e.charCodeAt(o - 1)] << ((o % 4) * 2),
                    l = r[e.charCodeAt(o)] >>> (6 - (o % 4) * 2),
                    d = s | l;
                  (i[n >>> 2] |= d << (24 - (n % 4) * 8)), n++;
                }
              return a.create(i, n);
            })(e, t, i);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
        }),
        n.enc.Base64);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        (function (e) {
          var t = i,
            r = t.lib,
            a = r.WordArray,
            n = r.Hasher,
            o = t.algo,
            s = [];
          !(function () {
            for (var t = 0; t < 64; t++)
              s[t] = (4294967296 * e.abs(e.sin(t + 1))) | 0;
          })();
          var l = (o.MD5 = n.extend({
            _doReset: function () {
              this._hash = new a.init([
                1732584193, 4023233417, 2562383102, 271733878,
              ]);
            },
            _doProcessBlock: function (e, t) {
              for (var r = 0; r < 16; r++) {
                var i = t + r,
                  a = e[i];
                e[i] =
                  (16711935 & ((a << 8) | (a >>> 24))) |
                  (4278255360 & ((a << 24) | (a >>> 8)));
              }
              var n = this._hash.words,
                o = e[t + 0],
                l = e[t + 1],
                f = e[t + 2],
                p = e[t + 3],
                g = e[t + 4],
                v = e[t + 5],
                y = e[t + 6],
                m = e[t + 7],
                b = e[t + 8],
                _ = e[t + 9],
                w = e[t + 10],
                T = e[t + 11],
                E = e[t + 12],
                S = e[t + 13],
                k = e[t + 14],
                x = e[t + 15],
                A = n[0],
                R = n[1],
                L = n[2],
                D = n[3];
              (A = d(A, R, L, D, o, 7, s[0])),
                (D = d(D, A, R, L, l, 12, s[1])),
                (L = d(L, D, A, R, f, 17, s[2])),
                (R = d(R, L, D, A, p, 22, s[3])),
                (A = d(A, R, L, D, g, 7, s[4])),
                (D = d(D, A, R, L, v, 12, s[5])),
                (L = d(L, D, A, R, y, 17, s[6])),
                (R = d(R, L, D, A, m, 22, s[7])),
                (A = d(A, R, L, D, b, 7, s[8])),
                (D = d(D, A, R, L, _, 12, s[9])),
                (L = d(L, D, A, R, w, 17, s[10])),
                (R = d(R, L, D, A, T, 22, s[11])),
                (A = d(A, R, L, D, E, 7, s[12])),
                (D = d(D, A, R, L, S, 12, s[13])),
                (L = d(L, D, A, R, k, 17, s[14])),
                (A = u(
                  A,
                  (R = d(R, L, D, A, x, 22, s[15])),
                  L,
                  D,
                  l,
                  5,
                  s[16]
                )),
                (D = u(D, A, R, L, y, 9, s[17])),
                (L = u(L, D, A, R, T, 14, s[18])),
                (R = u(R, L, D, A, o, 20, s[19])),
                (A = u(A, R, L, D, v, 5, s[20])),
                (D = u(D, A, R, L, w, 9, s[21])),
                (L = u(L, D, A, R, x, 14, s[22])),
                (R = u(R, L, D, A, g, 20, s[23])),
                (A = u(A, R, L, D, _, 5, s[24])),
                (D = u(D, A, R, L, k, 9, s[25])),
                (L = u(L, D, A, R, p, 14, s[26])),
                (R = u(R, L, D, A, b, 20, s[27])),
                (A = u(A, R, L, D, S, 5, s[28])),
                (D = u(D, A, R, L, f, 9, s[29])),
                (L = u(L, D, A, R, m, 14, s[30])),
                (A = c(
                  A,
                  (R = u(R, L, D, A, E, 20, s[31])),
                  L,
                  D,
                  v,
                  4,
                  s[32]
                )),
                (D = c(D, A, R, L, b, 11, s[33])),
                (L = c(L, D, A, R, T, 16, s[34])),
                (R = c(R, L, D, A, k, 23, s[35])),
                (A = c(A, R, L, D, l, 4, s[36])),
                (D = c(D, A, R, L, g, 11, s[37])),
                (L = c(L, D, A, R, m, 16, s[38])),
                (R = c(R, L, D, A, w, 23, s[39])),
                (A = c(A, R, L, D, S, 4, s[40])),
                (D = c(D, A, R, L, o, 11, s[41])),
                (L = c(L, D, A, R, p, 16, s[42])),
                (R = c(R, L, D, A, y, 23, s[43])),
                (A = c(A, R, L, D, _, 4, s[44])),
                (D = c(D, A, R, L, E, 11, s[45])),
                (L = c(L, D, A, R, x, 16, s[46])),
                (A = h(
                  A,
                  (R = c(R, L, D, A, f, 23, s[47])),
                  L,
                  D,
                  o,
                  6,
                  s[48]
                )),
                (D = h(D, A, R, L, m, 10, s[49])),
                (L = h(L, D, A, R, k, 15, s[50])),
                (R = h(R, L, D, A, v, 21, s[51])),
                (A = h(A, R, L, D, E, 6, s[52])),
                (D = h(D, A, R, L, p, 10, s[53])),
                (L = h(L, D, A, R, w, 15, s[54])),
                (R = h(R, L, D, A, l, 21, s[55])),
                (A = h(A, R, L, D, b, 6, s[56])),
                (D = h(D, A, R, L, x, 10, s[57])),
                (L = h(L, D, A, R, y, 15, s[58])),
                (R = h(R, L, D, A, S, 21, s[59])),
                (A = h(A, R, L, D, g, 6, s[60])),
                (D = h(D, A, R, L, T, 10, s[61])),
                (L = h(L, D, A, R, f, 15, s[62])),
                (R = h(R, L, D, A, _, 21, s[63])),
                (n[0] = (n[0] + A) | 0),
                (n[1] = (n[1] + R) | 0),
                (n[2] = (n[2] + L) | 0),
                (n[3] = (n[3] + D) | 0);
            },
            _doFinalize: function () {
              var t = this._data,
                r = t.words,
                i = 8 * this._nDataBytes,
                a = 8 * t.sigBytes;
              r[a >>> 5] |= 128 << (24 - (a % 32));
              var n = e.floor(i / 4294967296),
                o = i;
              (r[15 + (((a + 64) >>> 9) << 4)] =
                (16711935 & ((n << 8) | (n >>> 24))) |
                (4278255360 & ((n << 24) | (n >>> 8)))),
                (r[14 + (((a + 64) >>> 9) << 4)] =
                  (16711935 & ((o << 8) | (o >>> 24))) |
                  (4278255360 & ((o << 24) | (o >>> 8)))),
                (t.sigBytes = 4 * (r.length + 1)),
                this._process();
              for (var s = this._hash, l = s.words, d = 0; d < 4; d++) {
                var u = l[d];
                l[d] =
                  (16711935 & ((u << 8) | (u >>> 24))) |
                  (4278255360 & ((u << 24) | (u >>> 8)));
              }
              return s;
            },
            clone: function () {
              var e = n.clone.call(this);
              return (e._hash = this._hash.clone()), e;
            },
          }));
          function d(e, t, r, i, a, n, o) {
            var s = e + ((t & r) | (~t & i)) + a + o;
            return ((s << n) | (s >>> (32 - n))) + t;
          }
          function u(e, t, r, i, a, n, o) {
            var s = e + ((t & i) | (r & ~i)) + a + o;
            return ((s << n) | (s >>> (32 - n))) + t;
          }
          function c(e, t, r, i, a, n, o) {
            var s = e + (t ^ r ^ i) + a + o;
            return ((s << n) | (s >>> (32 - n))) + t;
          }
          function h(e, t, r, i, a, n, o) {
            var s = e + (r ^ (t | ~i)) + a + o;
            return ((s << n) | (s >>> (32 - n))) + t;
          }
          (t.MD5 = n._createHelper(l)), (t.HmacMD5 = n._createHmacHelper(l));
        })(Math),
        i.MD5);
    },
    function (e, t, r) {
      var i, a, n, o, s, l;
      e.exports =
        ((l = r(0)),
        (a = (i = l).lib),
        (n = a.Base),
        (o = a.WordArray),
        ((s = i.x64 = {}).Word = n.extend({
          init: function (e, t) {
            (this.high = e), (this.low = t);
          },
        })),
        (s.WordArray = n.extend({
          init: function (e, t) {
            (e = this.words = e || []),
              (this.sigBytes = null != t ? t : 8 * e.length);
          },
          toX32: function () {
            for (var e = this.words, t = e.length, r = [], i = 0; i < t; i++) {
              var a = e[i];
              r.push(a.high), r.push(a.low);
            }
            return o.create(r, this.sigBytes);
          },
          clone: function () {
            for (
              var e = n.clone.call(this),
                t = (e.words = this.words.slice(0)),
                r = t.length,
                i = 0;
              i < r;
              i++
            )
              t[i] = t[i].clone();
            return e;
          },
        })),
        l);
    },
    function (e, t, r) {
      "use strict";
      r.r(t),
        (t.default = function (e) {
          var t = r(28)("./" + e + ".ts").default;
          return function (e) {
            return t && t[e] ? t[e] : e;
          };
        });
    },
    function (e, t, r) {
      var i, a, n, o, s, l, d, u;
      e.exports =
        ((u = r(0)),
        (a = (i = u).lib),
        (n = a.WordArray),
        (o = a.Hasher),
        (s = i.algo),
        (l = []),
        (d = s.SHA1 =
          o.extend({
            _doReset: function () {
              this._hash = new n.init([
                1732584193, 4023233417, 2562383102, 271733878, 3285377520,
              ]);
            },
            _doProcessBlock: function (e, t) {
              for (
                var r = this._hash.words,
                  i = r[0],
                  a = r[1],
                  n = r[2],
                  o = r[3],
                  s = r[4],
                  d = 0;
                d < 80;
                d++
              ) {
                if (d < 16) l[d] = 0 | e[t + d];
                else {
                  var u = l[d - 3] ^ l[d - 8] ^ l[d - 14] ^ l[d - 16];
                  l[d] = (u << 1) | (u >>> 31);
                }
                var c = ((i << 5) | (i >>> 27)) + s + l[d];
                (c +=
                  d < 20
                    ? 1518500249 + ((a & n) | (~a & o))
                    : d < 40
                    ? 1859775393 + (a ^ n ^ o)
                    : d < 60
                    ? ((a & n) | (a & o) | (n & o)) - 1894007588
                    : (a ^ n ^ o) - 899497514),
                  (s = o),
                  (o = n),
                  (n = (a << 30) | (a >>> 2)),
                  (a = i),
                  (i = c);
              }
              (r[0] = (r[0] + i) | 0),
                (r[1] = (r[1] + a) | 0),
                (r[2] = (r[2] + n) | 0),
                (r[3] = (r[3] + o) | 0),
                (r[4] = (r[4] + s) | 0);
            },
            _doFinalize: function () {
              var e = this._data,
                t = e.words,
                r = 8 * this._nDataBytes,
                i = 8 * e.sigBytes;
              return (
                (t[i >>> 5] |= 128 << (24 - (i % 32))),
                (t[14 + (((i + 64) >>> 9) << 4)] = Math.floor(r / 4294967296)),
                (t[15 + (((i + 64) >>> 9) << 4)] = r),
                (e.sigBytes = 4 * t.length),
                this._process(),
                this._hash
              );
            },
            clone: function () {
              var e = o.clone.call(this);
              return (e._hash = this._hash.clone()), e;
            },
          })),
        (i.SHA1 = o._createHelper(d)),
        (i.HmacSHA1 = o._createHmacHelper(d)),
        u.SHA1);
    },
    function (e, t, r) {
      var i, a, n, o;
      e.exports =
        ((i = r(0)),
        (n = (a = i).lib.Base),
        (o = a.enc.Utf8),
        void (a.algo.HMAC = n.extend({
          init: function (e, t) {
            (e = this._hasher = new e.init()),
              "string" == typeof t && (t = o.parse(t));
            var r = e.blockSize,
              i = 4 * r;
            t.sigBytes > i && (t = e.finalize(t)), t.clamp();
            for (
              var a = (this._oKey = t.clone()),
                n = (this._iKey = t.clone()),
                s = a.words,
                l = n.words,
                d = 0;
              d < r;
              d++
            )
              (s[d] ^= 1549556828), (l[d] ^= 909522486);
            (a.sigBytes = n.sigBytes = i), this.reset();
          },
          reset: function () {
            var e = this._hasher;
            e.reset(), e.update(this._iKey);
          },
          update: function (e) {
            return this._hasher.update(e), this;
          },
          finalize: function (e) {
            var t = this._hasher,
              r = t.finalize(e);
            return t.reset(), t.finalize(this._oKey.clone().concat(r));
          },
        })));
    },
    function (e, t, r) {
      "use strict";
      var i = r(14),
        a = r.n(i)()(function (e) {
          return e[1];
        });
      a.push([
        e.i,
        '@-webkit-keyframes my-face{2%{transform:translateY(1.5px) rotate(1.5deg)}4%{transform:translateY(-1.5px) rotate(-.5deg)}6%{transform:translateY(1.5px) rotate(-1.5deg)}8%{transform:translateY(-1.5px) rotate(-1.5deg)}10%{transform:translateY(2.5px) rotate(1.5deg)}12%{transform:translateY(-.5px) rotate(1.5deg)}14%{transform:translateY(-1.5px) rotate(1.5deg)}16%{transform:translateY(-.5px) rotate(-1.5deg)}18%{transform:translateY(.5px) rotate(-1.5deg)}20%{transform:translateY(-1.5px) rotate(2.5deg)}22%{transform:translateY(.5px) rotate(-1.5deg)}24%{transform:translateY(1.5px) rotate(1.5deg)}26%{transform:translateY(.5px) rotate(.5deg)}28%{transform:translateY(.5px) rotate(1.5deg)}30%{transform:translateY(-.5px) rotate(2.5deg)}32%{transform:translateY(1.5px) rotate(-.5deg)}34%{transform:translateY(1.5px) rotate(-.5deg)}36%{transform:translateY(-1.5px) rotate(2.5deg)}38%{transform:translateY(1.5px) rotate(-1.5deg)}40%{transform:translateY(-.5px) rotate(2.5deg)}42%{transform:translateY(2.5px) rotate(-1.5deg)}44%{transform:translateY(1.5px) rotate(.5deg)}46%{transform:translateY(-1.5px) rotate(2.5deg)}48%{transform:translateY(-.5px) rotate(.5deg)}50%{transform:translateY(.5px) rotate(.5deg)}52%{transform:translateY(2.5px) rotate(2.5deg)}54%{transform:translateY(-1.5px) rotate(1.5deg)}56%{transform:translateY(2.5px) rotate(2.5deg)}58%{transform:translateY(.5px) rotate(2.5deg)}60%{transform:translateY(2.5px) rotate(2.5deg)}62%{transform:translateY(-.5px) rotate(2.5deg)}64%{transform:translateY(-.5px) rotate(1.5deg)}66%{transform:translateY(1.5px) rotate(-.5deg)}68%{transform:translateY(-1.5px) rotate(-.5deg)}70%{transform:translateY(1.5px) rotate(.5deg)}72%{transform:translateY(2.5px) rotate(1.5deg)}74%{transform:translateY(-.5px) rotate(.5deg)}76%{transform:translateY(-.5px) rotate(2.5deg)}78%{transform:translateY(-.5px) rotate(1.5deg)}80%{transform:translateY(1.5px) rotate(1.5deg)}82%{transform:translateY(-.5px) rotate(.5deg)}84%{transform:translateY(1.5px) rotate(2.5deg)}86%{transform:translateY(-1.5px) rotate(-1.5deg)}88%{transform:translateY(-.5px) rotate(2.5deg)}90%{transform:translateY(2.5px) rotate(-.5deg)}92%{transform:translateY(.5px) rotate(-.5deg)}94%{transform:translateY(2.5px) rotate(.5deg)}96%{transform:translateY(-.5px) rotate(1.5deg)}98%{transform:translateY(-1.5px) rotate(-.5deg)}0%,to{transform:translate(0) rotate(0deg)}}@keyframes my-face{2%{transform:translateY(1.5px) rotate(1.5deg)}4%{transform:translateY(-1.5px) rotate(-.5deg)}6%{transform:translateY(1.5px) rotate(-1.5deg)}8%{transform:translateY(-1.5px) rotate(-1.5deg)}10%{transform:translateY(2.5px) rotate(1.5deg)}12%{transform:translateY(-.5px) rotate(1.5deg)}14%{transform:translateY(-1.5px) rotate(1.5deg)}16%{transform:translateY(-.5px) rotate(-1.5deg)}18%{transform:translateY(.5px) rotate(-1.5deg)}20%{transform:translateY(-1.5px) rotate(2.5deg)}22%{transform:translateY(.5px) rotate(-1.5deg)}24%{transform:translateY(1.5px) rotate(1.5deg)}26%{transform:translateY(.5px) rotate(.5deg)}28%{transform:translateY(.5px) rotate(1.5deg)}30%{transform:translateY(-.5px) rotate(2.5deg)}32%{transform:translateY(1.5px) rotate(-.5deg)}34%{transform:translateY(1.5px) rotate(-.5deg)}36%{transform:translateY(-1.5px) rotate(2.5deg)}38%{transform:translateY(1.5px) rotate(-1.5deg)}40%{transform:translateY(-.5px) rotate(2.5deg)}42%{transform:translateY(2.5px) rotate(-1.5deg)}44%{transform:translateY(1.5px) rotate(.5deg)}46%{transform:translateY(-1.5px) rotate(2.5deg)}48%{transform:translateY(-.5px) rotate(.5deg)}50%{transform:translateY(.5px) rotate(.5deg)}52%{transform:translateY(2.5px) rotate(2.5deg)}54%{transform:translateY(-1.5px) rotate(1.5deg)}56%{transform:translateY(2.5px) rotate(2.5deg)}58%{transform:translateY(.5px) rotate(2.5deg)}60%{transform:translateY(2.5px) rotate(2.5deg)}62%{transform:translateY(-.5px) rotate(2.5deg)}64%{transform:translateY(-.5px) rotate(1.5deg)}66%{transform:translateY(1.5px) rotate(-.5deg)}68%{transform:translateY(-1.5px) rotate(-.5deg)}70%{transform:translateY(1.5px) rotate(.5deg)}72%{transform:translateY(2.5px) rotate(1.5deg)}74%{transform:translateY(-.5px) rotate(.5deg)}76%{transform:translateY(-.5px) rotate(2.5deg)}78%{transform:translateY(-.5px) rotate(1.5deg)}80%{transform:translateY(1.5px) rotate(1.5deg)}82%{transform:translateY(-.5px) rotate(.5deg)}84%{transform:translateY(1.5px) rotate(2.5deg)}86%{transform:translateY(-1.5px) rotate(-1.5deg)}88%{transform:translateY(-.5px) rotate(2.5deg)}90%{transform:translateY(2.5px) rotate(-.5deg)}92%{transform:translateY(.5px) rotate(-.5deg)}94%{transform:translateY(2.5px) rotate(.5deg)}96%{transform:translateY(-.5px) rotate(1.5deg)}98%{transform:translateY(-1.5px) rotate(-.5deg)}0%,to{transform:translate(0) rotate(0deg)}}:root{--balloon-border-radius:2px;--balloon-color:rgba(16,16,16,0.95);--balloon-text-color:#fff;--balloon-font-size:12px;--balloon-move:4px}button[aria-label][data-balloon-pos]{overflow:visible}[aria-label][data-balloon-pos]{position:relative;cursor:pointer}[aria-label][data-balloon-pos]:after{text-indent:0;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Open Sans,Helvetica Neue,sans-serif;font-weight:400;font-style:normal;text-shadow:none;font-size:var(--balloon-font-size);background:var(--balloon-color);border-radius:2px;color:var(--balloon-text-color);border-radius:var(--balloon-border-radius);content:attr(aria-label);padding:.5em 1em;white-space:nowrap}[aria-label][data-balloon-pos]:after,[aria-label][data-balloon-pos]:before{opacity:0;pointer-events:none;transition:all .18s ease-out .18s;position:absolute;z-index:10}[aria-label][data-balloon-pos]:before{width:0;height:0;border:5px solid transparent;border-top:5px solid var(--balloon-color);content:""}[aria-label][data-balloon-pos]:hover:after,[aria-label][data-balloon-pos]:hover:before,[aria-label][data-balloon-pos]:not([data-balloon-nofocus]):focus:after,[aria-label][data-balloon-pos]:not([data-balloon-nofocus]):focus:before,[aria-label][data-balloon-pos][data-balloon-visible]:after,[aria-label][data-balloon-pos][data-balloon-visible]:before{opacity:1;pointer-events:none}[aria-label][data-balloon-pos].font-awesome:after{font-family:FontAwesome,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Open Sans,Helvetica Neue,sans-serif}[aria-label][data-balloon-pos][data-balloon-break]:after{white-space:pre}[aria-label][data-balloon-pos][data-balloon-break][data-balloon-length]:after{white-space:pre-line;word-break:break-word}[aria-label][data-balloon-pos][data-balloon-blunt]:after,[aria-label][data-balloon-pos][data-balloon-blunt]:before{transition:none}[aria-label][data-balloon-pos][data-balloon-pos=down]:hover:after,[aria-label][data-balloon-pos][data-balloon-pos=down]:hover:before,[aria-label][data-balloon-pos][data-balloon-pos=down][data-balloon-visible]:after,[aria-label][data-balloon-pos][data-balloon-pos=down][data-balloon-visible]:before,[aria-label][data-balloon-pos][data-balloon-pos=up]:hover:after,[aria-label][data-balloon-pos][data-balloon-pos=up]:hover:before,[aria-label][data-balloon-pos][data-balloon-pos=up][data-balloon-visible]:after,[aria-label][data-balloon-pos][data-balloon-pos=up][data-balloon-visible]:before{transform:translate(-50%)}[aria-label][data-balloon-pos][data-balloon-pos*=-left]:after{left:0}[aria-label][data-balloon-pos][data-balloon-pos*=-left]:before{left:5px}[aria-label][data-balloon-pos][data-balloon-pos*=-right]:after{right:0}[aria-label][data-balloon-pos][data-balloon-pos*=-right]:before{right:5px}[aria-label][data-balloon-pos][data-balloon-po*=-left]:hover:after,[aria-label][data-balloon-pos][data-balloon-po*=-left]:hover:before,[aria-label][data-balloon-pos][data-balloon-po*=-left][data-balloon-visible]:after,[aria-label][data-balloon-pos][data-balloon-po*=-left][data-balloon-visible]:before,[aria-label][data-balloon-pos][data-balloon-pos*=-right]:hover:after,[aria-label][data-balloon-pos][data-balloon-pos*=-right]:hover:before,[aria-label][data-balloon-pos][data-balloon-pos*=-right][data-balloon-visible]:after,[aria-label][data-balloon-pos][data-balloon-pos*=-right][data-balloon-visible]:before{transform:translate(0)}[aria-label][data-balloon-pos][data-balloon-pos^=up]:after,[aria-label][data-balloon-pos][data-balloon-pos^=up]:before{bottom:100%;transform-origin:top;transform:translateY(var(--balloon-move))}[aria-label][data-balloon-pos][data-balloon-pos^=up]:after{margin-bottom:10px}[aria-label][data-balloon-pos][data-balloon-pos=up]:after,[aria-label][data-balloon-pos][data-balloon-pos=up]:before{left:50%;transform:translate(-50%,var(--balloon-move))}[aria-label][data-balloon-pos][data-balloon-pos^=down]:after,[aria-label][data-balloon-pos][data-balloon-pos^=down]:before{top:100%;transform:translateY(calc(var(--balloon-move)*-1))}[aria-label][data-balloon-pos][data-balloon-pos^=down]:after{margin-top:10px}[aria-label][data-balloon-pos][data-balloon-pos^=down]:before{width:0;height:0;border:5px solid transparent;border-bottom:5px solid var(--balloon-color)}[aria-label][data-balloon-pos][data-balloon-pos=down]:after,[aria-label][data-balloon-pos][data-balloon-pos=down]:before{left:50%;transform:translate(-50%,calc(var(--balloon-move)*-1))}[aria-label][data-balloon-pos][data-balloon-pos=left]:hover:after,[aria-label][data-balloon-pos][data-balloon-pos=left]:hover:before,[aria-label][data-balloon-pos][data-balloon-pos=left][data-balloon-visible]:after,[aria-label][data-balloon-pos][data-balloon-pos=left][data-balloon-visible]:before,[aria-label][data-balloon-pos][data-balloon-pos=right]:hover:after,[aria-label][data-balloon-pos][data-balloon-pos=right]:hover:before,[aria-label][data-balloon-pos][data-balloon-pos=right][data-balloon-visible]:after,[aria-label][data-balloon-pos][data-balloon-pos=right][data-balloon-visible]:before{transform:translateY(-50%)}[aria-label][data-balloon-pos][data-balloon-pos=left]:after,[aria-label][data-balloon-pos][data-balloon-pos=left]:before{right:100%;top:50%;transform:translate(var(--balloon-move),-50%)}[aria-label][data-balloon-pos][data-balloon-pos=left]:after{margin-right:10px}[aria-label][data-balloon-pos][data-balloon-pos=left]:before{width:0;height:0;border:5px solid transparent;border-left:5px solid var(--balloon-color)}[aria-label][data-balloon-pos][data-balloon-pos=right]:after,[aria-label][data-balloon-pos][data-balloon-pos=right]:before{left:100%;top:50%;transform:translate(calc(var(--balloon-move)*-1),-50%)}[aria-label][data-balloon-pos][data-balloon-pos=right]:after{margin-left:10px}[aria-label][data-balloon-pos][data-balloon-pos=right]:before{width:0;height:0;border:5px solid transparent;border-right:5px solid var(--balloon-color)}[aria-label][data-balloon-pos][data-balloon-length]:after{white-space:normal}[aria-label][data-balloon-pos][data-balloon-length=small]:after{width:80px}[aria-label][data-balloon-pos][data-balloon-length=medium]:after{width:150px}[aria-label][data-balloon-pos][data-balloon-length=large]:after{width:260px}[aria-label][data-balloon-pos][data-balloon-length=xlarge]:after{width:380px}@media screen and (max-width:768px){[aria-label][data-balloon-pos][data-balloon-length=xlarge]:after{width:90vw}}[aria-label][data-balloon-pos][data-balloon-length=fit]:after{width:100%}[data-balloon]:before{display:none}[aria-label][data-balloon-pos]:after{padding:10px 20px;font-size:16px!important;border-radius:4px;background:rgba(0,0,0,.7)}.hiplayer-bezel{position:absolute;left:0;right:0;top:0;bottom:0;font-size:22px;color:#fff;pointer-events:none}.hiplayer-bezel .hiplayer-loading-icon{display:none;position:absolute;top:calc(50% - 29px);left:calc(50% - 29px);height:58px;width:58px;pointer-events:none}.hiplayer-bezel .hiplayer-loading-icon .hiplayer-loading-hide{display:none}.hiplayer-bezel .hiplayer-loading-icon .hiplayer-loading-dot{width:16px;height:16px;position:absolute;top:calc(50% - 8px);left:calc(50% - 8px);border-radius:50%;-webkit-animation:dot-spin 1.2s ease infinite;animation:dot-spin 1.2s ease infinite}.hiplayer-bezel .hiplayer-loading-icon .hiplayer-loading-dot-1{background-color:#ccabff;animation-delay:-2s;-webkit-animation-delay:-2s}.hiplayer-bezel .hiplayer-loading-icon .hiplayer-loading-dot-2{background-color:#ff66bf;animation-delay:-1.4s;-webkit-animation-delay:-1.4s}@-webkit-keyframes dot-spin{0%{z-index:1;transform:scale(1) translateZ(0);-webkit-transform:scale(1) translateZ(0)}25%{z-index:1;transform:scale(1.375) translate3d(-21px,0,0);-webkit-transform:scale(1.375) translate3d(-21px,0,0)}50%{z-index:2;transform:scale(2) translateZ(100px);-webkit-transform:scale(2) translateZ(100px)}75%{z-index:1;transform:scale(1.375) translate3d(21px,0,0);-webkit-transform:scale(1.375) translate3d(21px,0,0)}to{z-index:1;transform:scale(1) translateZ(0);-webkit-transform:scale(1) translateZ(0)}}@keyframes dot-spin{0%{z-index:1;transform:scale(1) translateZ(0);-webkit-transform:scale(1) translateZ(0)}25%{z-index:1;transform:scale(1.375) translate3d(-21px,0,0);-webkit-transform:scale(1.375) translate3d(-21px,0,0)}50%{z-index:2;transform:scale(2) translateZ(100px);-webkit-transform:scale(2) translateZ(100px)}75%{z-index:1;transform:scale(1.375) translate3d(21px,0,0);-webkit-transform:scale(1.375) translate3d(21px,0,0)}to{z-index:1;transform:scale(1) translateZ(0);-webkit-transform:scale(1) translateZ(0)}}.hiplayer-mobile .hiplayer-bezel .hiplayer-loading-icon{transform:scale(.5)}.hiplayer-controller-mask{background:linear-gradient(0deg,rgba(23,23,26,.75),transparent);height:190px;width:100%}.hiplayer-controller,.hiplayer-controller-mask{position:absolute;bottom:0;transition:all .3s ease}.hiplayer-controller{left:0;right:0;height:60px;padding:0 30px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:flex;justify-content:space-between;align-items:center}.hiplayer-controller .hiplayer-bar-wrap{cursor:pointer;position:absolute;left:0;bottom:60px;box-sizing:content-box;width:100%;height:4px;padding-bottom:4px}.hiplayer-controller .hiplayer-bar-wrap:hover .hiplayer-highlight{display:block;width:8px;transform:translateX(-4px);top:4px;height:40%}.hiplayer-controller .hiplayer-bar-wrap .hiplayer-bar-preview{position:absolute;background:#fff;pointer-events:none;display:none;background-size:16000px 100%}.hiplayer-controller .hiplayer-bar-wrap .hiplayer-bar-preview-canvas{position:absolute;width:100%;height:100%;z-index:1;pointer-events:none}.hiplayer-controller .hiplayer-bar-wrap .hiplayer-bar-bg{position:absolute;height:3px;width:100%;background:hsla(0,0%,100%,.3)}.hiplayer-controller .hiplayer-bar-wrap .hiplayer-bar-bg .hiplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:hsla(0,0%,100%,.5);height:3px;transition:all .5s ease;will-change:width}.hiplayer-controller .hiplayer-bar-wrap .hiplayer-bar{position:relative;height:3px;width:calc(100% - 20px);cursor:pointer}.hiplayer-controller .hiplayer-bar-wrap .hiplayer-bar .hiplayer-played{position:absolute;left:0;top:0;bottom:0;transform:translateY(-10%);height:4px;will-change:width}.hiplayer-controller .hiplayer-bar-wrap .hiplayer-bar .hiplayer-played .hiplayer-thumb{position:absolute;top:-12px;right:-23px;height:26px;width:26px;border-radius:50%;cursor:pointer;transition:all .3s ease-in-out}.hiplayer-controller .hiplayer-icons{width:50%;height:60px;padding:5px 0}.hiplayer-controller .hiplayer-icons .hiplayer-pop-mask{position:absolute;left:50%;bottom:38px;width:120%;padding:10px 0;transform:translate(-50%);border-radius:5px 5px 0 0;border:1px solid #444;background:#232326;font-size:18px;color:#ccc;text-align:center;transition:all .3s ease-in-out;overflow:hidden}.hiplayer-controller .hiplayer-icons .hiplayer-pop-mask .hiplayer-pop-list .hiplayer-pop-item{height:50px;line-height:50px;cursor:pointer}.hiplayer-controller .hiplayer-icons .hiplayer-pop-mask .hiplayer-pop-list .hiplayer-pop-item.hiplayer-subtitle-item-auto{height:67px}.hiplayer-controller .hiplayer-icons .hiplayer-pop-mask .hiplayer-pop-list .hiplayer-pop-item.hiplayer-subtitle-item{position:relative}.hiplayer-controller .hiplayer-icons .hiplayer-pop-mask .hiplayer-pop-list .hiplayer-pop-item-std,.hiplayer-controller .hiplayer-icons .hiplayer-pop-mask .hiplayer-pop-list .hiplayer-pop-item:hover{color:#ff5593}.hiplayer-controller .hiplayer-icons.hiplayer-icons-left{max-width:50%;display:flex;justify-content:flex-start;align-items:center}.hiplayer-controller .hiplayer-icons.hiplayer-icons-left .hiplayer-play-icon{order:1}.hiplayer-controller .hiplayer-icons.hiplayer-icons-left .hiplayer-next-play-icon{order:2}.hiplayer-controller .hiplayer-icons.hiplayer-icons-left .hiplayer-seek{order:3}.hiplayer-controller .hiplayer-icons.hiplayer-icons-left .hiplayer-time{order:5}.hiplayer-controller .hiplayer-icons.hiplayer-icons-right{display:flex;justify-content:flex-end;align-items:center}.hiplayer-controller .hiplayer-icons .hiplayer-live-dot{display:inline-block;width:6px;height:6px;vertical-align:4%;margin-right:5px;content:"";border-radius:6px}.hiplayer-controller .hiplayer-icons .hiplayer-text{position:relative;width:auto;height:40px;line-height:40px;padding:0 15px;white-space:nowrap;text-shadow:0 0 2px rgba(0,0,0,.5);vertical-align:middle;font-size:18px;color:#ccc;cursor:pointer}.hiplayer-controller .hiplayer-icons .hiplayer-text:hover{color:#fff}.hiplayer-controller .hiplayer-icons .hiplayer-text .hiplayer-dtime{color:#999}.hiplayer-controller .hiplayer-icons .hiplayer-text.hiplayer-speed-text{width:55px;text-align:center}.hiplayer-controller .hiplayer-icons .hiplayer-icon{flex-shrink:0;width:20px;margin:0 20px;border:none;background-color:transparent;outline:none;cursor:pointer;font-size:0;box-sizing:border-box}.hiplayer-controller .hiplayer-icons .hiplayer-icon.hiplayer-play-icon{width:20px}.hiplayer-controller .hiplayer-icons .hiplayer-icon.hiplayer-next-play-icon{width:21px}.hiplayer-controller .hiplayer-icons .hiplayer-icon.hiplayer-seek-rew-icon{margin:0 10px 0 20px}.hiplayer-controller .hiplayer-icons .hiplayer-icon.hiplayer-seek-ff-icon{margin:0 20px 0 10px}.hiplayer-controller .hiplayer-icons .hiplayer-icon.hiplayer-camera-icon{padding:10px}.hiplayer-controller .hiplayer-icons .hiplayer-icon.hiplayer-volume-icon{width:34px;height:100%;margin-left:15px}.hiplayer-controller .hiplayer-icons .hiplayer-icon.hiplayer-full-icon{width:24px;height:100%}.hiplayer-controller .hiplayer-icons .hiplayer-seek{display:flex;justify-content:center;align-items:center}.hiplayer-controller .hiplayer-icons .hiplayer-volume{position:relative;cursor:pointer;height:100%;z-index:2}.hiplayer-controller .hiplayer-icons .hiplayer-volume:hover .hiplayer-volume-mask{display:flex}.hiplayer-controller .hiplayer-icons .hiplayer-volume.hiplayer-volume-active .hiplayer-volume-bar-wrap .hiplayer-volume-bar .hiplayer-volume-bar-inner .hiplayer-thumb{transform:scale(1)}.hiplayer-controller .hiplayer-icons .hiplayer-volume .hiplayer-volume-mask{display:none;bottom:45px}.hiplayer-controller .hiplayer-icons .hiplayer-volume .hiplayer-volume-mask .hiplayer-volume-setting{display:flex;flex-direction:column;justify-content:space-around;width:100%;height:160px;align-items:center}.hiplayer-controller .hiplayer-icons .hiplayer-volume .hiplayer-volume-mask .hiplayer-volume-setting .hiplayer-volume-bar-wrap{height:120px;width:23px;padding:0 9px;display:flex;justify-content:center}.hiplayer-controller .hiplayer-icons .hiplayer-volume .hiplayer-volume-mask .hiplayer-volume-setting .hiplayer-volume-bar-wrap .hiplayer-volume-bar{position:relative;width:3px;height:120px;background:#aaa;transition:all .3s ease-in-out}.hiplayer-controller .hiplayer-icons .hiplayer-volume .hiplayer-volume-mask .hiplayer-volume-setting .hiplayer-volume-bar-wrap .hiplayer-volume-bar .hiplayer-volume-bar-inner{position:absolute;bottom:0;left:0;width:100%;transition:all .1s ease;will-change:height}.hiplayer-controller .hiplayer-icons .hiplayer-volume .hiplayer-volume-mask .hiplayer-volume-setting .hiplayer-volume-bar-wrap .hiplayer-volume-bar .hiplayer-volume-bar-inner .hiplayer-thumb{position:absolute;top:0;right:6px;margin-top:-4px;margin-right:-10px;height:11px;width:11px;border-radius:50%;cursor:pointer;transition:all .3s ease-in-out}.hiplayer-controller .hiplayer-icons .hiplayer-full{display:inline-block;height:100%;position:relative}.hiplayer-controller .hiplayer-icons .hiplayer-full:hover .hiplayer-full-in-icon{display:block}.hiplayer-controller .hiplayer-icons .hiplayer-full .hiplayer-full-in-icon{position:absolute;top:-40px;padding:6px;z-index:1;display:none}.hiplayer-controller .hiplayer-icons .hiplayer-quality{position:relative;z-index:2}.hiplayer-controller .hiplayer-icons .hiplayer-quality:hover .hiplayer-quality-list,.hiplayer-controller .hiplayer-icons .hiplayer-quality:hover .hiplayer-quality-mask{display:block}.hiplayer-controller .hiplayer-icons .hiplayer-quality .hiplayer-quality-mask{display:none;width:120px}.hiplayer-controller .hiplayer-icons .hiplayer-quality .hiplayer-quality-list{display:none}.hiplayer-controller .hiplayer-icons .hiplayer-subtitle{position:relative;z-index:2}.hiplayer-controller .hiplayer-icons .hiplayer-subtitle:hover .hiplayer-subtitle-list,.hiplayer-controller .hiplayer-icons .hiplayer-subtitle:hover .hiplayer-subtitle-mask{display:block}.hiplayer-controller .hiplayer-icons .hiplayer-subtitle .hiplayer-subtitle-mask{display:none;width:200px}.hiplayer-controller .hiplayer-icons .hiplayer-subtitle .hiplayer-subtitle-list{display:none;max-height:300px;overflow:auto}.hiplayer-controller .hiplayer-icons .hiplayer-speed{position:relative;z-index:2}.hiplayer-controller .hiplayer-icons .hiplayer-speed:hover .hiplayer-speed-list{display:block}.hiplayer-controller .hiplayer-icons .hiplayer-speed:hover .hiplayer-speed-mask{display:block;width:88px}.hiplayer-controller .hiplayer-icons .hiplayer-speed .hiplayer-speed-list,.hiplayer-controller .hiplayer-icons .hiplayer-speed .hiplayer-speed-mask{display:none}.hiplayer-controller .hiplayer-icons .hiplayer-label{color:#eee;font-size:16px;display:inline-block;vertical-align:middle;white-space:nowrap}.hiplayer-controller .hiplayer-icons .hiplayer-toggle{width:32px;height:20px;text-align:center;font-size:0;vertical-align:middle;position:absolute;top:5px;right:10px}.hiplayer-controller .hiplayer-icons .hiplayer-toggle input{max-height:0;max-width:0;display:none}.hiplayer-controller .hiplayer-icons .hiplayer-toggle input+label{display:inline-block;position:relative;box-shadow:inset 0 0 0 0 #dfdfdf;border:1px solid #dfdfdf;height:20px;width:32px;border-radius:10px;box-sizing:border-box;cursor:pointer;transition:.2s ease-in-out}.hiplayer-controller .hiplayer-icons .hiplayer-toggle input+label:after,.hiplayer-controller .hiplayer-icons .hiplayer-toggle input+label:before{content:"";position:absolute;display:block;height:18px;width:18px;top:0;left:0;border-radius:15px;transition:.2s ease-in-out}.hiplayer-controller .hiplayer-icons .hiplayer-toggle input+label:after{background:#fff;box-shadow:0 1px 3px rgba(0,0,0,.4)}.hiplayer-controller .hiplayer-icons .hiplayer-toggle input:checked+label{border-color:hsla(0,0%,100%,.5)}.hiplayer-controller .hiplayer-icons .hiplayer-toggle input:checked+label:before{width:30px;background:hsla(0,0%,100%,.5)}.hiplayer-controller .hiplayer-icons .hiplayer-toggle input:checked+label:after{left:12px}.hiplayer-mobile-controller{position:absolute;bottom:0;left:0;right:0;height:45px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:all .3s ease;padding:0 6px;box-sizing:border-box;display:flex;justify-content:space-between;align-items:center}@media only screen and (min-width:750px){.hiplayer-mobile-controller{height:90px;padding:0 12px}}.hiplayer-mobile-controller .hiplayer-icon{width:40px;height:40px;box-sizing:border-box;padding:8px}@media only screen and (min-width:750px){.hiplayer-mobile-controller .hiplayer-icon{width:60px;height:60px;padding:10px}}.hiplayer-mobile-controller .hiplayer-icon .hiplayer-icon-content{width:100%;height:100%;display:flex;justify-content:center;align-items:center}.hiplayer-mobile-controller .hiplayer-time{color:#eee;text-shadow:0 0 2px rgba(0,0,0,.5);font-size:14px}@media only screen and (min-width:750px){.hiplayer-mobile-controller .hiplayer-time{font-size:28px}}.hiplayer-mobile-controller .hiplayer-bar-wrap{cursor:pointer;position:relative;width:calc(100% - 200px);height:3px}@media only screen and (min-width:750px){.hiplayer-mobile-controller .hiplayer-bar-wrap{width:calc(100% - 400px);height:6px}}.hiplayer-mobile-controller .hiplayer-bar-wrap:hover .hiplayer-bar .hiplayer-played .hiplayer-thumb{transform:scale(1)}.hiplayer-mobile-controller .hiplayer-bar-wrap .hiplayer-bar{position:relative;height:3px;width:100%;background:hsla(0,0%,100%,.2);cursor:pointer}@media only screen and (min-width:750px){.hiplayer-mobile-controller .hiplayer-bar-wrap .hiplayer-bar{height:6px}}.hiplayer-mobile-controller .hiplayer-bar-wrap .hiplayer-bar .hiplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:hsla(0,0%,100%,.4);height:3px;transition:all .5s ease;will-change:width}@media only screen and (min-width:750px){.hiplayer-mobile-controller .hiplayer-bar-wrap .hiplayer-bar .hiplayer-loaded{height:6px}}.hiplayer-mobile-controller .hiplayer-bar-wrap .hiplayer-bar .hiplayer-played{position:absolute;left:0;top:0;bottom:0;height:3px;will-change:width}@media only screen and (min-width:750px){.hiplayer-mobile-controller .hiplayer-bar-wrap .hiplayer-bar .hiplayer-played{height:6px}}.hiplayer-mobile-controller .hiplayer-bar-wrap .hiplayer-bar .hiplayer-played .hiplayer-thumb{position:absolute;top:0;right:0;margin-top:-5px;margin-right:-6.5px;height:13px;width:13px;border-radius:50%;cursor:pointer;transition:all .3s ease-in-out;background:#fff}@media only screen and (min-width:750px){.hiplayer-mobile-controller .hiplayer-bar-wrap .hiplayer-bar .hiplayer-played .hiplayer-thumb{margin-top:-10px;margin-right:-13px;height:26px;width:26px}}.hiplayer-big-play-icon{position:absolute;left:50%;bottom:50%;transform:translate(-50%,40%);display:block;width:70px;height:70px;border:none;background-color:transparent;outline:none;cursor:pointer;box-sizing:border-box;opacity:.8;transition:all .3s ease}.hiplayer-subtitle-translate-type{color:#999;position:absolute;font-size:12px;bottom:16px;line-height:12px;width:100%;text-align:center}.hiplayer-rtl .hiplayer-controller,.hiplayer-rtl .hiplayer-controller .hiplayer-bar-wrap,.hiplayer-rtl .hiplayer-controller .hiplayer-icons.hiplayer-icons-left .hiplayer-seek,.hiplayer-rtl .hiplayer-mobile-controller,.hiplayer-rtl .hiplayer-mobile-controller .hiplayer-bar-wrap,.hiplayer-rtl .hiplayer-mobile-controller .hiplayer-icons.hiplayer-icons-left .hiplayer-seek{direction:ltr}.hiplayer-logo{display:none}.hiplayer-logo,.hiplayer-notice{pointer-events:none;position:absolute}.hiplayer-notice{opacity:0;left:0;bottom:80px;height:40px;line-height:40px;font-size:18px;border-radius:20px;color:#ccc;padding:0 16px;background:rgba(23,23,26,.7);transition:all .3s ease-in-out;overflow:hidden}.hiplayer-mask{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1;display:none}.hiplayer-mask.hiplayer-mask-show{display:block}.hiplayer-video-wrap{position:relative;background:#000;font-size:0;width:100%;height:100%}.hiplayer-video-wrap .hiplayer-video-inner-wrap{position:absolute;width:100%;height:auto;top:50%;left:50%;transform:translate(-50%,-50%)}.hiplayer-video-wrap .hiplayer-video-inner-wrap .hiplayer-video{width:100%;height:100%;display:none;-o-object-fit:contain;object-fit:contain}.hiplayer-video-wrap .hiplayer-video-inner-wrap .hiplayer-video-current{display:block}.hiplayer-video-wrap .hiplayer-video-inner-wrap .hiplayer-video-prepare{display:none}.hiplayer{position:relative;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:1}.hiplayer *{box-sizing:border-box}.hiplayer svg{width:100%;height:100%;fill:#fff}.hiplayer svg:hover{fill:#ddd}.hiplayer.hiplayer-rtl{direction:rtl}.hiplayer.hiplayer-arrow .hiplayer-controller .hiplayer-icons .hiplayer-icon{margin:0 10px}.hiplayer.hiplayer-arrow .hiplayer-controller .hiplayer-icons .hiplayer-text{padding:0 7.5px}.hiplayer.hiplayer-mobile .hiplayer-big-play-icon{position:absolute;left:50%;bottom:50%;width:60px;height:60px;opacity:.6;transform:translate(-50%,40%)}@media only screen and (min-width:750px){.hiplayer.hiplayer-mobile .hiplayer-big-play-icon{width:120px;height:120px}}.hiplayer.hiplayer-mobile .hiplayer-controller-mask{height:80px}.hiplayer:-webkit-full-screen{width:100%;height:100%;background:#000;position:fixed;z-index:100000;left:0;top:0;margin:0;padding:0;transform:translate(0)}.hiplayer:-webkit-full-screen .hiplayer-video{object-fit:contain}.hiplayer:-webkit-full-screen .hiplayer-controller .hiplayer-icons .hiplayer-full:hover .hiplayer-full-in-icon{display:inline-block}.hiplayer:-webkit-full-screen .hiplayer-controller .hiplayer-icons .hiplayer-full .hiplayer-full-in-icon{position:relative;top:0;z-index:1;display:inline-block}.hiplayer.hiplayer-live .hiplayer-bar-wrap,.hiplayer.hiplayer-live .hiplayer-next-play-icon,.hiplayer.hiplayer-live .hiplayer-setting-speed,.hiplayer.hiplayer-live .hiplayer-time{display:none}.hiplayer.hiplayer-loading .hiplayer-bezel .hiplayer-loading-icon{display:block}.hiplayer.hiplayer-hide-controller{cursor:none}.hiplayer.hiplayer-hide-controller .hiplayer-controller,.hiplayer.hiplayer-hide-controller .hiplayer-controller-mask,.hiplayer.hiplayer-hide-controller .hiplayer-mobile-controller{opacity:0;transform:translateY(100%)}.hiplayer.hiplayer-hide-controller .hiplayer-big-play-icon{opacity:0}.hiplayer.hiplayer-show-controller .hiplayer-controller,.hiplayer.hiplayer-show-controller .hiplayer-controller-mask{opacity:1}.hiplayer.hiplayer-show-controller .hiplayer-big-play-icon{display:block}.hiplayer.hiplayer-fulled{position:fixed;z-index:100000;left:0;top:0;width:100%!important;height:100%!important}.hiplayer.hiplayer-id-id .hiplayer-controller .hiplayer-icons .hiplayer-subtitle .hiplayer-subtitle-mask{width:280px}.hiplayer.hiplayer-ar-ae .hiplayer-controller .hiplayer-icons .hiplayer-subtitle .hiplayer-subtitle-mask,.hiplayer.hiplayer-zh-cn .hiplayer-controller .hiplayer-icons .hiplayer-subtitle .hiplayer-subtitle-mask{width:140px}.hiplayer-web-fullscreen-fix{position:fixed;top:0;left:0;margin:0;padding:0}.hiplayer-web-fullscreen-fix .hiplayer-controller .hiplayer-icons .hiplayer-full:hover .hiplayer-full-in-icon{display:inline-block}.hiplayer-web-fullscreen-fix .hiplayer-controller .hiplayer-icons .hiplayer-full .hiplayer-full-in-icon{position:relative;top:0;z-index:1;display:inline-block}.hiplayer-subtitle-wrapper{text-align:center;color:#fff;font-size:20px;line-height:1.3;font-family:Arial,sans-serif;text-underline-offset:4px}.hiplayer-subtitle-wrapper p{display:inline-block;margin:0;padding:0}.hiplayer-subtitle-wrapper .subtitle-text{position:relative;z-index:0}.hiplayer-subtitle-wrapper .subtitle-text:before{content:attr(data-text);position:absolute;-webkit-text-stroke-width:2px;z-index:-1;left:0;width:100%;white-space:pre-line}.hiplayer-subtitle-wrapper.hiplayer-subtitle-hide{display:none}.hiplayer-mobile .hiplayer-subtitle-wrapper{bottom:40px;font-size:14px;text-underline-offset:0}.hiplayer-mobile .hiplayer-subtitle-wrapper .subtitle-text:before{-webkit-text-stroke-width:1px}.hiplayer-rtl .hiplayer-subtitle-wrapper{direction:ltr}',
        "",
      ]),
        (t.a = a);
    },
    function (e, t, r) {
      var i;
      "undefined" != typeof window &&
        ((i = function () {
          return (function (e) {
            var t = {};
            function r(i) {
              if (t[i]) return t[i].exports;
              var a = (t[i] = {
                i: i,
                l: !1,
                exports: {},
              });
              return (
                e[i].call(a.exports, a, a.exports, r), (a.l = !0), a.exports
              );
            }
            return (
              (r.m = e),
              (r.c = t),
              (r.d = function (e, t, i) {
                r.o(e, t) ||
                  Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: i,
                  });
              }),
              (r.r = function (e) {
                "undefined" != typeof Symbol &&
                  Symbol.toStringTag &&
                  Object.defineProperty(e, Symbol.toStringTag, {
                    value: "Module",
                  }),
                  Object.defineProperty(e, "__esModule", {
                    value: !0,
                  });
              }),
              (r.t = function (e, t) {
                if ((1 & t && (e = r(e)), 8 & t)) return e;
                if (4 & t && "object" == typeof e && e && e.__esModule)
                  return e;
                var i = Object.create(null);
                if (
                  (r.r(i),
                  Object.defineProperty(i, "default", {
                    enumerable: !0,
                    value: e,
                  }),
                  2 & t && "string" != typeof e)
                )
                  for (var a in e)
                    r.d(
                      i,
                      a,
                      function (t) {
                        return e[t];
                      }.bind(null, a)
                    );
                return i;
              }),
              (r.n = function (e) {
                var t =
                  e && e.__esModule
                    ? function () {
                        return e.default;
                      }
                    : function () {
                        return e;
                      };
                return r.d(t, "a", t), t;
              }),
              (r.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
              }),
              (r.p = "/dist/"),
              r((r.s = "./src/hls.ts"))
            );
          })({
            /*!*********************************************!*\
  !*** ./node_modules/eventemitter3/index.js ***!
  \*********************************************/
            "./node_modules/eventemitter3/index.js":
              /*! no static exports found */
              /*! ModuleConcatenation bailout: Module is not an ECMAScript module */
              function (e, t, r) {
                "use strict";
                var i = Object.prototype.hasOwnProperty,
                  a = "~";
                function n() {}
                function o(e, t, r) {
                  (this.fn = e), (this.context = t), (this.once = r || !1);
                }
                function s(e, t, r, i, n) {
                  if ("function" != typeof r)
                    throw new TypeError("The listener must be a function");
                  var s = new o(r, i || e, n),
                    l = a ? a + t : t;
                  return (
                    e._events[l]
                      ? e._events[l].fn
                        ? (e._events[l] = [e._events[l], s])
                        : e._events[l].push(s)
                      : ((e._events[l] = s), e._eventsCount++),
                    e
                  );
                }
                function l(e, t) {
                  0 == --e._eventsCount
                    ? (e._events = new n())
                    : delete e._events[t];
                }
                function d() {
                  (this._events = new n()), (this._eventsCount = 0);
                }
                Object.create &&
                  ((n.prototype = Object.create(null)),
                  new n().__proto__ || (a = !1)),
                  (d.prototype.eventNames = function () {
                    var e,
                      t,
                      r = [];
                    if (0 === this._eventsCount) return r;
                    for (t in (e = this._events))
                      i.call(e, t) && r.push(a ? t.slice(1) : t);
                    return Object.getOwnPropertySymbols
                      ? r.concat(Object.getOwnPropertySymbols(e))
                      : r;
                  }),
                  (d.prototype.listeners = function (e) {
                    var t = a ? a + e : e,
                      r = this._events[t];
                    if (!r) return [];
                    if (r.fn) return [r.fn];
                    for (var i = 0, n = r.length, o = new Array(n); i < n; i++)
                      o[i] = r[i].fn;
                    return o;
                  }),
                  (d.prototype.listenerCount = function (e) {
                    var t = a ? a + e : e,
                      r = this._events[t];
                    return r ? (r.fn ? 1 : r.length) : 0;
                  }),
                  (d.prototype.emit = function (e, t, r, i, n, o) {
                    var s = a ? a + e : e;
                    if (!this._events[s]) return !1;
                    var l,
                      d,
                      u = this._events[s],
                      c = arguments.length;
                    if (u.fn) {
                      switch (
                        (u.once && this.removeListener(e, u.fn, void 0, !0), c)
                      ) {
                        case 1:
                          return u.fn.call(u.context), !0;
                        case 2:
                          return u.fn.call(u.context, t), !0;
                        case 3:
                          return u.fn.call(u.context, t, r), !0;
                        case 4:
                          return u.fn.call(u.context, t, r, i), !0;
                        case 5:
                          return u.fn.call(u.context, t, r, i, n), !0;
                        case 6:
                          return u.fn.call(u.context, t, r, i, n, o), !0;
                      }
                      for (d = 1, l = new Array(c - 1); d < c; d++)
                        l[d - 1] = arguments[d];
                      u.fn.apply(u.context, l);
                    } else {
                      var h,
                        f = u.length;
                      for (d = 0; d < f; d++)
                        switch (
                          (u[d].once &&
                            this.removeListener(e, u[d].fn, void 0, !0),
                          c)
                        ) {
                          case 1:
                            u[d].fn.call(u[d].context);
                            break;
                          case 2:
                            u[d].fn.call(u[d].context, t);
                            break;
                          case 3:
                            u[d].fn.call(u[d].context, t, r);
                            break;
                          case 4:
                            u[d].fn.call(u[d].context, t, r, i);
                            break;
                          default:
                            if (!l)
                              for (h = 1, l = new Array(c - 1); h < c; h++)
                                l[h - 1] = arguments[h];
                            u[d].fn.apply(u[d].context, l);
                        }
                    }
                    return !0;
                  }),
                  (d.prototype.on = function (e, t, r) {
                    return s(this, e, t, r, !1);
                  }),
                  (d.prototype.once = function (e, t, r) {
                    return s(this, e, t, r, !0);
                  }),
                  (d.prototype.removeListener = function (e, t, r, i) {
                    var n = a ? a + e : e;
                    if (!this._events[n]) return this;
                    if (!t) return l(this, n), this;
                    var o = this._events[n];
                    if (o.fn)
                      o.fn !== t ||
                        (i && !o.once) ||
                        (r && o.context !== r) ||
                        l(this, n);
                    else {
                      for (var s = 0, d = [], u = o.length; s < u; s++)
                        (o[s].fn !== t ||
                          (i && !o[s].once) ||
                          (r && o[s].context !== r)) &&
                          d.push(o[s]);
                      d.length
                        ? (this._events[n] = 1 === d.length ? d[0] : d)
                        : l(this, n);
                    }
                    return this;
                  }),
                  (d.prototype.removeAllListeners = function (e) {
                    var t;
                    return (
                      e
                        ? ((t = a ? a + e : e), this._events[t] && l(this, t))
                        : ((this._events = new n()), (this._eventsCount = 0)),
                      this
                    );
                  }),
                  (d.prototype.off = d.prototype.removeListener),
                  (d.prototype.addListener = d.prototype.on),
                  (d.prefixed = a),
                  (d.EventEmitter = d),
                  (e.exports = d);
              },
            /*!*****************************************************!*\
  !*** ./node_modules/url-toolkit/src/url-toolkit.js ***!
  \*****************************************************/
            "./node_modules/url-toolkit/src/url-toolkit.js":
              /*! no static exports found */
              /*! ModuleConcatenation bailout: Module is not an ECMAScript module */
              function (e, t, r) {
                var i, a, n, o, s;
                (i =
                  /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/?#]*\/)*[^;?#]*)?(;[^?#]*)?(\?[^#]*)?(#.*)?$/),
                  (a = /^([^\/?#]*)(.*)$/),
                  (n = /(?:\/|^)\.(?=\/)/g),
                  (o = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g),
                  (s = {
                    buildAbsoluteURL: function (e, t, r) {
                      if (((r = r || {}), (e = e.trim()), !(t = t.trim()))) {
                        if (!r.alwaysNormalize) return e;
                        var i = s.parseURL(e);
                        if (!i)
                          throw new Error("Error trying to parse base URL.");
                        return (
                          (i.path = s.normalizePath(i.path)),
                          s.buildURLFromParts(i)
                        );
                      }
                      var n = s.parseURL(t);
                      if (!n)
                        throw new Error("Error trying to parse relative URL.");
                      if (n.scheme)
                        return r.alwaysNormalize
                          ? ((n.path = s.normalizePath(n.path)),
                            s.buildURLFromParts(n))
                          : t;
                      var o = s.parseURL(e);
                      if (!o)
                        throw new Error("Error trying to parse base URL.");
                      if (!o.netLoc && o.path && "/" !== o.path[0]) {
                        var l = a.exec(o.path);
                        (o.netLoc = l[1]), (o.path = l[2]);
                      }
                      o.netLoc && !o.path && (o.path = "/");
                      var d = {
                        scheme: o.scheme,
                        netLoc: n.netLoc,
                        path: null,
                        params: n.params,
                        query: n.query,
                        fragment: n.fragment,
                      };
                      if (
                        !n.netLoc &&
                        ((d.netLoc = o.netLoc), "/" !== n.path[0])
                      )
                        if (n.path) {
                          var u = o.path,
                            c = u.substring(0, u.lastIndexOf("/") + 1) + n.path;
                          d.path = s.normalizePath(c);
                        } else
                          (d.path = o.path),
                            n.params ||
                              ((d.params = o.params),
                              n.query || (d.query = o.query));
                      return (
                        null === d.path &&
                          (d.path = r.alwaysNormalize
                            ? s.normalizePath(n.path)
                            : n.path),
                        s.buildURLFromParts(d)
                      );
                    },
                    parseURL: function (e) {
                      var t = i.exec(e);
                      return t
                        ? {
                            scheme: t[1] || "",
                            netLoc: t[2] || "",
                            path: t[3] || "",
                            params: t[4] || "",
                            query: t[5] || "",
                            fragment: t[6] || "",
                          }
                        : null;
                    },
                    normalizePath: function (e) {
                      for (
                        e = e.split("").reverse().join("").replace(n, "");
                        e.length !== (e = e.replace(o, "")).length;

                      );
                      return e.split("").reverse().join("");
                    },
                    buildURLFromParts: function (e) {
                      return (
                        e.scheme +
                        e.netLoc +
                        e.path +
                        e.params +
                        e.query +
                        e.fragment
                      );
                    },
                  }),
                  (e.exports = s);
              },
            /*!**************************************************!*\
  !*** ./node_modules/webworkify-webpack/index.js ***!
  \**************************************************/
            "./node_modules/webworkify-webpack/index.js":
              /*! no static exports found */
              /*! ModuleConcatenation bailout: Module is not an ECMAScript module */
              function (e, t, r) {
                function i(e) {
                  var t = {};
                  function r(i) {
                    if (t[i]) return t[i].exports;
                    var a = (t[i] = {
                      i: i,
                      l: !1,
                      exports: {},
                    });
                    return (
                      e[i].call(a.exports, a, a.exports, r),
                      (a.l = !0),
                      a.exports
                    );
                  }
                  (r.m = e),
                    (r.c = t),
                    (r.i = function (e) {
                      return e;
                    }),
                    (r.d = function (e, t, i) {
                      r.o(e, t) ||
                        Object.defineProperty(e, t, {
                          configurable: !1,
                          enumerable: !0,
                          get: i,
                        });
                    }),
                    (r.r = function (e) {
                      Object.defineProperty(e, "__esModule", {
                        value: !0,
                      });
                    }),
                    (r.n = function (e) {
                      var t =
                        e && e.__esModule
                          ? function () {
                              return e.default;
                            }
                          : function () {
                              return e;
                            };
                      return r.d(t, "a", t), t;
                    }),
                    (r.o = function (e, t) {
                      return Object.prototype.hasOwnProperty.call(e, t);
                    }),
                    (r.p = "/"),
                    (r.oe = function (e) {
                      throw (console.error(e), e);
                    });
                  var i = r((r.s = ENTRY_MODULE));
                  return i.default || i;
                }
                function a(e) {
                  return (e + "").replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
                }
                function n(e, t, i) {
                  var n = {};
                  n[i] = [];
                  var o = t.toString(),
                    s = o.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);
                  if (!s) return n;
                  for (
                    var l,
                      d = s[1],
                      u = new RegExp(
                        "(\\\\n|\\W)" +
                          a(d) +
                          "\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)",
                        "g"
                      );
                    (l = u.exec(o));

                  )
                    "dll-reference" !== l[3] && n[i].push(l[3]);
                  for (
                    u = new RegExp(
                      "\\(" +
                        a(d) +
                        '\\("(dll-reference\\s([\\.|\\-|\\+|\\w|/|@]+))"\\)\\)\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)',
                      "g"
                    );
                    (l = u.exec(o));

                  )
                    e[l[2]] || (n[i].push(l[1]), (e[l[2]] = r(l[1]).m)),
                      (n[l[2]] = n[l[2]] || []),
                      n[l[2]].push(l[4]);
                  for (var c, h = Object.keys(n), f = 0; f < h.length; f++)
                    for (var p = 0; p < n[h[f]].length; p++)
                      (c = n[h[f]][p]),
                        isNaN(1 * c) || (n[h[f]][p] = 1 * n[h[f]][p]);
                  return n;
                }
                function o(e) {
                  return Object.keys(e).reduce(function (t, r) {
                    return t || e[r].length > 0;
                  }, !1);
                }
                e.exports = function (e, t) {
                  t = t || {};
                  var a = {
                      main: r.m,
                    },
                    s = t.all
                      ? {
                          main: Object.keys(a.main),
                        }
                      : (function (e, t) {
                          for (
                            var r = {
                                main: [t],
                              },
                              i = {
                                main: [],
                              },
                              a = {
                                main: {},
                              };
                            o(r);

                          )
                            for (
                              var s = Object.keys(r), l = 0;
                              l < s.length;
                              l++
                            ) {
                              var d = s[l],
                                u = r[d].pop();
                              if (((a[d] = a[d] || {}), !a[d][u] && e[d][u])) {
                                (a[d][u] = !0),
                                  (i[d] = i[d] || []),
                                  i[d].push(u);
                                for (
                                  var c = n(e, e[d][u], d),
                                    h = Object.keys(c),
                                    f = 0;
                                  f < h.length;
                                  f++
                                )
                                  (r[h[f]] = r[h[f]] || []),
                                    (r[h[f]] = r[h[f]].concat(c[h[f]]));
                              }
                            }
                          return i;
                        })(a, e),
                    l = "";
                  Object.keys(s)
                    .filter(function (e) {
                      return "main" !== e;
                    })
                    .forEach(function (e) {
                      for (var t = 0; s[e][t]; ) t++;
                      s[e].push(t),
                        (a[e][t] =
                          "(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })"),
                        (l =
                          l +
                          "var " +
                          e +
                          " = (" +
                          i
                            .toString()
                            .replace("ENTRY_MODULE", JSON.stringify(t)) +
                          ")({" +
                          s[e]
                            .map(function (t) {
                              return (
                                JSON.stringify(t) + ": " + a[e][t].toString()
                              );
                            })
                            .join(",") +
                          "});\n");
                    }),
                    (l =
                      l +
                      "new ((" +
                      i.toString().replace("ENTRY_MODULE", JSON.stringify(e)) +
                      ")({" +
                      s.main
                        .map(function (e) {
                          return (
                            JSON.stringify(e) + ": " + a.main[e].toString()
                          );
                        })
                        .join(",") +
                      "}))(self);");
                  var d = new window.Blob([l], {
                    type: "text/javascript",
                  });
                  if (t.bare) return d;
                  var u = (
                      window.URL ||
                      window.webkitURL ||
                      window.mozURL ||
                      window.msURL
                    ).createObjectURL(d),
                    c = new window.Worker(u);
                  return (c.objectURL = u), c;
                };
              },
            /*!********************************************!*\
  !*** ./src/crypt/decrypter.js + 3 modules ***!
  \********************************************/
            "./src/crypt/decrypter.js":
              /*! exports provided: default */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/errors.ts because of ./src/hls.ts */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/events.js because of ./src/hls.ts */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/utils/get-self-scope.js because of ./src/hls.ts */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/utils/logger.js because of ./src/hls.ts */
              function (e, t, r) {
                "use strict";
                r.r(t);
                var i = (function () {
                    function e(e, t) {
                      (this.subtle = e), (this.aesIV = t);
                    }
                    return (
                      (e.prototype.decrypt = function (e, t) {
                        return this.subtle.decrypt(
                          {
                            name: "AES-CBC",
                            iv: this.aesIV,
                          },
                          t,
                          e
                        );
                      }),
                      e
                    );
                  })(),
                  a = (function () {
                    function e(e, t) {
                      (this.subtle = e), (this.key = t);
                    }
                    return (
                      (e.prototype.expandKey = function () {
                        return this.subtle.importKey(
                          "raw",
                          this.key,
                          {
                            name: "AES-CBC",
                          },
                          !1,
                          ["encrypt", "decrypt"]
                        );
                      }),
                      e
                    );
                  })(),
                  n = (function () {
                    function e() {
                      (this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54]),
                        (this.subMix = [
                          new Uint32Array(256),
                          new Uint32Array(256),
                          new Uint32Array(256),
                          new Uint32Array(256),
                        ]),
                        (this.invSubMix = [
                          new Uint32Array(256),
                          new Uint32Array(256),
                          new Uint32Array(256),
                          new Uint32Array(256),
                        ]),
                        (this.sBox = new Uint32Array(256)),
                        (this.invSBox = new Uint32Array(256)),
                        (this.key = new Uint32Array(0)),
                        this.initTable();
                    }
                    var t = e.prototype;
                    return (
                      (t.uint8ArrayToUint32Array_ = function (e) {
                        for (
                          var t = new DataView(e),
                            r = new Uint32Array(4),
                            i = 0;
                          i < 4;
                          i++
                        )
                          r[i] = t.getUint32(4 * i);
                        return r;
                      }),
                      (t.initTable = function () {
                        var e = this.sBox,
                          t = this.invSBox,
                          r = this.subMix,
                          i = r[0],
                          a = r[1],
                          n = r[2],
                          o = r[3],
                          s = this.invSubMix,
                          l = s[0],
                          d = s[1],
                          u = s[2],
                          c = s[3],
                          h = new Uint32Array(256),
                          f = 0,
                          p = 0,
                          g = 0;
                        for (g = 0; g < 256; g++)
                          h[g] = g < 128 ? g << 1 : (g << 1) ^ 283;
                        for (g = 0; g < 256; g++) {
                          var v = p ^ (p << 1) ^ (p << 2) ^ (p << 3) ^ (p << 4);
                          (v = (v >>> 8) ^ (255 & v) ^ 99),
                            (e[f] = v),
                            (t[v] = f);
                          var y = h[f],
                            m = h[y],
                            b = h[m],
                            _ = (257 * h[v]) ^ (16843008 * v);
                          (i[f] = (_ << 24) | (_ >>> 8)),
                            (a[f] = (_ << 16) | (_ >>> 16)),
                            (n[f] = (_ << 8) | (_ >>> 24)),
                            (o[f] = _),
                            (_ =
                              (16843009 * b) ^
                              (65537 * m) ^
                              (257 * y) ^
                              (16843008 * f)),
                            (l[v] = (_ << 24) | (_ >>> 8)),
                            (d[v] = (_ << 16) | (_ >>> 16)),
                            (u[v] = (_ << 8) | (_ >>> 24)),
                            (c[v] = _),
                            f
                              ? ((f = y ^ h[h[h[b ^ y]]]), (p ^= h[h[p]]))
                              : (f = p = 1);
                        }
                      }),
                      (t.expandKey = function (e) {
                        for (
                          var t = this.uint8ArrayToUint32Array_(e),
                            r = !0,
                            i = 0;
                          i < t.length && r;

                        )
                          (r = t[i] === this.key[i]), i++;
                        if (!r) {
                          this.key = t;
                          var a = (this.keySize = t.length);
                          if (4 !== a && 6 !== a && 8 !== a)
                            throw new Error("Invalid aes key size=" + a);
                          var n,
                            o,
                            s,
                            l,
                            d = (this.ksRows = 4 * (a + 6 + 1)),
                            u = (this.keySchedule = new Uint32Array(d)),
                            c = (this.invKeySchedule = new Uint32Array(d)),
                            h = this.sBox,
                            f = this.rcon,
                            p = this.invSubMix,
                            g = p[0],
                            v = p[1],
                            y = p[2],
                            m = p[3];
                          for (n = 0; n < d; n++)
                            n < a
                              ? (s = u[n] = t[n])
                              : ((l = s),
                                n % a == 0
                                  ? ((l =
                                      (h[(l = (l << 8) | (l >>> 24)) >>> 24] <<
                                        24) |
                                      (h[(l >>> 16) & 255] << 16) |
                                      (h[(l >>> 8) & 255] << 8) |
                                      h[255 & l]),
                                    (l ^= f[(n / a) | 0] << 24))
                                  : a > 6 &&
                                    n % a == 4 &&
                                    (l =
                                      (h[l >>> 24] << 24) |
                                      (h[(l >>> 16) & 255] << 16) |
                                      (h[(l >>> 8) & 255] << 8) |
                                      h[255 & l]),
                                (u[n] = s = (u[n - a] ^ l) >>> 0));
                          for (o = 0; o < d; o++)
                            (n = d - o),
                              (l = 3 & o ? u[n] : u[n - 4]),
                              (c[o] =
                                o < 4 || n <= 4
                                  ? l
                                  : g[h[l >>> 24]] ^
                                    v[h[(l >>> 16) & 255]] ^
                                    y[h[(l >>> 8) & 255]] ^
                                    m[h[255 & l]]),
                              (c[o] = c[o] >>> 0);
                        }
                      }),
                      (t.networkToHostOrderSwap = function (e) {
                        return (
                          (e << 24) |
                          ((65280 & e) << 8) |
                          ((16711680 & e) >> 8) |
                          (e >>> 24)
                        );
                      }),
                      (t.decrypt = function (e, t, r, i) {
                        for (
                          var a,
                            n,
                            o,
                            s,
                            l,
                            d,
                            u,
                            c,
                            h,
                            f,
                            p,
                            g,
                            v,
                            y,
                            m,
                            b,
                            _,
                            w = this.keySize + 6,
                            T = this.invKeySchedule,
                            E = this.invSBox,
                            S = this.invSubMix,
                            k = S[0],
                            x = S[1],
                            A = S[2],
                            R = S[3],
                            L = this.uint8ArrayToUint32Array_(r),
                            D = L[0],
                            C = L[1],
                            O = L[2],
                            I = L[3],
                            P = new Int32Array(e),
                            F = new Int32Array(P.length),
                            M = this.networkToHostOrderSwap;
                          t < P.length;

                        ) {
                          for (
                            h = M(P[t]),
                              f = M(P[t + 1]),
                              p = M(P[t + 2]),
                              g = M(P[t + 3]),
                              l = h ^ T[0],
                              d = g ^ T[1],
                              u = p ^ T[2],
                              c = f ^ T[3],
                              v = 4,
                              y = 1;
                            y < w;
                            y++
                          )
                            (a =
                              k[l >>> 24] ^
                              x[(d >> 16) & 255] ^
                              A[(u >> 8) & 255] ^
                              R[255 & c] ^
                              T[v]),
                              (n =
                                k[d >>> 24] ^
                                x[(u >> 16) & 255] ^
                                A[(c >> 8) & 255] ^
                                R[255 & l] ^
                                T[v + 1]),
                              (o =
                                k[u >>> 24] ^
                                x[(c >> 16) & 255] ^
                                A[(l >> 8) & 255] ^
                                R[255 & d] ^
                                T[v + 2]),
                              (s =
                                k[c >>> 24] ^
                                x[(l >> 16) & 255] ^
                                A[(d >> 8) & 255] ^
                                R[255 & u] ^
                                T[v + 3]),
                              (l = a),
                              (d = n),
                              (u = o),
                              (c = s),
                              (v += 4);
                          (a =
                            (E[l >>> 24] << 24) ^
                            (E[(d >> 16) & 255] << 16) ^
                            (E[(u >> 8) & 255] << 8) ^
                            E[255 & c] ^
                            T[v]),
                            (n =
                              (E[d >>> 24] << 24) ^
                              (E[(u >> 16) & 255] << 16) ^
                              (E[(c >> 8) & 255] << 8) ^
                              E[255 & l] ^
                              T[v + 1]),
                            (o =
                              (E[u >>> 24] << 24) ^
                              (E[(c >> 16) & 255] << 16) ^
                              (E[(l >> 8) & 255] << 8) ^
                              E[255 & d] ^
                              T[v + 2]),
                            (s =
                              (E[c >>> 24] << 24) ^
                              (E[(l >> 16) & 255] << 16) ^
                              (E[(d >> 8) & 255] << 8) ^
                              E[255 & u] ^
                              T[v + 3]),
                            (v += 3),
                            (F[t] = M(a ^ D)),
                            (F[t + 1] = M(s ^ C)),
                            (F[t + 2] = M(o ^ O)),
                            (F[t + 3] = M(n ^ I)),
                            (D = h),
                            (C = f),
                            (O = p),
                            (I = g),
                            (t += 4);
                        }
                        return i
                          ? ((m = F.buffer),
                            (b = m.byteLength),
                            (_ = b && new DataView(m).getUint8(b - 1))
                              ? m.slice(0, b - _)
                              : m)
                          : F.buffer;
                      }),
                      (t.destroy = function () {
                        (this.key = void 0),
                          (this.keySize = void 0),
                          (this.ksRows = void 0),
                          (this.sBox = void 0),
                          (this.invSBox = void 0),
                          (this.subMix = void 0),
                          (this.invSubMix = void 0),
                          (this.keySchedule = void 0),
                          (this.invKeySchedule = void 0),
                          (this.rcon = void 0);
                      }),
                      e
                    );
                  })(),
                  o = r("./src/errors.ts"),
                  s = r("./src/utils/logger.js"),
                  l = r("./src/events.js"),
                  d = r("./src/utils/get-self-scope.js"),
                  u = Object(d.getSelfScope)(),
                  c = (function () {
                    function e(e, t, r) {
                      var i = (void 0 === r ? {} : r).removePKCS7Padding,
                        a = void 0 === i || i;
                      if (
                        ((this.logEnabled = !0),
                        (this.observer = e),
                        (this.config = t),
                        (this.removePKCS7Padding = a),
                        a)
                      )
                        try {
                          var n = u.crypto;
                          n && (this.subtle = n.subtle || n.webkitSubtle);
                        } catch (e) {}
                      this.disableWebCrypto = !this.subtle;
                    }
                    var t = e.prototype;
                    return (
                      (t.isSync = function () {
                        return (
                          this.disableWebCrypto && this.config.enableSoftwareAES
                        );
                      }),
                      (t.decrypt = function (e, t, r, o) {
                        var l = this;
                        if (
                          this.disableWebCrypto &&
                          this.config.enableSoftwareAES
                        ) {
                          this.logEnabled &&
                            (s.logger.log("JS AES decrypt"),
                            (this.logEnabled = !1));
                          var d = this.decryptor;
                          d || (this.decryptor = d = new n()),
                            d.expandKey(t),
                            o(d.decrypt(e, 0, r, this.removePKCS7Padding));
                        } else {
                          this.logEnabled &&
                            (s.logger.log("WebCrypto AES decrypt"),
                            (this.logEnabled = !1));
                          var u = this.subtle;
                          this.key !== t &&
                            ((this.key = t), (this.fastAesKey = new a(u, t))),
                            this.fastAesKey
                              .expandKey()
                              .then(function (a) {
                                new i(u, r)
                                  .decrypt(e, a)
                                  .catch(function (i) {
                                    l.onWebCryptoError(i, e, t, r, o);
                                  })
                                  .then(function (e) {
                                    o(e);
                                  });
                              })
                              .catch(function (i) {
                                l.onWebCryptoError(i, e, t, r, o);
                              });
                        }
                      }),
                      (t.onWebCryptoError = function (e, t, r, i, a) {
                        this.config.enableSoftwareAES
                          ? (s.logger.log(
                              "WebCrypto Error, disable WebCrypto API"
                            ),
                            (this.disableWebCrypto = !0),
                            (this.logEnabled = !0),
                            this.decrypt(t, r, i, a))
                          : (s.logger.error("decrypting error : " + e.message),
                            this.observer.trigger(l.default.ERROR, {
                              type: o.ErrorTypes.MEDIA_ERROR,
                              details: o.ErrorDetails.FRAG_DECRYPT_ERROR,
                              fatal: !0,
                              reason: e.message,
                            }));
                      }),
                      (t.destroy = function () {
                        var e = this.decryptor;
                        e && (e.destroy(), (this.decryptor = void 0));
                      }),
                      e
                    );
                  })();
                t.default = c;
              },
            /*!**************************************************!*\
  !*** ./src/demux/demuxer-inline.js + 12 modules ***!
  \**************************************************/
            "./src/demux/demuxer-inline.js":
              /*! exports provided: default */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/crypt/decrypter.js because of ./src/hls.ts */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/demux/id3.js because of ./src/hls.ts */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/demux/mp4demuxer.js because of ./src/hls.ts */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/errors.ts because of ./src/hls.ts */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/events.js because of ./src/hls.ts */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/polyfills/number.js because of ./src/hls.ts */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/utils/get-self-scope.js because of ./src/hls.ts */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/utils/logger.js because of ./src/hls.ts */
              function (e, t, r) {
                "use strict";
                r.r(t);
                var i = r("./src/events.js"),
                  a = r("./src/errors.ts"),
                  n = r("./src/crypt/decrypter.js"),
                  o = r("./src/polyfills/number.js"),
                  s = r("./src/utils/logger.js"),
                  l = r("./src/utils/get-self-scope.js");
                function d(e, t) {
                  return 255 === e[t] && 240 == (246 & e[t + 1]);
                }
                function u(e, t) {
                  return 1 & e[t + 1] ? 7 : 9;
                }
                function c(e, t) {
                  return (
                    ((3 & e[t + 3]) << 11) |
                    (e[t + 4] << 3) |
                    ((224 & e[t + 5]) >>> 5)
                  );
                }
                function h(e, t) {
                  return !!(t + 1 < e.length && d(e, t));
                }
                function f(e, t) {
                  if (h(e, t)) {
                    var r = u(e, t);
                    if (t + r >= e.length) return !1;
                    var i = c(e, t);
                    if (i <= r) return !1;
                    var a = t + i;
                    if (a === e.length || (a + 1 < e.length && d(e, a)))
                      return !0;
                  }
                  return !1;
                }
                function p(e, t, r, n, o) {
                  if (!e.samplerate) {
                    var l = (function (e, t, r, n) {
                      var o,
                        l,
                        d,
                        u,
                        c,
                        h = navigator.userAgent.toLowerCase(),
                        f = n,
                        p = [
                          96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050,
                          16e3, 12e3, 11025, 8e3, 7350,
                        ];
                      if (
                        ((o = 1 + ((192 & t[r + 2]) >>> 6)),
                        !((l = (60 & t[r + 2]) >>> 2) > p.length - 1))
                      )
                        return (
                          (u = (1 & t[r + 2]) << 2),
                          (u |= (192 & t[r + 3]) >>> 6),
                          s.logger.log(
                            "manifest codec:" +
                              n +
                              ",ADTS data:type:" +
                              o +
                              ",sampleingIndex:" +
                              l +
                              "[" +
                              p[l] +
                              "Hz],channelConfig:" +
                              u
                          ),
                          /firefox/i.test(h)
                            ? l >= 6
                              ? ((o = 5), (c = new Array(4)), (d = l - 3))
                              : ((o = 2), (c = new Array(2)), (d = l))
                            : -1 !== h.indexOf("android")
                            ? ((o = 2), (c = new Array(2)), (d = l))
                            : ((o = 5),
                              (c = new Array(4)),
                              (n &&
                                (-1 !== n.indexOf("mp4a.40.29") ||
                                  -1 !== n.indexOf("mp4a.40.5"))) ||
                              (!n && l >= 6)
                                ? (d = l - 3)
                                : (((n &&
                                    -1 !== n.indexOf("mp4a.40.2") &&
                                    ((l >= 6 && 1 === u) ||
                                      /vivaldi/i.test(h))) ||
                                    (!n && 1 === u)) &&
                                    ((o = 2), (c = new Array(2))),
                                  (d = l))),
                          (c[0] = o << 3),
                          (c[0] |= (14 & l) >> 1),
                          (c[1] |= (1 & l) << 7),
                          (c[1] |= u << 3),
                          5 === o &&
                            ((c[1] |= (14 & d) >> 1),
                            (c[2] = (1 & d) << 7),
                            (c[2] |= 8),
                            (c[3] = 0)),
                          {
                            config: c,
                            samplerate: p[l],
                            channelCount: u,
                            codec: "mp4a.40." + o,
                            manifestCodec: f,
                          }
                        );
                      e.trigger(i.default.ERROR, {
                        type: a.ErrorTypes.MEDIA_ERROR,
                        details: a.ErrorDetails.FRAG_PARSING_ERROR,
                        fatal: !0,
                        reason: "invalid ADTS sampling index:" + l,
                      });
                    })(t, r, n, o);
                    (e.config = l.config),
                      (e.samplerate = l.samplerate),
                      (e.channelCount = l.channelCount),
                      (e.codec = l.codec),
                      (e.manifestCodec = l.manifestCodec),
                      s.logger.log(
                        "parsed codec:" +
                          e.codec +
                          ",rate:" +
                          l.samplerate +
                          ",nb channel:" +
                          l.channelCount
                      );
                  }
                }
                function g(e) {
                  return 9216e4 / e;
                }
                function v(e, t, r, i, a) {
                  var n = (function (e, t, r, i, a) {
                    var n,
                      o,
                      s = e.length;
                    if (
                      ((n = u(e, t)),
                      (o = c(e, t)),
                      (o -= n) > 0 && t + n + o <= s)
                    )
                      return {
                        headerLength: n,
                        frameLength: o,
                        stamp: r + i * a,
                      };
                  })(t, r, i, a, g(e.samplerate));
                  if (n) {
                    var o = n.stamp,
                      s = n.headerLength,
                      l = n.frameLength,
                      d = {
                        unit: t.subarray(r + s, r + s + l),
                        pts: o,
                        dts: o,
                      };
                    return (
                      e.samples.push(d),
                      {
                        sample: d,
                        length: l + s,
                      }
                    );
                  }
                }
                var y = r("./src/demux/id3.js"),
                  m = (function () {
                    function e(e, t, r) {
                      (this.observer = e),
                        (this.config = r),
                        (this.remuxer = t);
                    }
                    var t = e.prototype;
                    return (
                      (t.resetInitSegment = function (e, t, r, i) {
                        this._audioTrack = {
                          container: "audio/adts",
                          type: "audio",
                          id: 0,
                          sequenceNumber: 0,
                          isAAC: !0,
                          samples: [],
                          len: 0,
                          manifestCodec: t,
                          duration: i,
                          inputTimeScale: 9e4,
                        };
                      }),
                      (t.resetTimeStamp = function () {}),
                      (e.probe = function (e) {
                        if (!e) return !1;
                        for (
                          var t = (y.default.getID3Data(e, 0) || []).length,
                            r = e.length;
                          t < r;
                          t++
                        )
                          if (f(e, t))
                            return s.logger.log("ADTS sync word found !"), !0;
                        return !1;
                      }),
                      (t.append = function (e, t, r, i) {
                        for (
                          var a = this._audioTrack,
                            n = y.default.getID3Data(e, 0) || [],
                            l = y.default.getTimeStamp(n),
                            d = Object(o.isFiniteNumber)(l) ? 90 * l : 9e4 * t,
                            u = 0,
                            c = d,
                            f = e.length,
                            g = n.length,
                            m = [
                              {
                                pts: c,
                                dts: c,
                                data: n,
                              },
                            ];
                          g < f - 1;

                        )
                          if (h(e, g) && g + 5 < f) {
                            p(a, this.observer, e, g, a.manifestCodec);
                            var b = v(a, e, g, d, u);
                            if (!b) {
                              s.logger.log("Unable to parse AAC frame");
                              break;
                            }
                            (g += b.length), (c = b.sample.pts), u++;
                          } else
                            y.default.isHeader(e, g)
                              ? ((n = y.default.getID3Data(e, g)),
                                m.push({
                                  pts: c,
                                  dts: c,
                                  data: n,
                                }),
                                (g += n.length))
                              : g++;
                        this.remuxer.remux(
                          a,
                          {
                            samples: [],
                          },
                          {
                            samples: m,
                            inputTimeScale: 9e4,
                          },
                          {
                            samples: [],
                          },
                          t,
                          r,
                          i
                        );
                      }),
                      (t.destroy = function () {}),
                      e
                    );
                  })(),
                  b = r("./src/demux/mp4demuxer.js"),
                  _ = {
                    BitratesMap: [
                      32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384,
                      416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224,
                      256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160,
                      192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144,
                      160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64,
                      80, 96, 112, 128, 144, 160,
                    ],
                    SamplingRateMap: [
                      44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3,
                    ],
                    SamplesCoefficients: [
                      [0, 72, 144, 12],
                      [0, 0, 0, 0],
                      [0, 72, 144, 12],
                      [0, 144, 144, 12],
                    ],
                    BytesInSlot: [0, 1, 1, 4],
                    appendFrame: function (e, t, r, i, a) {
                      if (!(r + 24 > t.length)) {
                        var n = this.parseHeader(t, r);
                        if (n && r + n.frameLength <= t.length) {
                          var o =
                              i +
                              a * ((9e4 * n.samplesPerFrame) / n.sampleRate),
                            s = {
                              unit: t.subarray(r, r + n.frameLength),
                              pts: o,
                              dts: o,
                            };
                          return (
                            (e.config = []),
                            (e.channelCount = n.channelCount),
                            (e.samplerate = n.sampleRate),
                            e.samples.push(s),
                            {
                              sample: s,
                              length: n.frameLength,
                            }
                          );
                        }
                      }
                    },
                    parseHeader: function (e, t) {
                      var r = (e[t + 1] >> 3) & 3,
                        i = (e[t + 1] >> 1) & 3,
                        a = (e[t + 2] >> 4) & 15,
                        n = (e[t + 2] >> 2) & 3,
                        o = (e[t + 2] >> 1) & 1;
                      if (1 !== r && 0 !== a && 15 !== a && 3 !== n) {
                        var s = 3 === r ? 3 - i : 3 === i ? 3 : 4,
                          l = 1e3 * _.BitratesMap[14 * s + a - 1],
                          d = 3 === r ? 0 : 2 === r ? 1 : 2,
                          u = _.SamplingRateMap[3 * d + n],
                          c = e[t + 3] >> 6 == 3 ? 1 : 2,
                          h = _.SamplesCoefficients[r][i],
                          f = _.BytesInSlot[i],
                          p = 8 * h * f;
                        return {
                          sampleRate: u,
                          channelCount: c,
                          frameLength: parseInt((h * l) / u + o, 10) * f,
                          samplesPerFrame: p,
                        };
                      }
                    },
                    isHeaderPattern: function (e, t) {
                      return (
                        255 === e[t] &&
                        224 == (224 & e[t + 1]) &&
                        0 != (6 & e[t + 1])
                      );
                    },
                    isHeader: function (e, t) {
                      return !!(t + 1 < e.length && this.isHeaderPattern(e, t));
                    },
                    probe: function (e, t) {
                      if (t + 1 < e.length && this.isHeaderPattern(e, t)) {
                        var r = this.parseHeader(e, t),
                          i = 4;
                        r && r.frameLength && (i = r.frameLength);
                        var a = t + i;
                        if (
                          a === e.length ||
                          (a + 1 < e.length && this.isHeaderPattern(e, a))
                        )
                          return !0;
                      }
                      return !1;
                    },
                  },
                  w = _,
                  T = (function () {
                    function e(e) {
                      (this.data = e),
                        (this.bytesAvailable = e.byteLength),
                        (this.word = 0),
                        (this.bitsAvailable = 0);
                    }
                    var t = e.prototype;
                    return (
                      (t.loadWord = function () {
                        var e = this.data,
                          t = this.bytesAvailable,
                          r = e.byteLength - t,
                          i = new Uint8Array(4),
                          a = Math.min(4, t);
                        if (0 === a) throw new Error("no bytes available");
                        i.set(e.subarray(r, r + a)),
                          (this.word = new DataView(i.buffer).getUint32(0)),
                          (this.bitsAvailable = 8 * a),
                          (this.bytesAvailable -= a);
                      }),
                      (t.skipBits = function (e) {
                        var t;
                        this.bitsAvailable > e
                          ? ((this.word <<= e), (this.bitsAvailable -= e))
                          : ((e -= this.bitsAvailable),
                            (e -= (t = e >> 3) >> 3),
                            (this.bytesAvailable -= t),
                            this.loadWord(),
                            (this.word <<= e),
                            (this.bitsAvailable -= e));
                      }),
                      (t.readBits = function (e) {
                        var t = Math.min(this.bitsAvailable, e),
                          r = this.word >>> (32 - t);
                        return (
                          e > 32 &&
                            s.logger.error(
                              "Cannot read more than 32 bits at a time"
                            ),
                          (this.bitsAvailable -= t),
                          this.bitsAvailable > 0
                            ? (this.word <<= t)
                            : this.bytesAvailable > 0 && this.loadWord(),
                          (t = e - t) > 0 && this.bitsAvailable
                            ? (r << t) | this.readBits(t)
                            : r
                        );
                      }),
                      (t.skipLZ = function () {
                        var e;
                        for (e = 0; e < this.bitsAvailable; ++e)
                          if (0 != (this.word & (2147483648 >>> e)))
                            return (
                              (this.word <<= e), (this.bitsAvailable -= e), e
                            );
                        return this.loadWord(), e + this.skipLZ();
                      }),
                      (t.skipUEG = function () {
                        this.skipBits(1 + this.skipLZ());
                      }),
                      (t.skipEG = function () {
                        this.skipBits(1 + this.skipLZ());
                      }),
                      (t.readUEG = function () {
                        var e = this.skipLZ();
                        return this.readBits(e + 1) - 1;
                      }),
                      (t.readEG = function () {
                        var e = this.readUEG();
                        return 1 & e ? (1 + e) >>> 1 : -1 * (e >>> 1);
                      }),
                      (t.readBoolean = function () {
                        return 1 === this.readBits(1);
                      }),
                      (t.readUByte = function () {
                        return this.readBits(8);
                      }),
                      (t.readUShort = function () {
                        return this.readBits(16);
                      }),
                      (t.readUInt = function () {
                        return this.readBits(32);
                      }),
                      (t.skipScalingList = function (e) {
                        var t,
                          r = 8,
                          i = 8;
                        for (t = 0; t < e; t++)
                          0 !== i && (i = (r + this.readEG() + 256) % 256),
                            (r = 0 === i ? r : i);
                      }),
                      (t.readSPS = function () {
                        var e,
                          t,
                          r,
                          i,
                          a,
                          n,
                          o,
                          s = 0,
                          l = 0,
                          d = 0,
                          u = 0,
                          c = this.readUByte.bind(this),
                          h = this.readBits.bind(this),
                          f = this.readUEG.bind(this),
                          p = this.readBoolean.bind(this),
                          g = this.skipBits.bind(this),
                          v = this.skipEG.bind(this),
                          y = this.skipUEG.bind(this),
                          m = this.skipScalingList.bind(this);
                        if (
                          (c(),
                          (e = c()),
                          h(5),
                          g(3),
                          c(),
                          y(),
                          100 === e ||
                            110 === e ||
                            122 === e ||
                            244 === e ||
                            44 === e ||
                            83 === e ||
                            86 === e ||
                            118 === e ||
                            128 === e)
                        ) {
                          var b = f();
                          if ((3 === b && g(1), y(), y(), g(1), p()))
                            for (n = 3 !== b ? 8 : 12, o = 0; o < n; o++)
                              p() && m(o < 6 ? 16 : 64);
                        }
                        y();
                        var _ = f();
                        if (0 === _) f();
                        else if (1 === _)
                          for (g(1), v(), v(), t = f(), o = 0; o < t; o++) v();
                        y(),
                          g(1),
                          (r = f()),
                          (i = f()),
                          0 === (a = h(1)) && g(1),
                          g(1),
                          p() && ((s = f()), (l = f()), (d = f()), (u = f()));
                        var w = [1, 1];
                        if (p() && p())
                          switch (c()) {
                            case 1:
                              w = [1, 1];
                              break;
                            case 2:
                              w = [12, 11];
                              break;
                            case 3:
                              w = [10, 11];
                              break;
                            case 4:
                              w = [16, 11];
                              break;
                            case 5:
                              w = [40, 33];
                              break;
                            case 6:
                              w = [24, 11];
                              break;
                            case 7:
                              w = [20, 11];
                              break;
                            case 8:
                              w = [32, 11];
                              break;
                            case 9:
                              w = [80, 33];
                              break;
                            case 10:
                              w = [18, 11];
                              break;
                            case 11:
                              w = [15, 11];
                              break;
                            case 12:
                              w = [64, 33];
                              break;
                            case 13:
                              w = [160, 99];
                              break;
                            case 14:
                              w = [4, 3];
                              break;
                            case 15:
                              w = [3, 2];
                              break;
                            case 16:
                              w = [2, 1];
                              break;
                            case 255:
                              w = [(c() << 8) | c(), (c() << 8) | c()];
                          }
                        return {
                          width: Math.ceil(16 * (r + 1) - 2 * s - 2 * l),
                          height:
                            (2 - a) * (i + 1) * 16 - (a ? 2 : 4) * (d + u),
                          pixelRatio: w,
                        };
                      }),
                      (t.readSliceType = function () {
                        return this.readUByte(), this.readUEG(), this.readUEG();
                      }),
                      e
                    );
                  })(),
                  E = (function () {
                    function e(e, t, r, i) {
                      (this.decryptdata = r),
                        (this.discardEPB = i),
                        (this.decrypter = new n.default(e, t, {
                          removePKCS7Padding: !1,
                        }));
                    }
                    var t = e.prototype;
                    return (
                      (t.decryptBuffer = function (e, t) {
                        this.decrypter.decrypt(
                          e,
                          this.decryptdata.key.buffer,
                          this.decryptdata.iv.buffer,
                          t
                        );
                      }),
                      (t.decryptAacSample = function (e, t, r, i) {
                        var a = e[t].unit,
                          n = a.subarray(16, a.length - (a.length % 16)),
                          o = n.buffer.slice(
                            n.byteOffset,
                            n.byteOffset + n.length
                          ),
                          s = this;
                        this.decryptBuffer(o, function (n) {
                          (n = new Uint8Array(n)),
                            a.set(n, 16),
                            i || s.decryptAacSamples(e, t + 1, r);
                        });
                      }),
                      (t.decryptAacSamples = function (e, t, r) {
                        for (; ; t++) {
                          if (t >= e.length) return void r();
                          if (!(e[t].unit.length < 32)) {
                            var i = this.decrypter.isSync();
                            if ((this.decryptAacSample(e, t, r, i), !i)) return;
                          }
                        }
                      }),
                      (t.getAvcEncryptedData = function (e) {
                        for (
                          var t = 16 * Math.floor((e.length - 48) / 160) + 16,
                            r = new Int8Array(t),
                            i = 0,
                            a = 32;
                          a <= e.length - 16;
                          a += 160, i += 16
                        )
                          r.set(e.subarray(a, a + 16), i);
                        return r;
                      }),
                      (t.getAvcDecryptedUnit = function (e, t) {
                        t = new Uint8Array(t);
                        for (
                          var r = 0, i = 32;
                          i <= e.length - 16;
                          i += 160, r += 16
                        )
                          e.set(t.subarray(r, r + 16), i);
                        return e;
                      }),
                      (t.decryptAvcSample = function (e, t, r, i, a, n) {
                        var o = this.discardEPB(a.data),
                          s = this.getAvcEncryptedData(o),
                          l = this;
                        this.decryptBuffer(s.buffer, function (s) {
                          (a.data = l.getAvcDecryptedUnit(o, s)),
                            n || l.decryptAvcSamples(e, t, r + 1, i);
                        });
                      }),
                      (t.decryptAvcSamples = function (e, t, r, i) {
                        for (; ; t++, r = 0) {
                          if (t >= e.length) return void i();
                          for (var a = e[t].units; !(r >= a.length); r++) {
                            var n = a[r];
                            if (
                              !(
                                n.data.length <= 48 ||
                                (1 !== n.type && 5 !== n.type)
                              )
                            ) {
                              var o = this.decrypter.isSync();
                              if ((this.decryptAvcSample(e, t, r, i, n, o), !o))
                                return;
                            }
                          }
                        }
                      }),
                      e
                    );
                  })(),
                  S = {
                    video: 1,
                    audio: 2,
                    id3: 3,
                    text: 4,
                  },
                  k = (function () {
                    function e(e, t, r, i) {
                      (this.observer = e),
                        (this.config = r),
                        (this.typeSupported = i),
                        (this.remuxer = t),
                        (this.sampleAes = null),
                        (this.pmtUnknownTypes = {});
                    }
                    var t = e.prototype;
                    return (
                      (t.setDecryptData = function (e) {
                        null != e && null != e.key && "SAMPLE-AES" === e.method
                          ? (this.sampleAes = new E(
                              this.observer,
                              this.config,
                              e,
                              this.discardEPB
                            ))
                          : (this.sampleAes = null);
                      }),
                      (e.probe = function (t) {
                        var r = e._syncOffset(t);
                        return !(
                          r < 0 ||
                          (r &&
                            s.logger.warn(
                              "MPEG2-TS detected but first sync word found @ offset " +
                                r +
                                ", junk ahead ?"
                            ),
                          0)
                        );
                      }),
                      (e._syncOffset = function (e) {
                        for (
                          var t = Math.min(1e3, e.length - 564), r = 0;
                          r < t;

                        ) {
                          if (
                            71 === e[r] &&
                            71 === e[r + 188] &&
                            71 === e[r + 376]
                          )
                            return r;
                          r++;
                        }
                        return -1;
                      }),
                      (e.createTrack = function (e, t) {
                        return {
                          container:
                            "video" === e || "audio" === e
                              ? "video/mp2t"
                              : void 0,
                          type: e,
                          id: S[e],
                          pid: -1,
                          inputTimeScale: 9e4,
                          sequenceNumber: 0,
                          samples: [],
                          dropped: "video" === e ? 0 : void 0,
                          isAAC: "audio" === e || void 0,
                          duration: "audio" === e ? t : void 0,
                        };
                      }),
                      (t.resetInitSegment = function (t, r, i, a) {
                        (this.pmtParsed = !1),
                          (this._pmtId = -1),
                          (this.pmtUnknownTypes = {}),
                          (this._avcTrack = e.createTrack("video", a)),
                          (this._audioTrack = e.createTrack("audio", a)),
                          (this._id3Track = e.createTrack("id3", a)),
                          (this._txtTrack = e.createTrack("text", a)),
                          (this.aacOverFlow = null),
                          (this.aacLastPTS = null),
                          (this.avcSample = null),
                          (this.audioCodec = r),
                          (this.videoCodec = i),
                          (this._duration = a);
                      }),
                      (t.resetTimeStamp = function () {}),
                      (t.append = function (t, r, n, o) {
                        var l,
                          d,
                          u,
                          c,
                          h,
                          f = t.length,
                          p = !1;
                        (this.pmtUnknownTypes = {}), (this.contiguous = n);
                        var g = this.pmtParsed,
                          v = this._avcTrack,
                          y = this._audioTrack,
                          m = this._id3Track,
                          b = v.pid,
                          _ = y.pid,
                          w = m.pid,
                          T = this._pmtId,
                          E = v.pesData,
                          S = y.pesData,
                          k = m.pesData,
                          x = this._parsePAT,
                          A = this._parsePMT.bind(this),
                          R = this._parsePES,
                          L = this._parseAVCPES.bind(this),
                          D = this._parseAACPES.bind(this),
                          C = this._parseMPEGPES.bind(this),
                          O = this._parseID3PES.bind(this),
                          I = e._syncOffset(t);
                        for (f -= (f + I) % 188, l = I; l < f; l += 188)
                          if (71 === t[l]) {
                            if (
                              ((d = !!(64 & t[l + 1])),
                              (u = ((31 & t[l + 1]) << 8) + t[l + 2]),
                              (48 & t[l + 3]) >> 4 > 1)
                            ) {
                              if ((c = l + 5 + t[l + 4]) === l + 188) continue;
                            } else c = l + 4;
                            switch (u) {
                              case b:
                                d &&
                                  (E && (h = R(E)) && L(h, !1),
                                  (E = {
                                    data: [],
                                    size: 0,
                                  })),
                                  E &&
                                    (E.data.push(t.subarray(c, l + 188)),
                                    (E.size += l + 188 - c));
                                break;
                              case _:
                                d &&
                                  (S && (h = R(S)) && (y.isAAC ? D(h) : C(h)),
                                  (S = {
                                    data: [],
                                    size: 0,
                                  })),
                                  S &&
                                    (S.data.push(t.subarray(c, l + 188)),
                                    (S.size += l + 188 - c));
                                break;
                              case w:
                                d &&
                                  (k && (h = R(k)) && O(h),
                                  (k = {
                                    data: [],
                                    size: 0,
                                  })),
                                  k &&
                                    (k.data.push(t.subarray(c, l + 188)),
                                    (k.size += l + 188 - c));
                                break;
                              case 0:
                                d && (c += t[c] + 1),
                                  (T = this._pmtId = x(t, c));
                                break;
                              case T:
                                d && (c += t[c] + 1);
                                var P = A(
                                  t,
                                  c,
                                  !0 === this.typeSupported.mpeg ||
                                    !0 === this.typeSupported.mp3,
                                  null != this.sampleAes
                                );
                                (b = P.avc) > 0 && (v.pid = b),
                                  (_ = P.audio) > 0 &&
                                    ((y.pid = _), (y.isAAC = P.isAAC)),
                                  (w = P.id3) > 0 && (m.pid = w),
                                  p &&
                                    !g &&
                                    (s.logger.log("reparse from beginning"),
                                    (p = !1),
                                    (l = I - 188)),
                                  (g = this.pmtParsed = !0);
                                break;
                              case 17:
                              case 8191:
                                break;
                              default:
                                p = !0;
                            }
                          } else
                            this.observer.trigger(i.default.ERROR, {
                              type: a.ErrorTypes.MEDIA_ERROR,
                              details: a.ErrorDetails.FRAG_PARSING_ERROR,
                              fatal: !1,
                              reason: "TS packet did not start with 0x47",
                            });
                        E && (h = R(E))
                          ? (L(h, !0), (v.pesData = null))
                          : (v.pesData = E),
                          S && (h = R(S))
                            ? (y.isAAC ? D(h) : C(h), (y.pesData = null))
                            : (S &&
                                S.size &&
                                s.logger.log(
                                  "last AAC PES packet truncated,might overlap between fragments"
                                ),
                              (y.pesData = S)),
                          k && (h = R(k))
                            ? (O(h), (m.pesData = null))
                            : (m.pesData = k),
                          null == this.sampleAes
                            ? this.remuxer.remux(
                                y,
                                v,
                                m,
                                this._txtTrack,
                                r,
                                n,
                                o
                              )
                            : this.decryptAndRemux(
                                y,
                                v,
                                m,
                                this._txtTrack,
                                r,
                                n,
                                o
                              );
                      }),
                      (t.decryptAndRemux = function (e, t, r, i, a, n, o) {
                        if (e.samples && e.isAAC) {
                          var s = this;
                          this.sampleAes.decryptAacSamples(
                            e.samples,
                            0,
                            function () {
                              s.decryptAndRemuxAvc(e, t, r, i, a, n, o);
                            }
                          );
                        } else this.decryptAndRemuxAvc(e, t, r, i, a, n, o);
                      }),
                      (t.decryptAndRemuxAvc = function (e, t, r, i, a, n, o) {
                        if (t.samples) {
                          var s = this;
                          this.sampleAes.decryptAvcSamples(
                            t.samples,
                            0,
                            0,
                            function () {
                              s.remuxer.remux(e, t, r, i, a, n, o);
                            }
                          );
                        } else this.remuxer.remux(e, t, r, i, a, n, o);
                      }),
                      (t.destroy = function () {
                        (this._initPTS = this._initDTS = void 0),
                          (this._duration = 0);
                      }),
                      (t._parsePAT = function (e, t) {
                        return ((31 & e[t + 10]) << 8) | e[t + 11];
                      }),
                      (t._trackUnknownPmt = function (e, t, r) {
                        var i = this.pmtUnknownTypes[e] || 0;
                        return (
                          0 === i &&
                            ((this.pmtUnknownTypes[e] = 0),
                            t.call(s.logger, r)),
                          this.pmtUnknownTypes[e]++,
                          i
                        );
                      }),
                      (t._parsePMT = function (e, t, r, i) {
                        var a,
                          n,
                          o = {
                            audio: -1,
                            avc: -1,
                            id3: -1,
                            isAAC: !0,
                          };
                        for (
                          a = t + 3 + (((15 & e[t + 1]) << 8) | e[t + 2]) - 4,
                            t += 12 + (((15 & e[t + 10]) << 8) | e[t + 11]);
                          t < a;

                        ) {
                          switch (
                            ((n = ((31 & e[t + 1]) << 8) | e[t + 2]), e[t])
                          ) {
                            case 207:
                              if (!i) {
                                this._trackUnknownPmt(
                                  e[t],
                                  s.logger.warn,
                                  "ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream"
                                );
                                break;
                              }
                            case 15:
                              -1 === o.audio && (o.audio = n);
                              break;
                            case 21:
                              -1 === o.id3 && (o.id3 = n);
                              break;
                            case 219:
                              if (!i) {
                                this._trackUnknownPmt(
                                  e[t],
                                  s.logger.warn,
                                  "H.264 with AES-128-CBC slice encryption found in unencrypted stream"
                                );
                                break;
                              }
                            case 27:
                              -1 === o.avc && (o.avc = n);
                              break;
                            case 3:
                            case 4:
                              r
                                ? -1 === o.audio &&
                                  ((o.audio = n), (o.isAAC = !1))
                                : this._trackUnknownPmt(
                                    e[t],
                                    s.logger.warn,
                                    "MPEG audio found, not supported in this browser"
                                  );
                              break;
                            case 36:
                              this._trackUnknownPmt(
                                e[t],
                                s.logger.warn,
                                "Unsupported HEVC stream type found"
                              );
                              break;
                            default:
                              this._trackUnknownPmt(
                                e[t],
                                s.logger.log,
                                "Unknown stream type:" + e[t]
                              );
                          }
                          t += 5 + (((15 & e[t + 3]) << 8) | e[t + 4]);
                        }
                        return o;
                      }),
                      (t._parsePES = function (e) {
                        var t,
                          r,
                          i,
                          a,
                          n,
                          o,
                          l,
                          d,
                          u = 0,
                          c = e.data;
                        if (!e || 0 === e.size) return null;
                        for (; c[0].length < 19 && c.length > 1; ) {
                          var h = new Uint8Array(c[0].length + c[1].length);
                          h.set(c[0]),
                            h.set(c[1], c[0].length),
                            (c[0] = h),
                            c.splice(1, 1);
                        }
                        if (1 === ((t = c[0])[0] << 16) + (t[1] << 8) + t[2]) {
                          if ((i = (t[4] << 8) + t[5]) && i > e.size - 6)
                            return null;
                          if (
                            (192 & (r = t[7]) &&
                              ((o =
                                536870912 * (14 & t[9]) +
                                4194304 * (255 & t[10]) +
                                16384 * (254 & t[11]) +
                                128 * (255 & t[12]) +
                                (254 & t[13]) / 2),
                              64 & r
                                ? o -
                                    (l =
                                      536870912 * (14 & t[14]) +
                                      4194304 * (255 & t[15]) +
                                      16384 * (254 & t[16]) +
                                      128 * (255 & t[17]) +
                                      (254 & t[18]) / 2) >
                                    54e5 &&
                                  (s.logger.warn(
                                    Math.round((o - l) / 9e4) +
                                      "s delta between PTS and DTS, align them"
                                  ),
                                  (o = l))
                                : (l = o)),
                            (d = (a = t[8]) + 9),
                            e.size <= d)
                          )
                            return null;
                          (e.size -= d), (n = new Uint8Array(e.size));
                          for (var f = 0, p = c.length; f < p; f++) {
                            var g = (t = c[f]).byteLength;
                            if (d) {
                              if (d > g) {
                                d -= g;
                                continue;
                              }
                              (t = t.subarray(d)), (g -= d), (d = 0);
                            }
                            n.set(t, u), (u += g);
                          }
                          return (
                            i && (i -= a + 3),
                            {
                              data: n,
                              pts: o,
                              dts: l,
                              len: i,
                            }
                          );
                        }
                        return null;
                      }),
                      (t.pushAccesUnit = function (e, t) {
                        if (e.units.length && e.frame) {
                          var r = t.samples,
                            i = r.length;
                          if (isNaN(e.pts)) {
                            if (!i) return void t.dropped++;
                            var a = r[i - 1];
                            (e.pts = a.pts), (e.dts = a.dts);
                          }
                          !this.config.forceKeyFrameOnDiscontinuity ||
                          !0 === e.key ||
                          (t.sps && (i || this.contiguous))
                            ? ((e.id = i), r.push(e))
                            : t.dropped++;
                        }
                        e.debug.length &&
                          s.logger.log(e.pts + "/" + e.dts + ":" + e.debug);
                      }),
                      (t._parseAVCPES = function (e, t) {
                        var r,
                          i,
                          a,
                          n = this,
                          o = this._avcTrack,
                          s = this._parseAVCNALu(e.data),
                          l = this.avcSample,
                          d = !1,
                          u = this.pushAccesUnit.bind(this),
                          c = function (e, t, r, i) {
                            return {
                              key: e,
                              pts: t,
                              dts: r,
                              units: [],
                              debug: i,
                            };
                          };
                        (e.data = null),
                          l &&
                            s.length &&
                            !o.audFound &&
                            (u(l, o),
                            (l = this.avcSample = c(!1, e.pts, e.dts, ""))),
                          s.forEach(function (t) {
                            switch (t.type) {
                              case 1:
                                (i = !0),
                                  l ||
                                    (l = n.avcSample = c(!0, e.pts, e.dts, "")),
                                  (l.frame = !0);
                                var s = t.data;
                                if (d && s.length > 4) {
                                  var h = new T(s).readSliceType();
                                  (2 !== h && 4 !== h && 7 !== h && 9 !== h) ||
                                    (l.key = !0);
                                }
                                break;
                              case 5:
                                (i = !0),
                                  l ||
                                    (l = n.avcSample = c(!0, e.pts, e.dts, "")),
                                  (l.key = !0),
                                  (l.frame = !0);
                                break;
                              case 6:
                                (i = !0),
                                  (r = new T(n.discardEPB(t.data))).readUByte();
                                for (
                                  var f = 0, p = 0, g = !1, v = 0;
                                  !g && r.bytesAvailable > 1;

                                ) {
                                  f = 0;
                                  do {
                                    f += v = r.readUByte();
                                  } while (255 === v);
                                  p = 0;
                                  do {
                                    p += v = r.readUByte();
                                  } while (255 === v);
                                  if (4 === f && 0 !== r.bytesAvailable) {
                                    if (
                                      ((g = !0),
                                      181 === r.readUByte() &&
                                        49 === r.readUShort() &&
                                        1195456820 === r.readUInt() &&
                                        3 === r.readUByte())
                                    ) {
                                      var m = r.readUByte(),
                                        b = 31 & m,
                                        _ = [m, r.readUByte()];
                                      for (a = 0; a < b; a++)
                                        _.push(r.readUByte()),
                                          _.push(r.readUByte()),
                                          _.push(r.readUByte());
                                      n._insertSampleInOrder(
                                        n._txtTrack.samples,
                                        {
                                          type: 3,
                                          pts: e.pts,
                                          bytes: _,
                                        }
                                      );
                                    }
                                  } else if (
                                    5 === f &&
                                    0 !== r.bytesAvailable
                                  ) {
                                    if (((g = !0), p > 16)) {
                                      var w = [];
                                      for (a = 0; a < 16; a++)
                                        w.push(r.readUByte().toString(16)),
                                          (3 !== a &&
                                            5 !== a &&
                                            7 !== a &&
                                            9 !== a) ||
                                            w.push("-");
                                      var E = p - 16,
                                        S = new Uint8Array(E);
                                      for (a = 0; a < E; a++)
                                        S[a] = r.readUByte();
                                      n._insertSampleInOrder(
                                        n._txtTrack.samples,
                                        {
                                          pts: e.pts,
                                          payloadType: f,
                                          uuid: w.join(""),
                                          userDataBytes: S,
                                          userData: Object(y.utf8ArrayToStr)(
                                            S.buffer
                                          ),
                                        }
                                      );
                                    }
                                  } else if (p < r.bytesAvailable)
                                    for (a = 0; a < p; a++) r.readUByte();
                                }
                                break;
                              case 7:
                                if (((i = !0), (d = !0), !o.sps)) {
                                  var k = (r = new T(t.data)).readSPS();
                                  (o.width = k.width),
                                    (o.height = k.height),
                                    (o.pixelRatio = k.pixelRatio),
                                    (o.sps = [t.data]),
                                    (o.duration = n._duration);
                                  var x = t.data.subarray(1, 4),
                                    A = "avc1.";
                                  for (a = 0; a < 3; a++) {
                                    var R = x[a].toString(16);
                                    R.length < 2 && (R = "0" + R), (A += R);
                                  }
                                  o.codec = A;
                                }
                                break;
                              case 8:
                                (i = !0), o.pps || (o.pps = [t.data]);
                                break;
                              case 9:
                                (i = !1),
                                  (o.audFound = !0),
                                  l && u(l, o),
                                  (l = n.avcSample = c(!1, e.pts, e.dts, ""));
                                break;
                              case 12:
                                i = !1;
                                break;
                              default:
                                (i = !1),
                                  l &&
                                    (l.debug += "unknown NAL " + t.type + " ");
                            }
                            l && i && l.units.push(t);
                          }),
                          t && l && (u(l, o), (this.avcSample = null));
                      }),
                      (t._insertSampleInOrder = function (e, t) {
                        var r = e.length;
                        if (r > 0) {
                          if (t.pts >= e[r - 1].pts) e.push(t);
                          else
                            for (var i = r - 1; i >= 0; i--)
                              if (t.pts < e[i].pts) {
                                e.splice(i, 0, t);
                                break;
                              }
                        } else e.push(t);
                      }),
                      (t._getLastNalUnit = function () {
                        var e,
                          t = this.avcSample;
                        if (!t || 0 === t.units.length) {
                          var r = this._avcTrack.samples;
                          t = r[r.length - 1];
                        }
                        if (t) {
                          var i = t.units;
                          e = i[i.length - 1];
                        }
                        return e;
                      }),
                      (t._parseAVCNALu = function (e) {
                        var t,
                          r,
                          i,
                          a,
                          n = 0,
                          o = e.byteLength,
                          s = this._avcTrack,
                          l = s.naluState || 0,
                          d = l,
                          u = [],
                          c = -1;
                        for (
                          -1 === l &&
                          ((c = 0), (a = 31 & e[0]), (l = 0), (n = 1));
                          n < o;

                        )
                          if (((t = e[n++]), l))
                            if (1 !== l)
                              if (t)
                                if (1 === t) {
                                  if (c >= 0)
                                    (i = {
                                      data: e.subarray(c, n - l - 1),
                                      type: a,
                                    }),
                                      u.push(i);
                                  else {
                                    var h = this._getLastNalUnit();
                                    if (
                                      h &&
                                      (d &&
                                        n <= 4 - d &&
                                        h.state &&
                                        (h.data = h.data.subarray(
                                          0,
                                          h.data.byteLength - d
                                        )),
                                      (r = n - l - 1) > 0)
                                    ) {
                                      var f = new Uint8Array(
                                        h.data.byteLength + r
                                      );
                                      f.set(h.data, 0),
                                        f.set(
                                          e.subarray(0, r),
                                          h.data.byteLength
                                        ),
                                        (h.data = f);
                                    }
                                  }
                                  n < o
                                    ? ((c = n), (a = 31 & e[n]), (l = 0))
                                    : (l = -1);
                                } else l = 0;
                              else l = 3;
                            else l = t ? 0 : 2;
                          else l = t ? 0 : 1;
                        if (
                          (c >= 0 &&
                            l >= 0 &&
                            ((i = {
                              data: e.subarray(c, o),
                              type: a,
                              state: l,
                            }),
                            u.push(i)),
                          0 === u.length)
                        ) {
                          var p = this._getLastNalUnit();
                          if (p) {
                            var g = new Uint8Array(
                              p.data.byteLength + e.byteLength
                            );
                            g.set(p.data, 0),
                              g.set(e, p.data.byteLength),
                              (p.data = g);
                          }
                        }
                        return (s.naluState = l), u;
                      }),
                      (t.discardEPB = function (e) {
                        for (
                          var t, r, i = e.byteLength, a = [], n = 1;
                          n < i - 2;

                        )
                          0 === e[n] && 0 === e[n + 1] && 3 === e[n + 2]
                            ? (a.push(n + 2), (n += 2))
                            : n++;
                        if (0 === a.length) return e;
                        (t = i - a.length), (r = new Uint8Array(t));
                        var o = 0;
                        for (n = 0; n < t; o++, n++)
                          o === a[0] && (o++, a.shift()), (r[n] = e[o]);
                        return r;
                      }),
                      (t._parseAACPES = function (e) {
                        var t,
                          r,
                          n,
                          o,
                          l,
                          d,
                          u,
                          c = this._audioTrack,
                          f = e.data,
                          y = e.pts,
                          m = this.aacOverFlow,
                          b = this.aacLastPTS;
                        if (m) {
                          var _ = new Uint8Array(m.byteLength + f.byteLength);
                          _.set(m, 0), _.set(f, m.byteLength), (f = _);
                        }
                        for (n = 0, l = f.length; n < l - 1 && !h(f, n); n++);
                        if (
                          !n ||
                          (n < l - 1
                            ? ((d =
                                "AAC PES did not start with ADTS header,offset:" +
                                n),
                              (u = !1))
                            : ((d = "no ADTS header found in AAC PES"),
                              (u = !0)),
                          s.logger.warn("parsing error:" + d),
                          this.observer.trigger(i.default.ERROR, {
                            type: a.ErrorTypes.MEDIA_ERROR,
                            details: a.ErrorDetails.FRAG_PARSING_ERROR,
                            fatal: u,
                            reason: d,
                          }),
                          !u)
                        ) {
                          if (
                            (p(c, this.observer, f, n, this.audioCodec),
                            (r = 0),
                            (t = g(c.samplerate)),
                            m && b)
                          ) {
                            var w = b + t;
                            Math.abs(w - y) > 1 &&
                              (s.logger.log(
                                "AAC: align PTS for overlapping frames by " +
                                  Math.round((w - y) / 90)
                              ),
                              (y = w));
                          }
                          for (; n < l; ) {
                            if (h(f, n)) {
                              if (n + 5 < l) {
                                var T = v(c, f, n, y, r);
                                if (T) {
                                  (n += T.length), (o = T.sample.pts), r++;
                                  continue;
                                }
                              }
                              break;
                            }
                            n++;
                          }
                          (m = n < l ? f.subarray(n, l) : null),
                            (this.aacOverFlow = m),
                            (this.aacLastPTS = o);
                        }
                      }),
                      (t._parseMPEGPES = function (e) {
                        for (
                          var t = e.data, r = t.length, i = 0, a = 0, n = e.pts;
                          a < r;

                        )
                          if (w.isHeader(t, a)) {
                            var o = w.appendFrame(this._audioTrack, t, a, n, i);
                            if (!o) break;
                            (a += o.length), i++;
                          } else a++;
                      }),
                      (t._parseID3PES = function (e) {
                        this._id3Track.samples.push(e);
                      }),
                      e
                    );
                  })(),
                  x = (function () {
                    function e(e, t, r) {
                      (this.observer = e),
                        (this.config = r),
                        (this.remuxer = t);
                    }
                    var t = e.prototype;
                    return (
                      (t.resetInitSegment = function (e, t, r, i) {
                        this._audioTrack = {
                          container: "audio/mpeg",
                          type: "audio",
                          id: -1,
                          sequenceNumber: 0,
                          isAAC: !1,
                          samples: [],
                          len: 0,
                          manifestCodec: t,
                          duration: i,
                          inputTimeScale: 9e4,
                        };
                      }),
                      (t.resetTimeStamp = function () {}),
                      (e.probe = function (e) {
                        var t,
                          r,
                          i = y.default.getID3Data(e, 0);
                        if (i && void 0 !== y.default.getTimeStamp(i))
                          for (
                            t = i.length, r = Math.min(e.length - 1, t + 100);
                            t < r;
                            t++
                          )
                            if (w.probe(e, t))
                              return (
                                s.logger.log("MPEG Audio sync word found !"), !0
                              );
                        return !1;
                      }),
                      (t.append = function (e, t, r, i) {
                        for (
                          var a = y.default.getID3Data(e, 0) || [],
                            n = y.default.getTimeStamp(a),
                            o = void 0 !== n ? 90 * n : 9e4 * t,
                            s = a.length,
                            l = e.length,
                            d = 0,
                            u = 0,
                            c = this._audioTrack,
                            h = [
                              {
                                pts: o,
                                dts: o,
                                data: a,
                              },
                            ];
                          s < l;

                        )
                          if (w.isHeader(e, s)) {
                            var f = w.appendFrame(c, e, s, o, d);
                            if (!f) break;
                            (s += f.length), (u = f.sample.pts), d++;
                          } else
                            y.default.isHeader(e, s)
                              ? ((a = y.default.getID3Data(e, s)),
                                h.push({
                                  pts: u,
                                  dts: u,
                                  data: a,
                                }),
                                (s += a.length))
                              : s++;
                        this.remuxer.remux(
                          c,
                          {
                            samples: [],
                          },
                          {
                            samples: h,
                            inputTimeScale: 9e4,
                          },
                          {
                            samples: [],
                          },
                          t,
                          r,
                          i
                        );
                      }),
                      (t.destroy = function () {}),
                      e
                    );
                  })(),
                  A = (function () {
                    function e() {}
                    return (
                      (e.getSilentFrame = function (e, t) {
                        switch (e) {
                          case "mp4a.40.2":
                            if (1 === t)
                              return new Uint8Array([0, 200, 0, 128, 35, 128]);
                            if (2 === t)
                              return new Uint8Array([
                                33, 0, 73, 144, 2, 25, 0, 35, 128,
                              ]);
                            if (3 === t)
                              return new Uint8Array([
                                0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0,
                                142,
                              ]);
                            if (4 === t)
                              return new Uint8Array([
                                0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0,
                                128, 44, 128, 8, 2, 56,
                              ]);
                            if (5 === t)
                              return new Uint8Array([
                                0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0,
                                130, 48, 4, 153, 0, 33, 144, 2, 56,
                              ]);
                            if (6 === t)
                              return new Uint8Array([
                                0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0,
                                130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32,
                                8, 224,
                              ]);
                            break;
                          default:
                            if (1 === t)
                              return new Uint8Array([
                                1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0,
                                0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94,
                              ]);
                            if (2 === t)
                              return new Uint8Array([
                                1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0,
                                0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94,
                              ]);
                            if (3 === t)
                              return new Uint8Array([
                                1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0,
                                0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94,
                              ]);
                        }
                        return null;
                      }),
                      e
                    );
                  })(),
                  R = Math.pow(2, 32) - 1,
                  L = (function () {
                    function e() {}
                    return (
                      (e.init = function () {
                        var t;
                        for (t in ((e.types = {
                          avc1: [],
                          avcC: [],
                          btrt: [],
                          dinf: [],
                          dref: [],
                          esds: [],
                          ftyp: [],
                          hdlr: [],
                          mdat: [],
                          mdhd: [],
                          mdia: [],
                          mfhd: [],
                          minf: [],
                          moof: [],
                          moov: [],
                          mp4a: [],
                          ".mp3": [],
                          mvex: [],
                          mvhd: [],
                          pasp: [],
                          sdtp: [],
                          stbl: [],
                          stco: [],
                          stsc: [],
                          stsd: [],
                          stsz: [],
                          stts: [],
                          tfdt: [],
                          tfhd: [],
                          traf: [],
                          trak: [],
                          trun: [],
                          trex: [],
                          tkhd: [],
                          vmhd: [],
                          smhd: [],
                        }),
                        e.types))
                          e.types.hasOwnProperty(t) &&
                            (e.types[t] = [
                              t.charCodeAt(0),
                              t.charCodeAt(1),
                              t.charCodeAt(2),
                              t.charCodeAt(3),
                            ]);
                        var r = new Uint8Array([
                            0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111,
                            72, 97, 110, 100, 108, 101, 114, 0,
                          ]),
                          i = new Uint8Array([
                            0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100,
                            72, 97, 110, 100, 108, 101, 114, 0,
                          ]);
                        e.HDLR_TYPES = {
                          video: r,
                          audio: i,
                        };
                        var a = new Uint8Array([
                            0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108,
                            32, 0, 0, 0, 1,
                          ]),
                          n = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                        (e.STTS = e.STSC = e.STCO = n),
                          (e.STSZ = new Uint8Array([
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          ])),
                          (e.VMHD = new Uint8Array([
                            0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                          ])),
                          (e.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])),
                          (e.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]));
                        var o = new Uint8Array([105, 115, 111, 109]),
                          s = new Uint8Array([97, 118, 99, 49]),
                          l = new Uint8Array([0, 0, 0, 1]);
                        (e.FTYP = e.box(e.types.ftyp, o, l, o, s)),
                          (e.DINF = e.box(
                            e.types.dinf,
                            e.box(e.types.dref, a)
                          ));
                      }),
                      (e.box = function (e) {
                        for (
                          var t,
                            r = Array.prototype.slice.call(arguments, 1),
                            i = 8,
                            a = r.length,
                            n = a;
                          a--;

                        )
                          i += r[a].byteLength;
                        for (
                          (t = new Uint8Array(i))[0] = (i >> 24) & 255,
                            t[1] = (i >> 16) & 255,
                            t[2] = (i >> 8) & 255,
                            t[3] = 255 & i,
                            t.set(e, 4),
                            a = 0,
                            i = 8;
                          a < n;
                          a++
                        )
                          t.set(r[a], i), (i += r[a].byteLength);
                        return t;
                      }),
                      (e.hdlr = function (t) {
                        return e.box(e.types.hdlr, e.HDLR_TYPES[t]);
                      }),
                      (e.mdat = function (t) {
                        return e.box(e.types.mdat, t);
                      }),
                      (e.mdhd = function (t, r) {
                        r *= t;
                        var i = Math.floor(r / (R + 1)),
                          a = Math.floor(r % (R + 1));
                        return e.box(
                          e.types.mdhd,
                          new Uint8Array([
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            2,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            3,
                            (t >> 24) & 255,
                            (t >> 16) & 255,
                            (t >> 8) & 255,
                            255 & t,
                            i >> 24,
                            (i >> 16) & 255,
                            (i >> 8) & 255,
                            255 & i,
                            a >> 24,
                            (a >> 16) & 255,
                            (a >> 8) & 255,
                            255 & a,
                            85,
                            196,
                            0,
                            0,
                          ])
                        );
                      }),
                      (e.mdia = function (t) {
                        return e.box(
                          e.types.mdia,
                          e.mdhd(t.timescale, t.duration),
                          e.hdlr(t.type),
                          e.minf(t)
                        );
                      }),
                      (e.mfhd = function (t) {
                        return e.box(
                          e.types.mfhd,
                          new Uint8Array([
                            0,
                            0,
                            0,
                            0,
                            t >> 24,
                            (t >> 16) & 255,
                            (t >> 8) & 255,
                            255 & t,
                          ])
                        );
                      }),
                      (e.minf = function (t) {
                        return "audio" === t.type
                          ? e.box(
                              e.types.minf,
                              e.box(e.types.smhd, e.SMHD),
                              e.DINF,
                              e.stbl(t)
                            )
                          : e.box(
                              e.types.minf,
                              e.box(e.types.vmhd, e.VMHD),
                              e.DINF,
                              e.stbl(t)
                            );
                      }),
                      (e.moof = function (t, r, i) {
                        return e.box(e.types.moof, e.mfhd(t), e.traf(i, r));
                      }),
                      (e.moov = function (t) {
                        for (var r = t.length, i = []; r--; )
                          i[r] = e.trak(t[r]);
                        return e.box.apply(
                          null,
                          [e.types.moov, e.mvhd(t[0].timescale, t[0].duration)]
                            .concat(i)
                            .concat(e.mvex(t))
                        );
                      }),
                      (e.mvex = function (t) {
                        for (var r = t.length, i = []; r--; )
                          i[r] = e.trex(t[r]);
                        return e.box.apply(null, [e.types.mvex].concat(i));
                      }),
                      (e.mvhd = function (t, r) {
                        r *= t;
                        var i = Math.floor(r / (R + 1)),
                          a = Math.floor(r % (R + 1)),
                          n = new Uint8Array([
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            2,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            3,
                            (t >> 24) & 255,
                            (t >> 16) & 255,
                            (t >> 8) & 255,
                            255 & t,
                            i >> 24,
                            (i >> 16) & 255,
                            (i >> 8) & 255,
                            255 & i,
                            a >> 24,
                            (a >> 16) & 255,
                            (a >> 8) & 255,
                            255 & a,
                            0,
                            1,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            64,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            255,
                            255,
                            255,
                            255,
                          ]);
                        return e.box(e.types.mvhd, n);
                      }),
                      (e.sdtp = function (t) {
                        var r,
                          i,
                          a = t.samples || [],
                          n = new Uint8Array(4 + a.length);
                        for (i = 0; i < a.length; i++)
                          (r = a[i].flags),
                            (n[i + 4] =
                              (r.dependsOn << 4) |
                              (r.isDependedOn << 2) |
                              r.hasRedundancy);
                        return e.box(e.types.sdtp, n);
                      }),
                      (e.stbl = function (t) {
                        return e.box(
                          e.types.stbl,
                          e.stsd(t),
                          e.box(e.types.stts, e.STTS),
                          e.box(e.types.stsc, e.STSC),
                          e.box(e.types.stsz, e.STSZ),
                          e.box(e.types.stco, e.STCO)
                        );
                      }),
                      (e.avc1 = function (t) {
                        var r,
                          i,
                          a,
                          n = [],
                          o = [];
                        for (r = 0; r < t.sps.length; r++)
                          (a = (i = t.sps[r]).byteLength),
                            n.push((a >>> 8) & 255),
                            n.push(255 & a),
                            (n = n.concat(Array.prototype.slice.call(i)));
                        for (r = 0; r < t.pps.length; r++)
                          (a = (i = t.pps[r]).byteLength),
                            o.push((a >>> 8) & 255),
                            o.push(255 & a),
                            (o = o.concat(Array.prototype.slice.call(i)));
                        var s = e.box(
                            e.types.avcC,
                            new Uint8Array(
                              [1, n[3], n[4], n[5], 255, 224 | t.sps.length]
                                .concat(n)
                                .concat([t.pps.length])
                                .concat(o)
                            )
                          ),
                          l = t.width,
                          d = t.height,
                          u = t.pixelRatio[0],
                          c = t.pixelRatio[1];
                        return e.box(
                          e.types.avc1,
                          new Uint8Array([
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            (l >> 8) & 255,
                            255 & l,
                            (d >> 8) & 255,
                            255 & d,
                            0,
                            72,
                            0,
                            0,
                            0,
                            72,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            18,
                            100,
                            97,
                            105,
                            108,
                            121,
                            109,
                            111,
                            116,
                            105,
                            111,
                            110,
                            47,
                            104,
                            108,
                            115,
                            46,
                            106,
                            115,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            24,
                            17,
                            17,
                          ]),
                          s,
                          e.box(
                            e.types.btrt,
                            new Uint8Array([
                              0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192,
                            ])
                          ),
                          e.box(
                            e.types.pasp,
                            new Uint8Array([
                              u >> 24,
                              (u >> 16) & 255,
                              (u >> 8) & 255,
                              255 & u,
                              c >> 24,
                              (c >> 16) & 255,
                              (c >> 8) & 255,
                              255 & c,
                            ])
                          )
                        );
                      }),
                      (e.esds = function (e) {
                        var t = e.config.length;
                        return new Uint8Array(
                          [
                            0,
                            0,
                            0,
                            0,
                            3,
                            23 + t,
                            0,
                            1,
                            0,
                            4,
                            15 + t,
                            64,
                            21,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            5,
                          ]
                            .concat([t])
                            .concat(e.config)
                            .concat([6, 1, 2])
                        );
                      }),
                      (e.mp4a = function (t) {
                        var r = t.samplerate;
                        return e.box(
                          e.types.mp4a,
                          new Uint8Array([
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            t.channelCount,
                            0,
                            16,
                            0,
                            0,
                            0,
                            0,
                            (r >> 8) & 255,
                            255 & r,
                            0,
                            0,
                          ]),
                          e.box(e.types.esds, e.esds(t))
                        );
                      }),
                      (e.mp3 = function (t) {
                        var r = t.samplerate;
                        return e.box(
                          e.types[".mp3"],
                          new Uint8Array([
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            t.channelCount,
                            0,
                            16,
                            0,
                            0,
                            0,
                            0,
                            (r >> 8) & 255,
                            255 & r,
                            0,
                            0,
                          ])
                        );
                      }),
                      (e.stsd = function (t) {
                        return "audio" === t.type
                          ? t.isAAC || "mp3" !== t.codec
                            ? e.box(e.types.stsd, e.STSD, e.mp4a(t))
                            : e.box(e.types.stsd, e.STSD, e.mp3(t))
                          : e.box(e.types.stsd, e.STSD, e.avc1(t));
                      }),
                      (e.tkhd = function (t) {
                        var r = t.id,
                          i = t.duration * t.timescale,
                          a = t.width,
                          n = t.height,
                          o = Math.floor(i / (R + 1)),
                          s = Math.floor(i % (R + 1));
                        return e.box(
                          e.types.tkhd,
                          new Uint8Array([
                            1,
                            0,
                            0,
                            7,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            2,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            3,
                            (r >> 24) & 255,
                            (r >> 16) & 255,
                            (r >> 8) & 255,
                            255 & r,
                            0,
                            0,
                            0,
                            0,
                            o >> 24,
                            (o >> 16) & 255,
                            (o >> 8) & 255,
                            255 & o,
                            s >> 24,
                            (s >> 16) & 255,
                            (s >> 8) & 255,
                            255 & s,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            64,
                            0,
                            0,
                            0,
                            (a >> 8) & 255,
                            255 & a,
                            0,
                            0,
                            (n >> 8) & 255,
                            255 & n,
                            0,
                            0,
                          ])
                        );
                      }),
                      (e.traf = function (t, r) {
                        var i = e.sdtp(t),
                          a = t.id,
                          n = Math.floor(r / (R + 1)),
                          o = Math.floor(r % (R + 1));
                        return e.box(
                          e.types.traf,
                          e.box(
                            e.types.tfhd,
                            new Uint8Array([
                              0,
                              0,
                              0,
                              0,
                              a >> 24,
                              (a >> 16) & 255,
                              (a >> 8) & 255,
                              255 & a,
                            ])
                          ),
                          e.box(
                            e.types.tfdt,
                            new Uint8Array([
                              1,
                              0,
                              0,
                              0,
                              n >> 24,
                              (n >> 16) & 255,
                              (n >> 8) & 255,
                              255 & n,
                              o >> 24,
                              (o >> 16) & 255,
                              (o >> 8) & 255,
                              255 & o,
                            ])
                          ),
                          e.trun(t, i.length + 16 + 20 + 8 + 16 + 8 + 8),
                          i
                        );
                      }),
                      (e.trak = function (t) {
                        return (
                          (t.duration = t.duration || 4294967295),
                          e.box(e.types.trak, e.tkhd(t), e.mdia(t))
                        );
                      }),
                      (e.trex = function (t) {
                        var r = t.id;
                        return e.box(
                          e.types.trex,
                          new Uint8Array([
                            0,
                            0,
                            0,
                            0,
                            r >> 24,
                            (r >> 16) & 255,
                            (r >> 8) & 255,
                            255 & r,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            1,
                          ])
                        );
                      }),
                      (e.trun = function (t, r) {
                        var i,
                          a,
                          n,
                          o,
                          s,
                          l,
                          d = t.samples || [],
                          u = d.length,
                          c = 12 + 16 * u,
                          h = new Uint8Array(c);
                        for (
                          r += 8 + c,
                            h.set(
                              [
                                0,
                                0,
                                15,
                                1,
                                (u >>> 24) & 255,
                                (u >>> 16) & 255,
                                (u >>> 8) & 255,
                                255 & u,
                                (r >>> 24) & 255,
                                (r >>> 16) & 255,
                                (r >>> 8) & 255,
                                255 & r,
                              ],
                              0
                            ),
                            i = 0;
                          i < u;
                          i++
                        )
                          (n = (a = d[i]).duration),
                            (o = a.size),
                            (s = a.flags),
                            (l = a.cts),
                            h.set(
                              [
                                (n >>> 24) & 255,
                                (n >>> 16) & 255,
                                (n >>> 8) & 255,
                                255 & n,
                                (o >>> 24) & 255,
                                (o >>> 16) & 255,
                                (o >>> 8) & 255,
                                255 & o,
                                (s.isLeading << 2) | s.dependsOn,
                                (s.isDependedOn << 6) |
                                  (s.hasRedundancy << 4) |
                                  (s.paddingValue << 1) |
                                  s.isNonSync,
                                61440 & s.degradPrio,
                                15 & s.degradPrio,
                                (l >>> 24) & 255,
                                (l >>> 16) & 255,
                                (l >>> 8) & 255,
                                255 & l,
                              ],
                              12 + 16 * i
                            );
                        return e.box(e.types.trun, h);
                      }),
                      (e.initSegment = function (t) {
                        e.types || e.init();
                        var r,
                          i = e.moov(t);
                        return (
                          (r = new Uint8Array(
                            e.FTYP.byteLength + i.byteLength
                          )).set(e.FTYP),
                          r.set(i, e.FTYP.byteLength),
                          r
                        );
                      }),
                      e
                    );
                  })();
                function D(e, t, r, i) {
                  void 0 === r && (r = 1), void 0 === i && (i = !1);
                  var a = e * t * r;
                  return i ? Math.round(a) : a;
                }
                function C(e, t) {
                  return void 0 === t && (t = !1), D(e, 1e3, 1 / 9e4, t);
                }
                function O(e, t) {
                  return void 0 === t && (t = 1), D(e, 9e4, 1 / t);
                }
                var I = O(10),
                  P = O(0.2),
                  F = null;
                function M(e, t) {
                  var r;
                  if (void 0 === t) return e;
                  for (
                    r = t < e ? -8589934592 : 8589934592;
                    Math.abs(e - t) > 4294967296;

                  )
                    e += r;
                  return e;
                }
                var B,
                  N = (function () {
                    function e(e, t, r, i) {
                      if (
                        ((this.observer = e),
                        (this.config = t),
                        (this.typeSupported = r),
                        (this.ISGenerated = !1),
                        null === F)
                      ) {
                        var a = navigator.userAgent.match(/Chrome\/(\d+)/i);
                        F = a ? parseInt(a[1]) : 0;
                      }
                    }
                    var t = e.prototype;
                    return (
                      (t.destroy = function () {}),
                      (t.resetTimeStamp = function (e) {
                        this._initPTS = this._initDTS = e;
                      }),
                      (t.resetInitSegment = function () {
                        this.ISGenerated = !1;
                      }),
                      (t.getVideoStartPts = function (e) {
                        var t = !1,
                          r = e.reduce(function (e, r) {
                            var i = r.pts - e;
                            return i < -4294967296
                              ? ((t = !0), M(e, r.pts))
                              : i > 0
                              ? e
                              : r.pts;
                          }, e[0].pts);
                        return t && s.logger.debug("PTS rollover detected"), r;
                      }),
                      (t.remux = function (e, t, r, a, n, o, l) {
                        if (
                          (this.ISGenerated || this.generateIS(e, t, n),
                          this.ISGenerated)
                        ) {
                          var d = e.samples.length,
                            u = t.samples.length,
                            c = n,
                            h = n;
                          if (d && u) {
                            var f = this.getVideoStartPts(t.samples),
                              p =
                                (M(e.samples[0].pts, f) - f) / t.inputTimeScale;
                            (c += Math.max(0, p)), (h += Math.max(0, -p));
                          }
                          if (d) {
                            e.timescale ||
                              (s.logger.warn(
                                "regenerate InitSegment as audio detected"
                              ),
                              this.generateIS(e, t, n));
                            var g,
                              v = this.remuxAudio(e, c, o, l);
                            u &&
                              (v && (g = v.endPTS - v.startPTS),
                              t.timescale ||
                                (s.logger.warn(
                                  "regenerate InitSegment as video detected"
                                ),
                                this.generateIS(e, t, n)),
                              this.remuxVideo(t, h, o, g));
                          } else if (u) {
                            var y = this.remuxVideo(t, h, o, 0, l);
                            y && e.codec && this.remuxEmptyAudio(e, c, o, y);
                          }
                        }
                        r.samples.length && this.remuxID3(r, n),
                          a.samples.length && this.remuxText(a, n),
                          this.observer.trigger(i.default.FRAG_PARSED);
                      }),
                      (t.generateIS = function (e, t, r) {
                        var n,
                          o,
                          l = this.observer,
                          d = e.samples,
                          u = t.samples,
                          c = this.typeSupported,
                          h = "audio/mp4",
                          f = {},
                          p = {
                            tracks: f,
                          },
                          g = void 0 === this._initPTS;
                        if (
                          (g && (n = o = 1 / 0),
                          e.config &&
                            d.length &&
                            ((e.timescale = e.samplerate),
                            s.logger.log(
                              "audio sampling rate : " + e.samplerate
                            ),
                            e.isAAC ||
                              (c.mpeg
                                ? ((h = "audio/mpeg"), (e.codec = ""))
                                : c.mp3 && (e.codec = "mp3")),
                            (f.audio = {
                              container: h,
                              codec: e.codec,
                              initSegment:
                                !e.isAAC && c.mpeg
                                  ? new Uint8Array()
                                  : L.initSegment([e]),
                              metadata: {
                                channelCount: e.channelCount,
                              },
                            }),
                            g &&
                              (n = o =
                                d[0].pts - Math.round(e.inputTimeScale * r))),
                          t.sps && t.pps && u.length)
                        ) {
                          var v = t.inputTimeScale;
                          if (
                            ((t.timescale = v),
                            (f.video = {
                              container: "video/mp4",
                              codec: t.codec,
                              initSegment: L.initSegment([t]),
                              metadata: {
                                width: t.width,
                                height: t.height,
                              },
                            }),
                            g)
                          ) {
                            var y = this.getVideoStartPts(u),
                              m = Math.round(v * r);
                            (o = Math.min(o, M(u[0].dts, y) - m)),
                              (n = Math.min(n, y - m)),
                              this.observer.trigger(i.default.INIT_PTS_FOUND, {
                                initPTS: n,
                              });
                          }
                        } else
                          g &&
                            f.audio &&
                            this.observer.trigger(i.default.INIT_PTS_FOUND, {
                              initPTS: n,
                            });
                        Object.keys(f).length
                          ? (l.trigger(i.default.FRAG_PARSING_INIT_SEGMENT, p),
                            (this.ISGenerated = !0),
                            g && ((this._initPTS = n), (this._initDTS = o)))
                          : l.trigger(i.default.ERROR, {
                              type: a.ErrorTypes.MEDIA_ERROR,
                              details: a.ErrorDetails.FRAG_PARSING_ERROR,
                              fatal: !1,
                              reason: "no audio/video samples found",
                            });
                      }),
                      (t.remuxVideo = function (e, t, r, n) {
                        var o,
                          l,
                          d,
                          u,
                          c,
                          h = e.timescale,
                          f = e.samples,
                          p = [],
                          g = f.length,
                          v = this._initPTS,
                          y = 8,
                          m = Number.POSITIVE_INFINITY,
                          b = Number.NEGATIVE_INFINITY,
                          _ = 0,
                          w = !1,
                          T = this.nextAvcDts;
                        if (0 !== g) {
                          r || (T = t * h - (f[0].pts - M(f[0].dts, f[0].pts)));
                          for (var E = 0; E < g; E++) {
                            var S = f[E];
                            (S.pts = M(S.pts - v, T)),
                              (S.dts = M(S.dts - v, T)),
                              S.dts > S.pts &&
                                (_ = Math.max(
                                  Math.min(_, S.pts - S.dts),
                                  -1 * P
                                )),
                              S.dts < f[E > 0 ? E - 1 : E].dts && (w = !0);
                          }
                          w &&
                            f.sort(function (e, t) {
                              var r = e.dts - t.dts,
                                i = e.pts - t.pts;
                              return r || i || e.id - t.id;
                            }),
                            (u = f[0].dts),
                            (c = f[g - 1].dts);
                          var k = Math.round((c - u) / (g - 1));
                          if (_ < 0) {
                            if (_ < -2 * k) {
                              s.logger.warn(
                                "PTS < DTS detected in video samples, offsetting DTS from PTS by " +
                                  C(-k, !0) +
                                  " ms"
                              );
                              for (var x = _, A = 0; A < g; A++)
                                (f[A].dts = x = Math.max(x, f[A].pts - k)),
                                  (f[A].pts = Math.max(x, f[A].pts));
                            } else {
                              s.logger.warn(
                                "PTS < DTS detected in video samples, shifting DTS by " +
                                  C(_, !0) +
                                  " ms to overcome this issue"
                              );
                              for (var R = 0; R < g; R++)
                                f[R].dts = f[R].dts + _;
                            }
                            (u = f[0].dts), (c = f[g - 1].dts);
                          }
                          if (r) {
                            var D = u - T,
                              O = D > k;
                            if (O || D < -1) {
                              O
                                ? s.logger.warn(
                                    "AVC: " +
                                      C(D, !0) +
                                      " ms (" +
                                      D +
                                      "dts) hole between fragments detected, filling it"
                                  )
                                : s.logger.warn(
                                    "AVC: " +
                                      C(-D, !0) +
                                      " ms (" +
                                      D +
                                      "dts) overlapping between fragments detected"
                                  ),
                                (u = T);
                              var I = f[0].pts - D;
                              (f[0].dts = u),
                                (f[0].pts = I),
                                s.logger.log(
                                  "Video: First PTS/DTS adjusted: " +
                                    C(I, !0) +
                                    "/" +
                                    C(u, !0) +
                                    ", delta: " +
                                    C(D, !0) +
                                    " ms"
                                );
                            }
                          }
                          F && F < 75 && (u = Math.max(0, u));
                          for (var B = 0, N = 0, U = 0; U < g; U++) {
                            for (
                              var H = f[U],
                                j = H.units,
                                G = j.length,
                                z = 0,
                                Y = 0;
                              Y < G;
                              Y++
                            )
                              z += j[Y].data.length;
                            (N += z),
                              (B += G),
                              (H.length = z),
                              (H.dts = Math.max(H.dts, u)),
                              (H.pts = Math.max(H.pts, H.dts, 0)),
                              (m = Math.min(H.pts, m)),
                              (b = Math.max(H.pts, b));
                          }
                          c = f[g - 1].dts;
                          var K = N + 4 * B + 8;
                          try {
                            l = new Uint8Array(K);
                          } catch (e) {
                            return void this.observer.trigger(i.default.ERROR, {
                              type: a.ErrorTypes.MUX_ERROR,
                              details: a.ErrorDetails.REMUX_ALLOC_ERROR,
                              fatal: !1,
                              bytes: K,
                              reason: "fail allocating video mdat " + K,
                            });
                          }
                          var V = new DataView(l.buffer);
                          V.setUint32(0, K), l.set(L.types.mdat, 4);
                          for (var q = 0; q < g; q++) {
                            for (
                              var W,
                                X = f[q],
                                Q = X.units,
                                Z = 0,
                                J = 0,
                                $ = Q.length;
                              J < $;
                              J++
                            ) {
                              var ee = Q[J],
                                te = ee.data,
                                re = ee.data.byteLength;
                              V.setUint32(y, re),
                                (y += 4),
                                l.set(te, y),
                                (y += re),
                                (Z += 4 + re);
                            }
                            if (q < g - 1) o = f[q + 1].dts - X.dts;
                            else {
                              var ie = this.config,
                                ae = X.dts - f[q > 0 ? q - 1 : q].dts;
                              if (ie.stretchShortVideoTrack) {
                                var ne = ie.maxBufferHole,
                                  oe = Math.floor(ne * h),
                                  se =
                                    (n ? m + n * h : this.nextAudioPts) - X.pts;
                                se > oe
                                  ? ((o = se - ae) < 0 && (o = ae),
                                    s.logger.log(
                                      "It is approximately " +
                                        C(se, !1) +
                                        " ms to the next segment; using duration " +
                                        C(o, !1) +
                                        " ms for the last video frame."
                                    ))
                                  : (o = ae);
                              } else o = ae;
                            }
                            (W = Math.round(X.pts - X.dts)),
                              p.push({
                                size: Z,
                                duration: o,
                                cts: W,
                                flags: {
                                  isLeading: 0,
                                  isDependedOn: 0,
                                  hasRedundancy: 0,
                                  degradPrio: 0,
                                  dependsOn: X.key ? 2 : 1,
                                  isNonSync: X.key ? 0 : 1,
                                },
                              });
                          }
                          this.nextAvcDts = c + o;
                          var le = e.dropped;
                          if (
                            ((e.nbNalu = 0),
                            (e.dropped = 0),
                            p.length &&
                              navigator.userAgent
                                .toLowerCase()
                                .indexOf("chrome") > -1)
                          ) {
                            var de = p[0].flags;
                            (de.dependsOn = 2), (de.isNonSync = 0);
                          }
                          (e.samples = p),
                            (d = L.moof(e.sequenceNumber++, u, e)),
                            (e.samples = []);
                          var ue = {
                            data1: d,
                            data2: l,
                            startPTS: m / h,
                            endPTS: (b + o) / h,
                            startDTS: u / h,
                            endDTS: this.nextAvcDts / h,
                            type: "video",
                            hasAudio: !1,
                            hasVideo: !0,
                            nb: p.length,
                            dropped: le,
                          };
                          return (
                            this.observer.trigger(
                              i.default.FRAG_PARSING_DATA,
                              ue
                            ),
                            ue
                          );
                        }
                      }),
                      (t.remuxAudio = function (e, t, r, n) {
                        var o,
                          l,
                          d,
                          u,
                          c,
                          h,
                          f = e.inputTimeScale,
                          p = e.timescale,
                          g = f / p,
                          v = (e.isAAC ? 1024 : 1152) * g,
                          y = this._initPTS,
                          m = !e.isAAC && this.typeSupported.mpeg,
                          b = m ? 0 : 8,
                          _ = e.samples,
                          w = [],
                          T = this.nextAudioPts;
                        if (
                          ((r |=
                            _.length &&
                            T &&
                            ((n && Math.abs(t - T / f) < 0.1) ||
                              Math.abs(_[0].pts - T - y) < 20 * v)),
                          _.forEach(function (e) {
                            e.pts = e.dts = M(e.pts - y, t * f);
                          }),
                          0 !==
                            (_ = _.filter(function (e) {
                              return e.pts >= 0;
                            })).length)
                        ) {
                          if (
                            (r || (T = n ? Math.max(0, t * f) : _[0].pts),
                            e.isAAC)
                          )
                            for (
                              var E = this.config.maxAudioFramesDrift,
                                S = 0,
                                k = T;
                              S < _.length;

                            ) {
                              var x = _[S],
                                R = x.pts,
                                D = R - k;
                              if (D <= -E * v)
                                r || S > 0
                                  ? (s.logger.warn(
                                      "Dropping 1 audio frame @ " +
                                        C(k, !0) / 1e3 +
                                        "s due to " +
                                        C(D, !0) +
                                        " ms overlap."
                                    ),
                                    _.splice(S, 1))
                                  : (s.logger.warn(
                                      "Audio frame @ " +
                                        C(R, !0) / 1e3 +
                                        "s overlaps nextAudioPts by " +
                                        C(D, !0) +
                                        " ms."
                                    ),
                                    (k = R + v),
                                    S++);
                              else if (D >= E * v && D < I && k) {
                                var O = Math.round(D / v);
                                s.logger.warn(
                                  "Injecting " +
                                    O +
                                    " audio frames @ " +
                                    C(k, !0) / 1e3 +
                                    "s due to " +
                                    C(D, !0) +
                                    " ms gap."
                                );
                                for (var P = 0; P < O; P++) {
                                  var F = Math.max(k, 0);
                                  (l = A.getSilentFrame(
                                    e.manifestCodec || e.codec,
                                    e.channelCount
                                  )) ||
                                    (s.logger.log(
                                      "Unable to get silent frame for given audio codec; duplicating last frame instead."
                                    ),
                                    (l = x.unit.subarray())),
                                    _.splice(S, 0, {
                                      unit: l,
                                      pts: F,
                                      dts: F,
                                    }),
                                    (k += v),
                                    S++;
                                }
                                (x.pts = x.dts = k), (k += v), S++;
                              } else
                                Math.abs(D), (x.pts = x.dts = k), (k += v), S++;
                            }
                          for (var B = _.length, N = 0; B--; )
                            N += _[B].unit.byteLength;
                          for (var U = 0, H = _.length; U < H; U++) {
                            var j = _[U],
                              G = j.unit,
                              z = j.pts;
                            if (void 0 !== h && o)
                              o.duration = Math.round((z - h) / g);
                            else {
                              var Y = z - T,
                                K = 0;
                              if (r && e.isAAC && Y) {
                                if (Y > 0 && Y < I)
                                  (K = Math.round((z - T) / v)),
                                    s.logger.log(
                                      C(Y, !0) +
                                        " ms hole between AAC samples detected,filling it"
                                    ),
                                    K > 0 &&
                                      ((l = A.getSilentFrame(
                                        e.manifestCodec || e.codec,
                                        e.channelCount
                                      )) || (l = G.subarray()),
                                      (N += K * l.length));
                                else if (Y < -12) {
                                  s.logger.log(
                                    "drop overlapping AAC sample, expected/parsed/delta: " +
                                      C(T, !0) +
                                      " ms / " +
                                      C(z, !0) +
                                      " ms / " +
                                      C(-Y, !0) +
                                      " ms"
                                  ),
                                    (N -= G.byteLength);
                                  continue;
                                }
                                z = T;
                              }
                              if (((c = z), !(N > 0))) return;
                              N += b;
                              try {
                                d = new Uint8Array(N);
                              } catch (e) {
                                return void this.observer.trigger(
                                  i.default.ERROR,
                                  {
                                    type: a.ErrorTypes.MUX_ERROR,
                                    details: a.ErrorDetails.REMUX_ALLOC_ERROR,
                                    fatal: !1,
                                    bytes: N,
                                    reason: "fail allocating audio mdat " + N,
                                  }
                                );
                              }
                              m ||
                                (new DataView(d.buffer).setUint32(0, N),
                                d.set(L.types.mdat, 4));
                              for (var V = 0; V < K; V++)
                                (l = A.getSilentFrame(
                                  e.manifestCodec || e.codec,
                                  e.channelCount
                                )) ||
                                  (s.logger.log(
                                    "Unable to get silent frame for given audio codec; duplicating this frame instead."
                                  ),
                                  (l = G.subarray())),
                                  d.set(l, b),
                                  (b += l.byteLength),
                                  (o = {
                                    size: l.byteLength,
                                    cts: 0,
                                    duration: 1024,
                                    flags: {
                                      isLeading: 0,
                                      isDependedOn: 0,
                                      hasRedundancy: 0,
                                      degradPrio: 0,
                                      dependsOn: 1,
                                    },
                                  }),
                                  w.push(o);
                            }
                            d.set(G, b);
                            var q = G.byteLength;
                            (b += q),
                              (o = {
                                size: q,
                                cts: 0,
                                duration: 0,
                                flags: {
                                  isLeading: 0,
                                  isDependedOn: 0,
                                  hasRedundancy: 0,
                                  degradPrio: 0,
                                  dependsOn: 1,
                                },
                              }),
                              w.push(o),
                              (h = z);
                          }
                          var W = 0;
                          if (
                            ((B = w.length) >= 2 &&
                              ((W = w[B - 2].duration), (o.duration = W)),
                            B)
                          ) {
                            (this.nextAudioPts = T = h + g * W),
                              (e.samples = w),
                              (u = m
                                ? new Uint8Array()
                                : L.moof(e.sequenceNumber++, c / g, e)),
                              (e.samples = []);
                            var X = c / f,
                              Q = T / f,
                              Z = {
                                data1: u,
                                data2: d,
                                startPTS: X,
                                endPTS: Q,
                                startDTS: X,
                                endDTS: Q,
                                type: "audio",
                                hasAudio: !0,
                                hasVideo: !1,
                                nb: B,
                              };
                            return (
                              this.observer.trigger(
                                i.default.FRAG_PARSING_DATA,
                                Z
                              ),
                              Z
                            );
                          }
                          return null;
                        }
                      }),
                      (t.remuxEmptyAudio = function (e, t, r, i) {
                        var a = e.inputTimeScale,
                          n = a / (e.samplerate ? e.samplerate : a),
                          o = this.nextAudioPts,
                          l =
                            (void 0 !== o ? o : i.startDTS * a) + this._initDTS,
                          d = i.endDTS * a + this._initDTS,
                          u = 1024 * n,
                          c = Math.ceil((d - l) / u),
                          h = A.getSilentFrame(
                            e.manifestCodec || e.codec,
                            e.channelCount
                          );
                        if ((s.logger.warn("remux empty Audio"), h)) {
                          for (var f = [], p = 0; p < c; p++) {
                            var g = l + p * u;
                            f.push({
                              unit: h,
                              pts: g,
                              dts: g,
                            });
                          }
                          (e.samples = f), this.remuxAudio(e, t, r);
                        } else
                          s.logger.trace(
                            "Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!"
                          );
                      }),
                      (t.remuxID3 = function (e, t) {
                        var r = e.samples.length;
                        if (r) {
                          for (
                            var a = e.inputTimeScale,
                              n = this._initPTS,
                              o = this._initDTS,
                              s = 0;
                            s < r;
                            s++
                          ) {
                            var l = e.samples[s];
                            (l.pts = M(l.pts - n, t * a) / a),
                              (l.dts = M(l.dts - o, t * a) / a);
                          }
                          this.observer.trigger(
                            i.default.FRAG_PARSING_METADATA,
                            {
                              samples: e.samples,
                            }
                          ),
                            (e.samples = []);
                        }
                      }),
                      (t.remuxText = function (e, t) {
                        var r = e.samples.length,
                          a = e.inputTimeScale,
                          n = this._initPTS;
                        if (r) {
                          for (var o = 0; o < r; o++) {
                            var s = e.samples[o];
                            s.pts = M(s.pts - n, t * a) / a;
                          }
                          e.samples.sort(function (e, t) {
                            return e.pts - t.pts;
                          }),
                            this.observer.trigger(
                              i.default.FRAG_PARSING_USERDATA,
                              {
                                samples: e.samples,
                              }
                            );
                        }
                        e.samples = [];
                      }),
                      e
                    );
                  })(),
                  U = (function () {
                    function e(e) {
                      this.observer = e;
                    }
                    var t = e.prototype;
                    return (
                      (t.destroy = function () {}),
                      (t.resetTimeStamp = function () {}),
                      (t.resetInitSegment = function () {}),
                      (t.remux = function (e, t, r, a, n, o, s, l) {
                        var d = this.observer,
                          u = "";
                        e && (u += "audio"),
                          t && (u += "video"),
                          d.trigger(i.default.FRAG_PARSING_DATA, {
                            data1: l,
                            startPTS: n,
                            startDTS: n,
                            type: u,
                            hasAudio: !!e,
                            hasVideo: !!t,
                            nb: 1,
                            dropped: 0,
                          }),
                          d.trigger(i.default.FRAG_PARSED);
                      }),
                      e
                    );
                  })(),
                  H = Object(l.getSelfScope)();
                try {
                  B = H.performance.now.bind(H.performance);
                } catch (e) {
                  s.logger.debug(
                    "Unable to use Performance API on this environment"
                  ),
                    (B = H.Date.now);
                }
                var j = (function () {
                  function e(e, t, r, i) {
                    (this.observer = e),
                      (this.typeSupported = t),
                      (this.config = r),
                      (this.vendor = i);
                  }
                  var t = e.prototype;
                  return (
                    (t.destroy = function () {
                      var e = this.demuxer;
                      e && e.destroy();
                    }),
                    (t.push = function (e, t, r, a, o, s, l, d, u, c, h, f) {
                      var p = this;
                      if (
                        e.byteLength > 0 &&
                        null != t &&
                        null != t.key &&
                        "AES-128" === t.method
                      ) {
                        var g = this.decrypter;
                        null == g &&
                          (g = this.decrypter =
                            new n.default(this.observer, this.config));
                        var v = B();
                        g.decrypt(e, t.key.buffer, t.iv.buffer, function (e) {
                          var n = B();
                          p.observer.trigger(i.default.FRAG_DECRYPTED, {
                            stats: {
                              tstart: v,
                              tdecrypt: n,
                            },
                          }),
                            p.pushDecrypted(
                              new Uint8Array(e),
                              t,
                              new Uint8Array(r),
                              a,
                              o,
                              s,
                              l,
                              d,
                              u,
                              c,
                              h,
                              f
                            );
                        });
                      } else
                        this.pushDecrypted(
                          new Uint8Array(e),
                          t,
                          new Uint8Array(r),
                          a,
                          o,
                          s,
                          l,
                          d,
                          u,
                          c,
                          h,
                          f
                        );
                    }),
                    (t.pushDecrypted = function (
                      e,
                      t,
                      r,
                      n,
                      o,
                      s,
                      l,
                      d,
                      u,
                      c,
                      h,
                      f
                    ) {
                      var p = this.demuxer,
                        g = this.remuxer;
                      if (!p || l || d) {
                        for (
                          var v,
                            y = this.observer,
                            _ = this.typeSupported,
                            w = this.config,
                            T = [
                              {
                                demux: k,
                                remux: N,
                              },
                              {
                                demux: b.default,
                                remux: U,
                              },
                              {
                                demux: m,
                                remux: N,
                              },
                              {
                                demux: x,
                                remux: N,
                              },
                            ],
                            E = 0,
                            S = T.length;
                          E < S && !(v = T[E]).demux.probe(e);
                          E++
                        );
                        if (!v)
                          return void y.trigger(i.default.ERROR, {
                            type: a.ErrorTypes.MEDIA_ERROR,
                            details: a.ErrorDetails.FRAG_PARSING_ERROR,
                            fatal: !0,
                            reason: "no demux matching with content found",
                          });
                        (g && g instanceof v.remux) ||
                          (g = new v.remux(y, w, _, this.vendor)),
                          (p && p instanceof v.demux) ||
                            ((p = new v.demux(y, g, w, _)),
                            (this.probe = v.demux.probe)),
                          (this.demuxer = p),
                          (this.remuxer = g);
                      }
                      (l || d) &&
                        (p.resetInitSegment(r, n, o, c), g.resetInitSegment()),
                        l && (p.resetTimeStamp(f), g.resetTimeStamp(f)),
                        "function" == typeof p.setDecryptData &&
                          p.setDecryptData(t),
                        p.append(e, s, u, h);
                    }),
                    e
                  );
                })();
                t.default = j;
              },
            /*!*************************************!*\
  !*** ./src/demux/demuxer-worker.js ***!
  \*************************************/
            "./src/demux/demuxer-worker.js":
              /*! exports provided: default */
              /*! ModuleConcatenation bailout: Module is referenced from these modules with unsupported syntax: ./src/demux/demuxer.js (referenced with require.resolve) */
              function (e, t, r) {
                "use strict";
                r.r(t);
                var i = r(
                    /*! ../demux/demuxer-inline */
                    "./src/demux/demuxer-inline.js"
                  ),
                  a = r(/*! ../events */ "./src/events.js"),
                  n = r(/*! ../utils/logger */ "./src/utils/logger.js"),
                  o = r(
                    /*! eventemitter3 */
                    "./node_modules/eventemitter3/index.js"
                  );
                t.default = function (e) {
                  var t = new o.EventEmitter();
                  (t.trigger = function (e) {
                    for (
                      var r = arguments.length,
                        i = new Array(r > 1 ? r - 1 : 0),
                        a = 1;
                      a < r;
                      a++
                    )
                      i[a - 1] = arguments[a];
                    t.emit.apply(t, [e, e].concat(i));
                  }),
                    (t.off = function (e) {
                      for (
                        var r = arguments.length,
                          i = new Array(r > 1 ? r - 1 : 0),
                          a = 1;
                        a < r;
                        a++
                      )
                        i[a - 1] = arguments[a];
                      t.removeListener.apply(t, [e].concat(i));
                    });
                  var r = function (t, r) {
                    e.postMessage({
                      event: t,
                      data: r,
                    });
                  };
                  e.addEventListener("message", function (a) {
                    var o = a.data;
                    switch (o.cmd) {
                      case "init":
                        var s = JSON.parse(o.config);
                        (e.demuxer = new i.default(
                          t,
                          o.typeSupported,
                          s,
                          o.vendor
                        )),
                          Object(n.enableLogs)(s.debug),
                          r("init", null);
                        break;
                      case "demux":
                        e.demuxer.push(
                          o.data,
                          o.decryptdata,
                          o.initSegment,
                          o.audioCodec,
                          o.videoCodec,
                          o.timeOffset,
                          o.discontinuity,
                          o.trackSwitch,
                          o.contiguous,
                          o.duration,
                          o.accurateTimeOffset,
                          o.defaultInitPTS
                        );
                    }
                  }),
                    t.on(a.default.FRAG_DECRYPTED, r),
                    t.on(a.default.FRAG_PARSING_INIT_SEGMENT, r),
                    t.on(a.default.FRAG_PARSED, r),
                    t.on(a.default.ERROR, r),
                    t.on(a.default.FRAG_PARSING_METADATA, r),
                    t.on(a.default.FRAG_PARSING_USERDATA, r),
                    t.on(a.default.INIT_PTS_FOUND, r),
                    t.on(a.default.FRAG_PARSING_DATA, function (t, r) {
                      var i = [],
                        a = {
                          event: t,
                          data: r,
                        };
                      r.data1 &&
                        ((a.data1 = r.data1.buffer),
                        i.push(r.data1.buffer),
                        delete r.data1),
                        r.data2 &&
                          ((a.data2 = r.data2.buffer),
                          i.push(r.data2.buffer),
                          delete r.data2),
                        e.postMessage(a, i);
                    });
                };
              },
            /*!**************************!*\
  !*** ./src/demux/id3.js ***!
  \**************************/
            "./src/demux/id3.js":
              /*! exports provided: default, utf8ArrayToStr */
              function (e, t, r) {
                "use strict";
                r.r(t),
                  r.d(t, "utf8ArrayToStr", function () {
                    return s;
                  });
                var i,
                  a = r(
                    /*! ../utils/get-self-scope */
                    "./src/utils/get-self-scope.js"
                  ),
                  n = (function () {
                    function e() {}
                    return (
                      (e.isHeader = function (e, t) {
                        return (
                          t + 10 <= e.length &&
                          73 === e[t] &&
                          68 === e[t + 1] &&
                          51 === e[t + 2] &&
                          e[t + 3] < 255 &&
                          e[t + 4] < 255 &&
                          e[t + 6] < 128 &&
                          e[t + 7] < 128 &&
                          e[t + 8] < 128 &&
                          e[t + 9] < 128
                        );
                      }),
                      (e.isFooter = function (e, t) {
                        return (
                          t + 10 <= e.length &&
                          51 === e[t] &&
                          68 === e[t + 1] &&
                          73 === e[t + 2] &&
                          e[t + 3] < 255 &&
                          e[t + 4] < 255 &&
                          e[t + 6] < 128 &&
                          e[t + 7] < 128 &&
                          e[t + 8] < 128 &&
                          e[t + 9] < 128
                        );
                      }),
                      (e.getID3Data = function (t, r) {
                        for (var i = r, a = 0; e.isHeader(t, r); )
                          (a += 10),
                            (a += e._readSize(t, r + 6)),
                            e.isFooter(t, r + 10) && (a += 10),
                            (r += a);
                        if (a > 0) return t.subarray(i, i + a);
                      }),
                      (e._readSize = function (e, t) {
                        var r = 0;
                        return (
                          (r = (127 & e[t]) << 21),
                          (r |= (127 & e[t + 1]) << 14),
                          (r |= (127 & e[t + 2]) << 7),
                          (r |= 127 & e[t + 3])
                        );
                      }),
                      (e.getTimeStamp = function (t) {
                        for (
                          var r = e.getID3Frames(t), i = 0;
                          i < r.length;
                          i++
                        ) {
                          var a = r[i];
                          if (e.isTimeStampFrame(a)) return e._readTimeStamp(a);
                        }
                      }),
                      (e.isTimeStampFrame = function (e) {
                        return (
                          e &&
                          "PRIV" === e.key &&
                          "com.apple.streaming.transportStreamTimestamp" ===
                            e.info
                        );
                      }),
                      (e._getFrameData = function (t) {
                        var r = String.fromCharCode(t[0], t[1], t[2], t[3]),
                          i = e._readSize(t, 4);
                        return {
                          type: r,
                          size: i,
                          data: t.subarray(10, 10 + i),
                        };
                      }),
                      (e.getID3Frames = function (t) {
                        for (var r = 0, i = []; e.isHeader(t, r); ) {
                          for (
                            var a = e._readSize(t, r + 6), n = (r += 10) + a;
                            r + 8 < n;

                          ) {
                            var o = e._getFrameData(t.subarray(r)),
                              s = e._decodeFrame(o);
                            s && i.push(s), (r += o.size + 10);
                          }
                          e.isFooter(t, r) && (r += 10);
                        }
                        return i;
                      }),
                      (e._decodeFrame = function (t) {
                        return "PRIV" === t.type
                          ? e._decodePrivFrame(t)
                          : "W" === t.type[0]
                          ? e._decodeURLFrame(t)
                          : e._decodeTextFrame(t);
                      }),
                      (e._readTimeStamp = function (e) {
                        if (8 === e.data.byteLength) {
                          var t = new Uint8Array(e.data),
                            r = 1 & t[3],
                            i =
                              (t[4] << 23) + (t[5] << 15) + (t[6] << 7) + t[7];
                          return (
                            (i /= 45), r && (i += 47721858.84), Math.round(i)
                          );
                        }
                      }),
                      (e._decodePrivFrame = function (t) {
                        if (!(t.size < 2)) {
                          var r = e._utf8ArrayToStr(t.data, !0),
                            i = new Uint8Array(t.data.subarray(r.length + 1));
                          return {
                            key: t.type,
                            info: r,
                            data: i.buffer,
                          };
                        }
                      }),
                      (e._decodeTextFrame = function (t) {
                        if (!(t.size < 2)) {
                          if ("TXXX" === t.type) {
                            var r = 1,
                              i = e._utf8ArrayToStr(t.data.subarray(r), !0);
                            r += i.length + 1;
                            var a = e._utf8ArrayToStr(t.data.subarray(r));
                            return {
                              key: t.type,
                              info: i,
                              data: a,
                            };
                          }
                          var n = e._utf8ArrayToStr(t.data.subarray(1));
                          return {
                            key: t.type,
                            data: n,
                          };
                        }
                      }),
                      (e._decodeURLFrame = function (t) {
                        if ("WXXX" === t.type) {
                          if (t.size < 2) return;
                          var r = 1,
                            i = e._utf8ArrayToStr(t.data.subarray(r), !0);
                          r += i.length + 1;
                          var a = e._utf8ArrayToStr(t.data.subarray(r));
                          return {
                            key: t.type,
                            info: i,
                            data: a,
                          };
                        }
                        var n = e._utf8ArrayToStr(t.data);
                        return {
                          key: t.type,
                          data: n,
                        };
                      }),
                      (e._utf8ArrayToStr = function (e, t) {
                        void 0 === t && (t = !1);
                        var r = o();
                        if (r) {
                          var i = r.decode(e);
                          if (t) {
                            var a = i.indexOf("\0");
                            return -1 !== a ? i.substring(0, a) : i;
                          }
                          return i.replace(/\0/g, "");
                        }
                        for (
                          var n, s, l, d = e.length, u = "", c = 0;
                          c < d;

                        ) {
                          if (0 === (n = e[c++]) && t) return u;
                          if (0 !== n && 3 !== n)
                            switch (n >> 4) {
                              case 0:
                              case 1:
                              case 2:
                              case 3:
                              case 4:
                              case 5:
                              case 6:
                              case 7:
                                u += String.fromCharCode(n);
                                break;
                              case 12:
                              case 13:
                                (s = e[c++]),
                                  (u += String.fromCharCode(
                                    ((31 & n) << 6) | (63 & s)
                                  ));
                                break;
                              case 14:
                                (s = e[c++]),
                                  (l = e[c++]),
                                  (u += String.fromCharCode(
                                    ((15 & n) << 12) |
                                      ((63 & s) << 6) |
                                      ((63 & l) << 0)
                                  ));
                            }
                        }
                        return u;
                      }),
                      e
                    );
                  })();
                function o() {
                  var e = Object(a.getSelfScope)();
                  return (
                    i ||
                      void 0 === e.TextDecoder ||
                      (i = new e.TextDecoder("utf-8")),
                    i
                  );
                }
                var s = n._utf8ArrayToStr;
                t.default = n;
              },
            /*!*********************************!*\
  !*** ./src/demux/mp4demuxer.js ***!
  \*********************************/
            "./src/demux/mp4demuxer.js":
              /*! exports provided: default */
              function (e, t, r) {
                "use strict";
                r.r(t);
                var i = r(/*! ../utils/logger */ "./src/utils/logger.js"),
                  a = r(/*! ../events */ "./src/events.js"),
                  n = Math.pow(2, 32) - 1,
                  o = (function () {
                    function e(e, t) {
                      (this.observer = e), (this.remuxer = t);
                    }
                    var t = e.prototype;
                    return (
                      (t.resetTimeStamp = function (e) {
                        this.initPTS = e;
                      }),
                      (t.resetInitSegment = function (t, r, i, n) {
                        if (t && t.byteLength) {
                          var o = (this.initData = e.parseInitSegment(t));
                          null == r && (r = "mp4a.40.5"),
                            null == i && (i = "avc1.42e01e");
                          var s = {};
                          o.audio && o.video
                            ? (s.audiovideo = {
                                container: "video/mp4",
                                codec: r + "," + i,
                                initSegment: n ? t : null,
                              })
                            : (o.audio &&
                                (s.audio = {
                                  container: "audio/mp4",
                                  codec: r,
                                  initSegment: n ? t : null,
                                }),
                              o.video &&
                                (s.video = {
                                  container: "video/mp4",
                                  codec: i,
                                  initSegment: n ? t : null,
                                })),
                            this.observer.trigger(
                              a.default.FRAG_PARSING_INIT_SEGMENT,
                              {
                                tracks: s,
                              }
                            );
                        } else
                          r && (this.audioCodec = r),
                            i && (this.videoCodec = i);
                      }),
                      (e.probe = function (t) {
                        return (
                          e.findBox(
                            {
                              data: t,
                              start: 0,
                              end: Math.min(t.length, 16384),
                            },
                            ["moof"]
                          ).length > 0
                        );
                      }),
                      (e.bin2str = function (e) {
                        return String.fromCharCode.apply(null, e);
                      }),
                      (e.readUint16 = function (e, t) {
                        e.data && ((t += e.start), (e = e.data));
                        var r = (e[t] << 8) | e[t + 1];
                        return r < 0 ? 65536 + r : r;
                      }),
                      (e.readUint32 = function (e, t) {
                        e.data && ((t += e.start), (e = e.data));
                        var r =
                          (e[t] << 24) |
                          (e[t + 1] << 16) |
                          (e[t + 2] << 8) |
                          e[t + 3];
                        return r < 0 ? 4294967296 + r : r;
                      }),
                      (e.writeUint32 = function (e, t, r) {
                        e.data && ((t += e.start), (e = e.data)),
                          (e[t] = r >> 24),
                          (e[t + 1] = (r >> 16) & 255),
                          (e[t + 2] = (r >> 8) & 255),
                          (e[t + 3] = 255 & r);
                      }),
                      (e.findBox = function (t, r) {
                        var i,
                          a,
                          n,
                          o,
                          s,
                          l,
                          d = [];
                        if (
                          (t.data
                            ? ((s = t.start), (n = t.end), (t = t.data))
                            : ((s = 0), (n = t.byteLength)),
                          !r.length)
                        )
                          return null;
                        for (i = s; i < n; )
                          (l = (a = e.readUint32(t, i)) > 1 ? i + a : n),
                            e.bin2str(t.subarray(i + 4, i + 8)) === r[0] &&
                              (1 === r.length
                                ? d.push({
                                    data: t,
                                    start: i + 8,
                                    end: l,
                                  })
                                : (o = e.findBox(
                                    {
                                      data: t,
                                      start: i + 8,
                                      end: l,
                                    },
                                    r.slice(1)
                                  )).length && (d = d.concat(o))),
                            (i = l);
                        return d;
                      }),
                      (e.parseSegmentIndex = function (t) {
                        var r,
                          i = e.findBox(t, ["moov"])[0],
                          a = i ? i.end : null,
                          n = 0,
                          o = e.findBox(t, ["sidx"]);
                        if (!o || !o[0]) return null;
                        r = [];
                        var s = (o = o[0]).data[0];
                        n = 0 === s ? 8 : 16;
                        var l = e.readUint32(o, n);
                        (n += 4), (n += 0 === s ? 8 : 16), (n += 2);
                        var d = o.end + 0,
                          u = e.readUint16(o, n);
                        n += 2;
                        for (var c = 0; c < u; c++) {
                          var h = n,
                            f = e.readUint32(o, h);
                          h += 4;
                          var p = 2147483647 & f;
                          if (1 == (2147483648 & f) >>> 31)
                            return void console.warn(
                              "SIDX has hierarchical references (not supported)"
                            );
                          var g = e.readUint32(o, h);
                          (h += 4),
                            r.push({
                              referenceSize: p,
                              subsegmentDuration: g,
                              info: {
                                duration: g / l,
                                start: d,
                                end: d + p - 1,
                              },
                            }),
                            (d += p),
                            (n = h += 4);
                        }
                        return {
                          earliestPresentationTime: 0,
                          timescale: l,
                          version: s,
                          referencesCount: u,
                          references: r,
                          moovEndOffset: a,
                        };
                      }),
                      (e.parseInitSegment = function (t) {
                        var r = [];
                        return (
                          e.findBox(t, ["moov", "trak"]).forEach(function (t) {
                            var a = e.findBox(t, ["tkhd"])[0];
                            if (a) {
                              var n = a.data[a.start],
                                o = 0 === n ? 12 : 20,
                                s = e.readUint32(a, o),
                                l = e.findBox(t, ["mdia", "mdhd"])[0];
                              if (l) {
                                o = 0 === (n = l.data[l.start]) ? 12 : 20;
                                var d = e.readUint32(l, o),
                                  u = e.findBox(t, ["mdia", "hdlr"])[0];
                                if (u) {
                                  var c = {
                                    soun: "audio",
                                    vide: "video",
                                  }[
                                    e.bin2str(
                                      u.data.subarray(u.start + 8, u.start + 12)
                                    )
                                  ];
                                  if (c) {
                                    var h = e.findBox(t, [
                                      "mdia",
                                      "minf",
                                      "stbl",
                                      "stsd",
                                    ]);
                                    if (h.length) {
                                      h = h[0];
                                      var f = e.bin2str(
                                        h.data.subarray(
                                          h.start + 12,
                                          h.start + 16
                                        )
                                      );
                                      i.logger.log(
                                        "MP4Demuxer:" + c + ":" + f + " found"
                                      );
                                    }
                                    (r[s] = {
                                      timescale: d,
                                      type: c,
                                    }),
                                      (r[c] = {
                                        timescale: d,
                                        id: s,
                                      });
                                  }
                                }
                              }
                            }
                          }),
                          r
                        );
                      }),
                      (e.getStartDTS = function (t, r) {
                        var i, a, n;
                        return (
                          (i = e.findBox(r, ["moof", "traf"])),
                          (a = [].concat.apply(
                            [],
                            i.map(function (r) {
                              return e.findBox(r, ["tfhd"]).map(function (i) {
                                var a, n;
                                return (
                                  (a = e.readUint32(i, 4)),
                                  (n = t[a].timescale || 9e4),
                                  e.findBox(r, ["tfdt"]).map(function (t) {
                                    var r, i;
                                    return (
                                      (r = t.data[t.start]),
                                      (i = e.readUint32(t, 4)),
                                      1 === r &&
                                        ((i *= Math.pow(2, 32)),
                                        (i += e.readUint32(t, 8))),
                                      i
                                    );
                                  })[0] / n
                                );
                              });
                            })
                          )),
                          (n = Math.min.apply(null, a)),
                          isFinite(n) ? n : 0
                        );
                      }),
                      (e.offsetStartDTS = function (t, r, i) {
                        e.findBox(r, ["moof", "traf"]).map(function (r) {
                          return e.findBox(r, ["tfhd"]).map(function (a) {
                            var o = e.readUint32(a, 4),
                              s = t[o].timescale || 9e4;
                            e.findBox(r, ["tfdt"]).map(function (t) {
                              var r = t.data[t.start],
                                a = e.readUint32(t, 4);
                              if (0 === r) e.writeUint32(t, 4, a - i * s);
                              else {
                                (a *= Math.pow(2, 32)),
                                  (a += e.readUint32(t, 8)),
                                  (a -= i * s),
                                  (a = Math.max(a, 0));
                                var o = Math.floor(a / (n + 1)),
                                  l = Math.floor(a % (n + 1));
                                e.writeUint32(t, 4, o), e.writeUint32(t, 8, l);
                              }
                            });
                          });
                        });
                      }),
                      (t.append = function (t, r, i, n) {
                        var o = this.initData;
                        o ||
                          (this.resetInitSegment(
                            t,
                            this.audioCodec,
                            this.videoCodec,
                            !1
                          ),
                          (o = this.initData));
                        var s,
                          l = this.initPTS;
                        if (void 0 === l) {
                          var d = e.getStartDTS(o, t);
                          (this.initPTS = l = d - r),
                            this.observer.trigger(a.default.INIT_PTS_FOUND, {
                              initPTS: l,
                            });
                        }
                        e.offsetStartDTS(o, t, l),
                          (s = e.getStartDTS(o, t)),
                          this.remuxer.remux(
                            o.audio,
                            o.video,
                            null,
                            null,
                            s,
                            i,
                            n,
                            t
                          );
                      }),
                      (t.destroy = function () {}),
                      e
                    );
                  })();
                t.default = o;
              },
            /*!***********************!*\
  !*** ./src/errors.ts ***!
  \***********************/
            "./src/errors.ts":
              /*! exports provided: ErrorTypes, ErrorDetails */
              function (e, t, r) {
                "use strict";
                var i, a;
                r.r(t),
                  r.d(t, "ErrorTypes", function () {
                    return i;
                  }),
                  r.d(t, "ErrorDetails", function () {
                    return a;
                  }),
                  (function (e) {
                    (e.NETWORK_ERROR = "networkError"),
                      (e.MEDIA_ERROR = "mediaError"),
                      (e.KEY_SYSTEM_ERROR = "keySystemError"),
                      (e.MUX_ERROR = "muxError"),
                      (e.OTHER_ERROR = "otherError");
                  })(i || (i = {})),
                  (function (e) {
                    (e.KEY_SYSTEM_NO_KEYS = "keySystemNoKeys"),
                      (e.KEY_SYSTEM_NO_ACCESS = "keySystemNoAccess"),
                      (e.KEY_SYSTEM_NO_SESSION = "keySystemNoSession"),
                      (e.KEY_SYSTEM_LICENSE_REQUEST_FAILED =
                        "keySystemLicenseRequestFailed"),
                      (e.KEY_SYSTEM_NO_INIT_DATA = "keySystemNoInitData"),
                      (e.MANIFEST_LOAD_ERROR = "manifestLoadError"),
                      (e.MANIFEST_LOAD_TIMEOUT = "manifestLoadTimeOut"),
                      (e.MANIFEST_PARSING_ERROR = "manifestParsingError"),
                      (e.MANIFEST_INCOMPATIBLE_CODECS_ERROR =
                        "manifestIncompatibleCodecsError"),
                      (e.LEVEL_EMPTY_ERROR = "levelEmptyError"),
                      (e.LEVEL_LOAD_ERROR = "levelLoadError"),
                      (e.LEVEL_LOAD_TIMEOUT = "levelLoadTimeOut"),
                      (e.LEVEL_SWITCH_ERROR = "levelSwitchError"),
                      (e.AUDIO_TRACK_LOAD_ERROR = "audioTrackLoadError"),
                      (e.AUDIO_TRACK_LOAD_TIMEOUT = "audioTrackLoadTimeOut"),
                      (e.FRAG_LOAD_ERROR = "fragLoadError"),
                      (e.FRAG_LOAD_TIMEOUT = "fragLoadTimeOut"),
                      (e.FRAG_DECRYPT_ERROR = "fragDecryptError"),
                      (e.FRAG_PARSING_ERROR = "fragParsingError"),
                      (e.REMUX_ALLOC_ERROR = "remuxAllocError"),
                      (e.KEY_LOAD_ERROR = "keyLoadError"),
                      (e.KEY_LOAD_TIMEOUT = "keyLoadTimeOut"),
                      (e.BUFFER_ADD_CODEC_ERROR = "bufferAddCodecError"),
                      (e.BUFFER_APPEND_ERROR = "bufferAppendError"),
                      (e.BUFFER_APPENDING_ERROR = "bufferAppendingError"),
                      (e.BUFFER_STALLED_ERROR = "bufferStalledError"),
                      (e.BUFFER_FULL_ERROR = "bufferFullError"),
                      (e.BUFFER_SEEK_OVER_HOLE = "bufferSeekOverHole"),
                      (e.BUFFER_NUDGE_ON_STALL = "bufferNudgeOnStall"),
                      (e.INTERNAL_EXCEPTION = "internalException");
                  })(a || (a = {}));
              },
            /*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
            "./src/events.js":
              /*! exports provided: default */
              function (e, t, r) {
                "use strict";
                r.r(t),
                  (t.default = {
                    MEDIA_ATTACHING: "hlsMediaAttaching",
                    MEDIA_ATTACHED: "hlsMediaAttached",
                    MEDIA_DETACHING: "hlsMediaDetaching",
                    MEDIA_DETACHED: "hlsMediaDetached",
                    BUFFER_RESET: "hlsBufferReset",
                    BUFFER_CODECS: "hlsBufferCodecs",
                    BUFFER_CREATED: "hlsBufferCreated",
                    BUFFER_APPENDING: "hlsBufferAppending",
                    BUFFER_APPENDED: "hlsBufferAppended",
                    BUFFER_EOS: "hlsBufferEos",
                    BUFFER_FLUSHING: "hlsBufferFlushing",
                    BUFFER_FLUSHED: "hlsBufferFlushed",
                    MANIFEST_LOADING: "hlsManifestLoading",
                    MANIFEST_LOADED: "hlsManifestLoaded",
                    MANIFEST_PARSED: "hlsManifestParsed",
                    LEVEL_SWITCHING: "hlsLevelSwitching",
                    LEVEL_SWITCHED: "hlsLevelSwitched",
                    LEVEL_LOADING: "hlsLevelLoading",
                    LEVEL_LOADED: "hlsLevelLoaded",
                    LEVEL_UPDATED: "hlsLevelUpdated",
                    LEVEL_PTS_UPDATED: "hlsLevelPtsUpdated",
                    LEVELS_UPDATED: "hlsLevelsUpdated",
                    AUDIO_TRACKS_UPDATED: "hlsAudioTracksUpdated",
                    AUDIO_TRACK_SWITCHING: "hlsAudioTrackSwitching",
                    AUDIO_TRACK_SWITCHED: "hlsAudioTrackSwitched",
                    AUDIO_TRACK_LOADING: "hlsAudioTrackLoading",
                    AUDIO_TRACK_LOADED: "hlsAudioTrackLoaded",
                    SUBTITLE_TRACKS_UPDATED: "hlsSubtitleTracksUpdated",
                    SUBTITLE_TRACK_SWITCH: "hlsSubtitleTrackSwitch",
                    SUBTITLE_TRACK_LOADING: "hlsSubtitleTrackLoading",
                    SUBTITLE_TRACK_LOADED: "hlsSubtitleTrackLoaded",
                    SUBTITLE_FRAG_PROCESSED: "hlsSubtitleFragProcessed",
                    CUES_PARSED: "hlsCuesParsed",
                    NON_NATIVE_TEXT_TRACKS_FOUND: "hlsNonNativeTextTracksFound",
                    INIT_PTS_FOUND: "hlsInitPtsFound",
                    FRAG_LOADING: "hlsFragLoading",
                    FRAG_LOAD_PROGRESS: "hlsFragLoadProgress",
                    FRAG_LOAD_EMERGENCY_ABORTED: "hlsFragLoadEmergencyAborted",
                    FRAG_LOADED: "hlsFragLoaded",
                    FRAG_DECRYPTED: "hlsFragDecrypted",
                    FRAG_PARSING_INIT_SEGMENT: "hlsFragParsingInitSegment",
                    FRAG_PARSING_USERDATA: "hlsFragParsingUserdata",
                    FRAG_PARSING_METADATA: "hlsFragParsingMetadata",
                    FRAG_PARSING_DATA: "hlsFragParsingData",
                    FRAG_PARSED: "hlsFragParsed",
                    FRAG_BUFFERED: "hlsFragBuffered",
                    FRAG_CHANGED: "hlsFragChanged",
                    FPS_DROP: "hlsFpsDrop",
                    FPS_DROP_LEVEL_CAPPING: "hlsFpsDropLevelCapping",
                    ERROR: "hlsError",
                    DESTROYING: "hlsDestroying",
                    KEY_LOADING: "hlsKeyLoading",
                    KEY_LOADED: "hlsKeyLoaded",
                    STREAM_STATE_TRANSITION: "hlsStreamStateTransition",
                    LIVE_BACK_BUFFER_REACHED: "hlsLiveBackBufferReached",
                  });
              },
            /*!*********************************!*\
  !*** ./src/hls.ts + 50 modules ***!
  \*********************************/
            "./src/hls.ts":
              /*! exports provided: default */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/crypt/decrypter.js because of ./src/demux/demuxer-worker.js */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/demux/demuxer-inline.js because of ./src/demux/demuxer-worker.js */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/demux/id3.js because of ./src/demux/demuxer-worker.js */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/demux/mp4demuxer.js because of ./src/demux/demuxer-worker.js */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/errors.ts because of ./src/demux/demuxer-worker.js */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/events.js because of ./src/demux/demuxer-worker.js */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/polyfills/number.js because of ./src/demux/demuxer-worker.js */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/utils/get-self-scope.js because of ./src/demux/demuxer-worker.js */
              /*! ModuleConcatenation bailout: Cannot concat with ./src/utils/logger.js because of ./src/demux/demuxer-worker.js */
              /*! ModuleConcatenation bailout: Cannot concat with ./node_modules/eventemitter3/index.js (<- Module is not an ECMAScript module) */
              /*! ModuleConcatenation bailout: Cannot concat with ./node_modules/url-toolkit/src/url-toolkit.js (<- Module is not an ECMAScript module) */
              function (e, t, r) {
                "use strict";
                r.r(t),
                  r.d(t, "default", function () {
                    return nr;
                  });
                var i = {};
                r.r(i),
                  r.d(i, "newCue", function () {
                    return ft;
                  });
                var a,
                  n,
                  o = r("./node_modules/url-toolkit/src/url-toolkit.js"),
                  s = r("./src/errors.ts"),
                  l = r("./src/polyfills/number.js"),
                  d = r("./src/events.js"),
                  u = r("./src/utils/logger.js"),
                  c = {
                    hlsEventGeneric: !0,
                    hlsHandlerDestroying: !0,
                    hlsHandlerDestroyed: !0,
                  },
                  h = (function () {
                    function e(e) {
                      (this.hls = void 0),
                        (this.handledEvents = void 0),
                        (this.useGenericHandler = void 0),
                        (this.hls = e),
                        (this.onEvent = this.onEvent.bind(this));
                      for (
                        var t = arguments.length,
                          r = new Array(t > 1 ? t - 1 : 0),
                          i = 1;
                        i < t;
                        i++
                      )
                        r[i - 1] = arguments[i];
                      (this.handledEvents = r),
                        (this.useGenericHandler = !0),
                        this.registerListeners();
                    }
                    var t = e.prototype;
                    return (
                      (t.destroy = function () {
                        this.onHandlerDestroying(),
                          this.unregisterListeners(),
                          this.onHandlerDestroyed();
                      }),
                      (t.onHandlerDestroying = function () {}),
                      (t.onHandlerDestroyed = function () {}),
                      (t.isEventHandler = function () {
                        return (
                          "object" == typeof this.handledEvents &&
                          this.handledEvents.length &&
                          "function" == typeof this.onEvent
                        );
                      }),
                      (t.registerListeners = function () {
                        this.isEventHandler() &&
                          this.handledEvents.forEach(function (e) {
                            if (c[e])
                              throw new Error("Forbidden event-name: " + e);
                            this.hls.on(e, this.onEvent);
                          }, this);
                      }),
                      (t.unregisterListeners = function () {
                        this.isEventHandler() &&
                          this.handledEvents.forEach(function (e) {
                            this.hls.off(e, this.onEvent);
                          }, this);
                      }),
                      (t.onEvent = function (e, t) {
                        this.onEventGeneric(e, t);
                      }),
                      (t.onEventGeneric = function (e, t) {
                        try {
                          (function (e, t) {
                            var r = "on" + e.replace("hls", "");
                            if ("function" != typeof this[r])
                              throw new Error(
                                "Event " +
                                  e +
                                  " has no generic handler in this " +
                                  this.constructor.name +
                                  " class (tried " +
                                  r +
                                  ")"
                              );
                            return this[r].bind(this, t);
                          })
                            .call(this, e, t)
                            .call();
                        } catch (t) {
                          u.logger.error(
                            "An internal error happened while handling event " +
                              e +
                              '. Error message: "' +
                              t.message +
                              '". Here is a stacktrace:',
                            t
                          ),
                            this.hls.trigger(d.default.ERROR, {
                              type: s.ErrorTypes.OTHER_ERROR,
                              details: s.ErrorDetails.INTERNAL_EXCEPTION,
                              fatal: !1,
                              event: e,
                              err: t,
                            });
                        }
                      }),
                      e
                    );
                  })();
                !(function (e) {
                  (e.MANIFEST = "manifest"),
                    (e.LEVEL = "level"),
                    (e.AUDIO_TRACK = "audioTrack"),
                    (e.SUBTITLE_TRACK = "subtitleTrack");
                })(a || (a = {})),
                  (function (e) {
                    (e.MAIN = "main"),
                      (e.AUDIO = "audio"),
                      (e.SUBTITLE = "subtitle");
                  })(n || (n = {}));
                var f = r("./src/demux/mp4demuxer.js");
                function p(e, t) {
                  for (var r = 0; r < t.length; r++) {
                    var i = t[r];
                    (i.enumerable = i.enumerable || !1),
                      (i.configurable = !0),
                      "value" in i && (i.writable = !0),
                      Object.defineProperty(e, i.key, i);
                  }
                }
                var g,
                  v = (function () {
                    function e(e, t) {
                      (this._uri = null),
                        (this.baseuri = void 0),
                        (this.reluri = void 0),
                        (this.method = null),
                        (this.key = null),
                        (this.iv = null),
                        (this.baseuri = e),
                        (this.reluri = t);
                    }
                    var t, r, i;
                    return (
                      (t = e),
                      (r = [
                        {
                          key: "uri",
                          get: function () {
                            return (
                              !this._uri &&
                                this.reluri &&
                                (this._uri = Object(o.buildAbsoluteURL)(
                                  this.baseuri,
                                  this.reluri,
                                  {
                                    alwaysNormalize: !0,
                                  }
                                )),
                              this._uri
                            );
                          },
                        },
                      ]) && p(t.prototype, r),
                      i && p(t, i),
                      e
                    );
                  })();
                function y(e, t) {
                  for (var r = 0; r < t.length; r++) {
                    var i = t[r];
                    (i.enumerable = i.enumerable || !1),
                      (i.configurable = !0),
                      "value" in i && (i.writable = !0),
                      Object.defineProperty(e, i.key, i);
                  }
                }
                !(function (e) {
                  (e.AUDIO = "audio"), (e.VIDEO = "video");
                })(g || (g = {}));
                var m = (function () {
                  function e() {
                    var e;
                    (this._url = null),
                      (this._byteRange = null),
                      (this._decryptdata = null),
                      (this._elementaryStreams =
                        (((e = {})[g.AUDIO] = !1), (e[g.VIDEO] = !1), e)),
                      (this.deltaPTS = 0),
                      (this.rawProgramDateTime = null),
                      (this.programDateTime = null),
                      (this.title = null),
                      (this.tagList = []),
                      (this.cc = void 0),
                      (this.type = void 0),
                      (this.relurl = void 0),
                      (this.baseurl = void 0),
                      (this.duration = void 0),
                      (this.start = void 0),
                      (this.sn = 0),
                      (this.urlId = 0),
                      (this.level = 0),
                      (this.levelkey = void 0),
                      (this.loader = void 0);
                  }
                  var t,
                    r,
                    i,
                    a = e.prototype;
                  return (
                    (a.setByteRange = function (e, t) {
                      var r = e.split("@", 2),
                        i = [];
                      1 === r.length
                        ? (i[0] = t ? t.byteRangeEndOffset : 0)
                        : (i[0] = parseInt(r[1])),
                        (i[1] = parseInt(r[0]) + i[0]),
                        (this._byteRange = i);
                    }),
                    (a.addElementaryStream = function (e) {
                      this._elementaryStreams[e] = !0;
                    }),
                    (a.hasElementaryStream = function (e) {
                      return !0 === this._elementaryStreams[e];
                    }),
                    (a.createInitializationVector = function (e) {
                      for (var t = new Uint8Array(16), r = 12; r < 16; r++)
                        t[r] = (e >> (8 * (15 - r))) & 255;
                      return t;
                    }),
                    (a.setDecryptDataFromLevelKey = function (e, t) {
                      var r = e;
                      return (
                        (null == e ? void 0 : e.method) &&
                          e.uri &&
                          !e.iv &&
                          (((r = new v(e.baseuri, e.reluri)).method = e.method),
                          (r.iv = this.createInitializationVector(t))),
                        r
                      );
                    }),
                    (t = e),
                    (r = [
                      {
                        key: "url",
                        get: function () {
                          return (
                            !this._url &&
                              this.relurl &&
                              (this._url = Object(o.buildAbsoluteURL)(
                                this.baseurl,
                                this.relurl,
                                {
                                  alwaysNormalize: !0,
                                }
                              )),
                            this._url
                          );
                        },
                        set: function (e) {
                          this._url = e;
                        },
                      },
                      {
                        key: "byteRange",
                        get: function () {
                          return this._byteRange ? this._byteRange : [];
                        },
                      },
                      {
                        key: "byteRangeStartOffset",
                        get: function () {
                          return this.byteRange[0];
                        },
                      },
                      {
                        key: "byteRangeEndOffset",
                        get: function () {
                          return this.byteRange[1];
                        },
                      },
                      {
                        key: "decryptdata",
                        get: function () {
                          if (!this.levelkey && !this._decryptdata) return null;
                          if (!this._decryptdata && this.levelkey) {
                            var e = this.sn;
                            "number" != typeof e &&
                              (this.levelkey &&
                                "AES-128" === this.levelkey.method &&
                                !this.levelkey.iv &&
                                u.logger.warn(
                                  'missing IV for initialization segment with method="' +
                                    this.levelkey.method +
                                    '" - compliance issue'
                                ),
                              (e = 0)),
                              (this._decryptdata =
                                this.setDecryptDataFromLevelKey(
                                  this.levelkey,
                                  e
                                ));
                          }
                          return this._decryptdata;
                        },
                      },
                      {
                        key: "endProgramDateTime",
                        get: function () {
                          if (null === this.programDateTime) return null;
                          if (!Object(l.isFiniteNumber)(this.programDateTime))
                            return null;
                          var e = Object(l.isFiniteNumber)(this.duration)
                            ? this.duration
                            : 0;
                          return this.programDateTime + 1e3 * e;
                        },
                      },
                      {
                        key: "encrypted",
                        get: function () {
                          return !(
                            !this.decryptdata ||
                            null === this.decryptdata.uri ||
                            null !== this.decryptdata.key
                          );
                        },
                      },
                    ]) && y(t.prototype, r),
                    i && y(t, i),
                    e
                  );
                })();
                function b(e, t) {
                  for (var r = 0; r < t.length; r++) {
                    var i = t[r];
                    (i.enumerable = i.enumerable || !1),
                      (i.configurable = !0),
                      "value" in i && (i.writable = !0),
                      Object.defineProperty(e, i.key, i);
                  }
                }
                var _ = (function () {
                    function e(e) {
                      (this.endCC = 0),
                        (this.endSN = 0),
                        (this.fragments = []),
                        (this.initSegment = null),
                        (this.live = !0),
                        (this.needSidxRanges = !1),
                        (this.startCC = 0),
                        (this.startSN = 0),
                        (this.startTimeOffset = null),
                        (this.targetduration = 0),
                        (this.totalduration = 0),
                        (this.type = null),
                        (this.url = e),
                        (this.version = null);
                    }
                    var t, r, i;
                    return (
                      (t = e),
                      (r = [
                        {
                          key: "hasProgramDateTime",
                          get: function () {
                            return !(
                              !this.fragments[0] ||
                              !Object(l.isFiniteNumber)(
                                this.fragments[0].programDateTime
                              )
                            );
                          },
                        },
                      ]) && b(t.prototype, r),
                      i && b(t, i),
                      e
                    );
                  })(),
                  w = /^(\d+)x(\d+)$/,
                  T = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g,
                  E = (function () {
                    function e(t) {
                      for (var r in ("string" == typeof t &&
                        (t = e.parseAttrList(t)),
                      t))
                        t.hasOwnProperty(r) && (this[r] = t[r]);
                    }
                    var t = e.prototype;
                    return (
                      (t.decimalInteger = function (e) {
                        var t = parseInt(this[e], 10);
                        return t > Number.MAX_SAFE_INTEGER ? 1 / 0 : t;
                      }),
                      (t.hexadecimalInteger = function (e) {
                        if (this[e]) {
                          var t = (this[e] || "0x").slice(2);
                          t = (1 & t.length ? "0" : "") + t;
                          for (
                            var r = new Uint8Array(t.length / 2), i = 0;
                            i < t.length / 2;
                            i++
                          )
                            r[i] = parseInt(t.slice(2 * i, 2 * i + 2), 16);
                          return r;
                        }
                        return null;
                      }),
                      (t.hexadecimalIntegerAsNumber = function (e) {
                        var t = parseInt(this[e], 16);
                        return t > Number.MAX_SAFE_INTEGER ? 1 / 0 : t;
                      }),
                      (t.decimalFloatingPoint = function (e) {
                        return parseFloat(this[e]);
                      }),
                      (t.enumeratedString = function (e) {
                        return this[e];
                      }),
                      (t.decimalResolution = function (e) {
                        var t = w.exec(this[e]);
                        if (null !== t)
                          return {
                            width: parseInt(t[1], 10),
                            height: parseInt(t[2], 10),
                          };
                      }),
                      (e.parseAttrList = function (e) {
                        var t,
                          r = {};
                        for (T.lastIndex = 0; null !== (t = T.exec(e)); ) {
                          var i = t[2];
                          0 === i.indexOf('"') &&
                            i.lastIndexOf('"') === i.length - 1 &&
                            (i = i.slice(1, -1)),
                            (r[t[1]] = i);
                        }
                        return r;
                      }),
                      e
                    );
                  })(),
                  S = {
                    audio: {
                      a3ds: !0,
                      "ac-3": !0,
                      "ac-4": !0,
                      alac: !0,
                      alaw: !0,
                      dra1: !0,
                      "dts+": !0,
                      "dts-": !0,
                      dtsc: !0,
                      dtse: !0,
                      dtsh: !0,
                      "ec-3": !0,
                      enca: !0,
                      g719: !0,
                      g726: !0,
                      m4ae: !0,
                      mha1: !0,
                      mha2: !0,
                      mhm1: !0,
                      mhm2: !0,
                      mlpa: !0,
                      mp4a: !0,
                      "raw ": !0,
                      Opus: !0,
                      samr: !0,
                      sawb: !0,
                      sawp: !0,
                      sevc: !0,
                      sqcp: !0,
                      ssmv: !0,
                      twos: !0,
                      ulaw: !0,
                    },
                    video: {
                      avc1: !0,
                      avc2: !0,
                      avc3: !0,
                      avc4: !0,
                      avcp: !0,
                      drac: !0,
                      dvav: !0,
                      dvhe: !0,
                      encv: !0,
                      hev1: !0,
                      hvc1: !0,
                      mjp2: !0,
                      mp4v: !0,
                      mvc1: !0,
                      mvc2: !0,
                      mvc3: !0,
                      mvc4: !0,
                      resv: !0,
                      rv60: !0,
                      s263: !0,
                      svc1: !0,
                      svc2: !0,
                      "vc-1": !0,
                      vp08: !0,
                      vp09: !0,
                    },
                  };
                function k(e, t) {
                  return MediaSource.isTypeSupported(
                    (t || "video") + '/mp4;codecs="' + e + '"'
                  );
                }
                var x =
                    /(?:#EXT-X-STREAM-INF:([^\n\r]*)[\r\n]+([^\r\n]+)|#EXT-X-SESSION-DATA:([^\n\r]*)[\r\n]+)/g,
                  A = /#EXT-X-MEDIA:(.*)/g,
                  R = new RegExp(
                    [
                      /#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,
                      /|(?!#)([\S+ ?]+)/.source,
                      /|#EXT-X-BYTERANGE:*(.+)/.source,
                      /|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,
                      /|#.*/.source,
                    ].join(""),
                    "g"
                  ),
                  L =
                    /(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\d+))|(?:#EXT-X-(TARGETDURATION): *(\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)([^:]*):(.*))|(?:(#)(.*))(?:.*)\r?\n?/,
                  D = /\.(mp4|m4s|m4v|m4a)$/i,
                  C = (function () {
                    function e() {}
                    return (
                      (e.findGroup = function (e, t) {
                        for (var r = 0; r < e.length; r++) {
                          var i = e[r];
                          if (i.id === t) return i;
                        }
                      }),
                      (e.convertAVC1ToAVCOTI = function (e) {
                        var t,
                          r = e.split(".");
                        return (
                          r.length > 2
                            ? ((t = r.shift() + "."),
                              (t += parseInt(r.shift()).toString(16)),
                              (t += (
                                "000" + parseInt(r.shift()).toString(16)
                              ).substr(-4)))
                            : (t = e),
                          t
                        );
                      }),
                      (e.resolve = function (e, t) {
                        return o.buildAbsoluteURL(t, e, {
                          alwaysNormalize: !0,
                        });
                      }),
                      (e.parseMasterPlaylist = function (t, r) {
                        var i,
                          a = [],
                          n = {},
                          o = !1;
                        function s(e, t) {
                          ["video", "audio"].forEach(function (r) {
                            var i = e.filter(function (e) {
                              return (function (e, t) {
                                var r = S[t];
                                return !!r && !0 === r[e.slice(0, 4)];
                              })(e, r);
                            });
                            if (i.length) {
                              var a = i.filter(function (e) {
                                return (
                                  0 === e.lastIndexOf("avc1", 0) ||
                                  0 === e.lastIndexOf("mp4a", 0)
                                );
                              });
                              (t[r + "Codec"] = a.length > 0 ? a[0] : i[0]),
                                (e = e.filter(function (e) {
                                  return -1 === i.indexOf(e);
                                }));
                            }
                          }),
                            (t.unknownCodecs = e);
                        }
                        for (x.lastIndex = 0; null != (i = x.exec(t)); )
                          if (i[1]) {
                            var l = {},
                              d = (l.attrs = new E(i[1]));
                            l.url = e.resolve(i[2], r);
                            var u = d.decimalResolution("RESOLUTION");
                            u && ((l.width = u.width), (l.height = u.height)),
                              (l.bitrate =
                                d.decimalInteger("AVERAGE-BANDWIDTH") ||
                                d.decimalInteger("BANDWIDTH")),
                              (l.name = d.NAME),
                              s([].concat((d.CODECS || "").split(/[ ,]+/)), l),
                              l.videoCodec &&
                                -1 !== l.videoCodec.indexOf("avc1") &&
                                (l.videoCodec = e.convertAVC1ToAVCOTI(
                                  l.videoCodec
                                )),
                              a.push(l);
                          } else if (i[3]) {
                            var c = new E(i[3]);
                            c["DATA-ID"] && ((o = !0), (n[c["DATA-ID"]] = c));
                          }
                        return {
                          levels: a,
                          sessionData: o ? n : null,
                        };
                      }),
                      (e.parseMasterPlaylistMedia = function (t, r, i, a) {
                        var n;
                        void 0 === a && (a = []);
                        var o = [],
                          s = 0;
                        for (A.lastIndex = 0; null !== (n = A.exec(t)); ) {
                          var l = new E(n[1]);
                          if (l.TYPE === i) {
                            var d = {
                              attrs: l,
                              id: s++,
                              groupId: l["GROUP-ID"],
                              instreamId: l["INSTREAM-ID"],
                              name: l.NAME || l.LANGUAGE,
                              type: i,
                              default: "YES" === l.DEFAULT,
                              autoselect: "YES" === l.AUTOSELECT,
                              forced: "YES" === l.FORCED,
                              lang: l.LANGUAGE,
                            };
                            if (
                              (l.URI && (d.url = e.resolve(l.URI, r)), a.length)
                            ) {
                              var u = e.findGroup(a, d.groupId);
                              d.audioCodec = u ? u.codec : a[0].codec;
                            }
                            o.push(d);
                          }
                        }
                        return o;
                      }),
                      (e.parseLevelPlaylist = function (e, t, r, i, a) {
                        var n,
                          o,
                          s,
                          d = 0,
                          c = 0,
                          h = new _(t),
                          f = 0,
                          p = null,
                          g = new m(),
                          y = null;
                        for (R.lastIndex = 0; null !== (n = R.exec(e)); ) {
                          var b = n[1];
                          if (b) {
                            g.duration = parseFloat(b);
                            var w = (" " + n[2]).slice(1);
                            (g.title = w || null),
                              g.tagList.push(w ? ["INF", b, w] : ["INF", b]);
                          } else if (n[3]) {
                            if (Object(l.isFiniteNumber)(g.duration)) {
                              var T = d++;
                              (g.type = i),
                                (g.start = c),
                                s && (g.levelkey = s),
                                (g.sn = T),
                                (g.level = r),
                                (g.cc = f),
                                (g.urlId = a),
                                (g.baseurl = t),
                                (g.relurl = (" " + n[3]).slice(1)),
                                O(g, p),
                                h.fragments.push(g),
                                (p = g),
                                (c += g.duration),
                                (g = new m());
                            }
                          } else if (n[4]) {
                            var S = (" " + n[4]).slice(1);
                            p ? g.setByteRange(S, p) : g.setByteRange(S);
                          } else if (n[5])
                            (g.rawProgramDateTime = (" " + n[5]).slice(1)),
                              g.tagList.push([
                                "PROGRAM-DATE-TIME",
                                g.rawProgramDateTime,
                              ]),
                              null === y && (y = h.fragments.length);
                          else {
                            if (!(n = n[0].match(L))) {
                              u.logger.warn(
                                "No matches on slow regex match for level playlist!"
                              );
                              continue;
                            }
                            for (o = 1; o < n.length && void 0 === n[o]; o++);
                            var k = (" " + n[o + 1]).slice(1),
                              x = (" " + n[o + 2]).slice(1);
                            switch (n[o]) {
                              case "#":
                                g.tagList.push(x ? [k, x] : [k]);
                                break;
                              case "PLAYLIST-TYPE":
                                h.type = k.toUpperCase();
                                break;
                              case "MEDIA-SEQUENCE":
                                d = h.startSN = parseInt(k);
                                break;
                              case "TARGETDURATION":
                                h.targetduration = parseFloat(k);
                                break;
                              case "VERSION":
                                h.version = parseInt(k);
                                break;
                              case "EXTM3U":
                                break;
                              case "ENDLIST":
                                h.live = !1;
                                break;
                              case "DIS":
                                f++, g.tagList.push(["DIS"]);
                                break;
                              case "DISCONTINUITY-SEQ":
                                f = parseInt(k);
                                break;
                              case "KEY":
                                var A = new E(k),
                                  C = A.enumeratedString("METHOD"),
                                  I = A.URI,
                                  P = A.hexadecimalInteger("IV");
                                if (
                                  "com.apple.streamingkeydelivery" ===
                                  (A.KEYFORMAT || "identity")
                                ) {
                                  u.logger.warn(
                                    "Keyformat com.apple.streamingkeydelivery is not supported"
                                  );
                                  continue;
                                }
                                C &&
                                  ((s = new v(t, I)),
                                  I &&
                                    [
                                      "AES-128",
                                      "SAMPLE-AES",
                                      "SAMPLE-AES-CENC",
                                    ].indexOf(C) >= 0 &&
                                    ((s.method = C),
                                    (s.key = null),
                                    (s.iv = P)));
                                break;
                              case "START":
                                var F = new E(k).decimalFloatingPoint(
                                  "TIME-OFFSET"
                                );
                                Object(l.isFiniteNumber)(F) &&
                                  (h.startTimeOffset = F);
                                break;
                              case "MAP":
                                var M = new E(k);
                                (g.relurl = M.URI),
                                  M.BYTERANGE && g.setByteRange(M.BYTERANGE),
                                  (g.baseurl = t),
                                  (g.level = r),
                                  (g.type = i),
                                  (g.sn = "initSegment"),
                                  (h.initSegment = g),
                                  ((g = new m()).rawProgramDateTime =
                                    h.initSegment.rawProgramDateTime);
                                break;
                              default:
                                u.logger.warn(
                                  "line parsed but not handled: " + n
                                );
                            }
                          }
                        }
                        return (
                          (g = p) &&
                            !g.relurl &&
                            (h.fragments.pop(), (c -= g.duration)),
                          (h.totalduration = c),
                          (h.averagetargetduration = c / h.fragments.length),
                          (h.endSN = d - 1),
                          (h.startCC = h.fragments[0] ? h.fragments[0].cc : 0),
                          (h.endCC = f),
                          !h.initSegment &&
                            h.fragments.length &&
                            h.fragments.every(function (e) {
                              return D.test(e.relurl);
                            }) &&
                            (u.logger.warn(
                              "MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX"
                            ),
                            ((g = new m()).relurl = h.fragments[0].relurl),
                            (g.baseurl = t),
                            (g.level = r),
                            (g.type = i),
                            (g.sn = "initSegment"),
                            (h.initSegment = g),
                            (h.needSidxRanges = !0)),
                          y &&
                            (function (e, t) {
                              for (var r = e[t], i = t - 1; i >= 0; i--) {
                                var a = e[i];
                                (a.programDateTime =
                                  r.programDateTime - 1e3 * a.duration),
                                  (r = a);
                              }
                            })(h.fragments, y),
                          h
                        );
                      }),
                      e
                    );
                  })();
                function O(e, t) {
                  e.rawProgramDateTime
                    ? (e.programDateTime = Date.parse(e.rawProgramDateTime))
                    : (null == t ? void 0 : t.programDateTime) &&
                      (e.programDateTime = t.endProgramDateTime),
                    Object(l.isFiniteNumber)(e.programDateTime) ||
                      ((e.programDateTime = null),
                      (e.rawProgramDateTime = null));
                }
                var I = window.performance,
                  P = (function (e) {
                    var t, r;
                    function i(t) {
                      var r;
                      return (
                        ((r =
                          e.call(
                            this,
                            t,
                            d.default.MANIFEST_LOADING,
                            d.default.LEVEL_LOADING,
                            d.default.AUDIO_TRACK_LOADING,
                            d.default.SUBTITLE_TRACK_LOADING
                          ) || this).loaders = {}),
                        r
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r),
                      (i.canHaveQualityLevels = function (e) {
                        return e !== a.AUDIO_TRACK && e !== a.SUBTITLE_TRACK;
                      }),
                      (i.mapContextToLevelType = function (e) {
                        switch (e.type) {
                          case a.AUDIO_TRACK:
                            return n.AUDIO;
                          case a.SUBTITLE_TRACK:
                            return n.SUBTITLE;
                          default:
                            return n.MAIN;
                        }
                      }),
                      (i.getResponseUrl = function (e, t) {
                        var r = e.url;
                        return (
                          (void 0 !== r && 0 !== r.indexOf("data:")) ||
                            (r = t.url),
                          r
                        );
                      });
                    var o = i.prototype;
                    return (
                      (o.createInternalLoader = function (e) {
                        var t = this.hls.config,
                          r = t.pLoader,
                          i = t.loader,
                          a = new (r || i)(t);
                        return (e.loader = a), (this.loaders[e.type] = a), a;
                      }),
                      (o.getInternalLoader = function (e) {
                        return this.loaders[e.type];
                      }),
                      (o.resetInternalLoader = function (e) {
                        this.loaders[e] && delete this.loaders[e];
                      }),
                      (o.destroyInternalLoaders = function () {
                        for (var e in this.loaders) {
                          var t = this.loaders[e];
                          t && t.destroy(), this.resetInternalLoader(e);
                        }
                      }),
                      (o.destroy = function () {
                        this.destroyInternalLoaders(),
                          e.prototype.destroy.call(this);
                      }),
                      (o.onManifestLoading = function (e) {
                        this.load({
                          url: e.url,
                          type: a.MANIFEST,
                          level: 0,
                          id: null,
                          responseType: "text",
                        });
                      }),
                      (o.onLevelLoading = function (e) {
                        this.load({
                          url: e.url,
                          type: a.LEVEL,
                          level: e.level,
                          id: e.id,
                          responseType: "text",
                        });
                      }),
                      (o.onAudioTrackLoading = function (e) {
                        this.load({
                          url: e.url,
                          type: a.AUDIO_TRACK,
                          level: null,
                          id: e.id,
                          responseType: "text",
                        });
                      }),
                      (o.onSubtitleTrackLoading = function (e) {
                        this.load({
                          url: e.url,
                          type: a.SUBTITLE_TRACK,
                          level: null,
                          id: e.id,
                          responseType: "text",
                        });
                      }),
                      (o.load = function (e) {
                        var t = this.hls.config;
                        u.logger.debug(
                          "Loading playlist of type " +
                            e.type +
                            ", level: " +
                            e.level +
                            ", id: " +
                            e.id
                        );
                        var r,
                          i,
                          n,
                          o,
                          s = this.getInternalLoader(e);
                        if (s) {
                          var l = s.context;
                          if (l && l.url === e.url)
                            return (
                              u.logger.trace("playlist request ongoing"), !1
                            );
                          u.logger.warn(
                            "aborting previous loader for type: " + e.type
                          ),
                            s.abort();
                        }
                        switch (e.type) {
                          case a.MANIFEST:
                            (r = t.manifestLoadingMaxRetry),
                              (i = t.manifestLoadingTimeOut),
                              (n = t.manifestLoadingRetryDelay),
                              (o = t.manifestLoadingMaxRetryTimeout);
                            break;
                          case a.LEVEL:
                            (r = 0),
                              (o = 0),
                              (n = 0),
                              (i = t.levelLoadingTimeOut);
                            break;
                          default:
                            (r = t.levelLoadingMaxRetry),
                              (i = t.levelLoadingTimeOut),
                              (n = t.levelLoadingRetryDelay),
                              (o = t.levelLoadingMaxRetryTimeout);
                        }
                        s = this.createInternalLoader(e);
                        var d = {
                            timeout: i,
                            maxRetry: r,
                            retryDelay: n,
                            maxRetryDelay: o,
                          },
                          c = {
                            onSuccess: this.loadsuccess.bind(this),
                            onError: this.loaderror.bind(this),
                            onTimeout: this.loadtimeout.bind(this),
                          };
                        return (
                          u.logger.debug(
                            "Calling internal loader delegate for URL: " + e.url
                          ),
                          s.load(e, d, c),
                          !0
                        );
                      }),
                      (o.loadsuccess = function (e, t, r, i) {
                        if ((void 0 === i && (i = null), r.isSidxRequest))
                          return (
                            this._handleSidxRequest(e, r),
                            void this._handlePlaylistLoaded(e, t, r, i)
                          );
                        if (
                          (this.resetInternalLoader(r.type),
                          "string" != typeof e.data)
                        )
                          throw new Error(
                            'expected responseType of "text" for PlaylistLoader'
                          );
                        var a = e.data;
                        (t.tload = I.now()),
                          0 === a.indexOf("#EXTM3U")
                            ? a.indexOf("#EXTINF:") > 0 ||
                              a.indexOf("#EXT-X-TARGETDURATION:") > 0
                              ? this._handleTrackOrLevelPlaylist(e, t, r, i)
                              : this._handleMasterPlaylist(e, t, r, i)
                            : this._handleManifestParsingError(
                                e,
                                r,
                                "no EXTM3U delimiter",
                                i
                              );
                      }),
                      (o.loaderror = function (e, t, r) {
                        void 0 === r && (r = null),
                          this._handleNetworkError(t, r, !1, e);
                      }),
                      (o.loadtimeout = function (e, t, r) {
                        void 0 === r && (r = null),
                          this._handleNetworkError(t, r, !0);
                      }),
                      (o._handleMasterPlaylist = function (e, t, r, a) {
                        var n = this.hls,
                          o = e.data,
                          s = i.getResponseUrl(e, r),
                          l = C.parseMasterPlaylist(o, s),
                          c = l.levels,
                          h = l.sessionData;
                        if (c.length) {
                          var f = c.map(function (e) {
                              return {
                                id: e.attrs.AUDIO,
                                codec: e.audioCodec,
                              };
                            }),
                            p = C.parseMasterPlaylistMedia(o, s, "AUDIO", f),
                            g = C.parseMasterPlaylistMedia(o, s, "SUBTITLES"),
                            v = C.parseMasterPlaylistMedia(
                              o,
                              s,
                              "CLOSED-CAPTIONS"
                            );
                          if (p.length) {
                            var y = !1;
                            p.forEach(function (e) {
                              e.url || (y = !0);
                            }),
                              !1 === y &&
                                c[0].audioCodec &&
                                !c[0].attrs.AUDIO &&
                                (u.logger.log(
                                  "audio codec signaled in quality level, but no embedded audio track signaled, create one"
                                ),
                                p.unshift({
                                  type: "main",
                                  name: "main",
                                  default: !1,
                                  autoselect: !1,
                                  forced: !1,
                                  id: -1,
                                  attrs: {},
                                  url: "",
                                }));
                          }
                          n.trigger(d.default.MANIFEST_LOADED, {
                            levels: c,
                            audioTracks: p,
                            subtitles: g,
                            captions: v,
                            url: s,
                            stats: t,
                            networkDetails: a,
                            sessionData: h,
                          });
                        } else
                          this._handleManifestParsingError(
                            e,
                            r,
                            "no level found in manifest",
                            a
                          );
                      }),
                      (o._handleTrackOrLevelPlaylist = function (e, t, r, n) {
                        var o = this.hls,
                          u = r.id,
                          c = r.level,
                          h = r.type,
                          f = i.getResponseUrl(e, r),
                          p = Object(l.isFiniteNumber)(u) ? u : 0,
                          g = Object(l.isFiniteNumber)(c) ? c : p,
                          v = i.mapContextToLevelType(r),
                          y = C.parseLevelPlaylist(e.data, f, g, v, p);
                        if (((y.tload = t.tload), y.fragments.length)) {
                          if (h === a.MANIFEST) {
                            var m = {
                              url: f,
                              details: y,
                            };
                            o.trigger(d.default.MANIFEST_LOADED, {
                              levels: [m],
                              audioTracks: [],
                              url: f,
                              stats: t,
                              networkDetails: n,
                              sessionData: null,
                            });
                          }
                          if (((t.tparsed = I.now()), y.needSidxRanges)) {
                            var b = y.initSegment.url;
                            this.load({
                              url: b,
                              isSidxRequest: !0,
                              type: h,
                              level: c,
                              levelDetails: y,
                              id: u,
                              rangeStart: 0,
                              rangeEnd: 2048,
                              responseType: "arraybuffer",
                            });
                          } else
                            (r.levelDetails = y),
                              this._handlePlaylistLoaded(e, t, r, n);
                        } else
                          o.trigger(d.default.ERROR, {
                            type: s.ErrorTypes.NETWORK_ERROR,
                            details: s.ErrorDetails.LEVEL_EMPTY_ERROR,
                            fatal: !1,
                            url: f,
                            reason: "no fragments found in level",
                            level:
                              "number" == typeof r.level ? r.level : void 0,
                          });
                      }),
                      (o._handleSidxRequest = function (e, t) {
                        if ("string" == typeof e.data)
                          throw new Error(
                            "sidx request must be made with responseType of array buffer"
                          );
                        var r = f.default.parseSegmentIndex(
                          new Uint8Array(e.data)
                        );
                        if (r) {
                          var i = r.references,
                            a = t.levelDetails;
                          i.forEach(function (e, t) {
                            var r = e.info;
                            if (a) {
                              var i = a.fragments[t];
                              0 === i.byteRange.length &&
                                i.setByteRange(
                                  String(1 + r.end - r.start) +
                                    "@" +
                                    String(r.start)
                                );
                            }
                          }),
                            a &&
                              a.initSegment.setByteRange(
                                String(r.moovEndOffset) + "@0"
                              );
                        }
                      }),
                      (o._handleManifestParsingError = function (e, t, r, i) {
                        this.hls.trigger(d.default.ERROR, {
                          type: s.ErrorTypes.NETWORK_ERROR,
                          details: s.ErrorDetails.MANIFEST_PARSING_ERROR,
                          fatal: !0,
                          url: e.url,
                          reason: r,
                          networkDetails: i,
                        });
                      }),
                      (o._handleNetworkError = function (e, t, r, i) {
                        var n, o;
                        void 0 === r && (r = !1),
                          void 0 === i && (i = null),
                          u.logger.info(
                            "A network error occured while loading a " +
                              e.type +
                              "-type playlist"
                          );
                        var l = this.getInternalLoader(e);
                        switch (e.type) {
                          case a.MANIFEST:
                            (n = r
                              ? s.ErrorDetails.MANIFEST_LOAD_TIMEOUT
                              : s.ErrorDetails.MANIFEST_LOAD_ERROR),
                              (o = !0);
                            break;
                          case a.LEVEL:
                            (n = r
                              ? s.ErrorDetails.LEVEL_LOAD_TIMEOUT
                              : s.ErrorDetails.LEVEL_LOAD_ERROR),
                              (o = !1);
                            break;
                          case a.AUDIO_TRACK:
                            (n = r
                              ? s.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT
                              : s.ErrorDetails.AUDIO_TRACK_LOAD_ERROR),
                              (o = !1);
                            break;
                          default:
                            o = !1;
                        }
                        l && (l.abort(), this.resetInternalLoader(e.type));
                        var c = {
                          type: s.ErrorTypes.NETWORK_ERROR,
                          details: n,
                          fatal: o,
                          url: e.url,
                          loader: l,
                          context: e,
                          networkDetails: t,
                        };
                        i && (c.response = i),
                          this.hls.trigger(d.default.ERROR, c);
                      }),
                      (o._handlePlaylistLoaded = function (e, t, r, n) {
                        var o = r.type,
                          s = r.level,
                          l = r.id,
                          u = r.levelDetails;
                        if (u && u.targetduration)
                          if (i.canHaveQualityLevels(r.type))
                            this.hls.trigger(d.default.LEVEL_LOADED, {
                              details: u,
                              level: s || 0,
                              id: l || 0,
                              stats: t,
                              networkDetails: n,
                            });
                          else
                            switch (o) {
                              case a.AUDIO_TRACK:
                                this.hls.trigger(d.default.AUDIO_TRACK_LOADED, {
                                  details: u,
                                  id: l,
                                  stats: t,
                                  networkDetails: n,
                                });
                                break;
                              case a.SUBTITLE_TRACK:
                                this.hls.trigger(
                                  d.default.SUBTITLE_TRACK_LOADED,
                                  {
                                    details: u,
                                    id: l,
                                    stats: t,
                                    networkDetails: n,
                                  }
                                );
                            }
                        else
                          this._handleManifestParsingError(
                            e,
                            r,
                            "invalid target duration",
                            n
                          );
                      }),
                      i
                    );
                  })(h),
                  F = (function (e) {
                    var t, r;
                    function i(t) {
                      var r;
                      return (
                        ((r =
                          e.call(this, t, d.default.FRAG_LOADING) ||
                          this).loaders = {}),
                        r
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a = i.prototype;
                    return (
                      (a.destroy = function () {
                        var t = this.loaders;
                        for (var r in t) {
                          var i = t[r];
                          i && i.destroy();
                        }
                        (this.loaders = {}), e.prototype.destroy.call(this);
                      }),
                      (a.onFragLoading = function (e) {
                        var t = e.frag,
                          r = t.type,
                          i = this.loaders,
                          a = this.hls.config,
                          n = a.fLoader,
                          o = a.loader;
                        t.loaded = 0;
                        var s,
                          d,
                          c,
                          h = i[r];
                        h &&
                          (u.logger.warn(
                            "abort previous fragment loader for type: " + r
                          ),
                          h.abort()),
                          (h =
                            i[r] =
                            t.loader =
                              a.fLoader ? new n(a) : new o(a)),
                          (s = {
                            url: t.url,
                            frag: t,
                            responseType: "arraybuffer",
                            progressData: !1,
                          });
                        var f = t.byteRangeStartOffset,
                          p = t.byteRangeEndOffset;
                        Object(l.isFiniteNumber)(f) &&
                          Object(l.isFiniteNumber)(p) &&
                          ((s.rangeStart = f), (s.rangeEnd = p)),
                          (d = {
                            timeout: a.fragLoadingTimeOut,
                            maxRetry: 0,
                            retryDelay: 0,
                            maxRetryDelay: a.fragLoadingMaxRetryTimeout,
                          }),
                          (c = {
                            onSuccess: this.loadsuccess.bind(this),
                            onError: this.loaderror.bind(this),
                            onTimeout: this.loadtimeout.bind(this),
                            onProgress: this.loadprogress.bind(this),
                          }),
                          h.load(s, d, c);
                      }),
                      (a.loadsuccess = function (e, t, r, i) {
                        void 0 === i && (i = null);
                        var a = e.data,
                          n = r.frag;
                        (n.loader = void 0),
                          (this.loaders[n.type] = void 0),
                          this.hls.trigger(d.default.FRAG_LOADED, {
                            payload: a,
                            frag: n,
                            stats: t,
                            networkDetails: i,
                          });
                      }),
                      (a.loaderror = function (e, t, r) {
                        void 0 === r && (r = null);
                        var i = t.frag,
                          a = i.loader;
                        a && a.abort(),
                          (this.loaders[i.type] = void 0),
                          this.hls.trigger(d.default.ERROR, {
                            type: s.ErrorTypes.NETWORK_ERROR,
                            details: s.ErrorDetails.FRAG_LOAD_ERROR,
                            fatal: !1,
                            frag: t.frag,
                            response: e,
                            networkDetails: r,
                          });
                      }),
                      (a.loadtimeout = function (e, t, r) {
                        void 0 === r && (r = null);
                        var i = t.frag,
                          a = i.loader;
                        a && a.abort(),
                          (this.loaders[i.type] = void 0),
                          this.hls.trigger(d.default.ERROR, {
                            type: s.ErrorTypes.NETWORK_ERROR,
                            details: s.ErrorDetails.FRAG_LOAD_TIMEOUT,
                            fatal: !1,
                            frag: t.frag,
                            networkDetails: r,
                          });
                      }),
                      (a.loadprogress = function (e, t, r, i) {
                        void 0 === i && (i = null);
                        var a = t.frag;
                        (a.loaded = e.loaded),
                          this.hls.trigger(d.default.FRAG_LOAD_PROGRESS, {
                            frag: a,
                            stats: e,
                            networkDetails: i,
                          });
                      }),
                      i
                    );
                  })(h),
                  M = (function (e) {
                    var t, r;
                    function i(t) {
                      var r;
                      return (
                        ((r =
                          e.call(this, t, d.default.KEY_LOADING) ||
                          this).loaders = {}),
                        (r.decryptkey = null),
                        (r.decrypturl = null),
                        r
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a = i.prototype;
                    return (
                      (a.destroy = function () {
                        for (var t in this.loaders) {
                          var r = this.loaders[t];
                          r && r.destroy();
                        }
                        (this.loaders = {}), e.prototype.destroy.call(this);
                      }),
                      (a.onKeyLoading = function (e) {
                        var t = e.frag,
                          r = t.type,
                          i = this.loaders[r];
                        if (t.decryptdata) {
                          var a = t.decryptdata.uri;
                          if (
                            a !== this.decrypturl ||
                            null === this.decryptkey
                          ) {
                            var n = this.hls.config;
                            if (
                              (i &&
                                (u.logger.warn(
                                  "abort previous key loader for type:" + r
                                ),
                                i.abort()),
                              !a)
                            )
                              return void u.logger.warn("key uri is falsy");
                            (t.loader = this.loaders[r] = new n.loader(n)),
                              (this.decrypturl = a),
                              (this.decryptkey = null);
                            var o = {
                                url: a,
                                frag: t,
                                responseType: "arraybuffer",
                              },
                              s = {
                                timeout: n.fragLoadingTimeOut,
                                maxRetry: 0,
                                retryDelay: n.fragLoadingRetryDelay,
                                maxRetryDelay: n.fragLoadingMaxRetryTimeout,
                              },
                              l = {
                                onSuccess: this.loadsuccess.bind(this),
                                onError: this.loaderror.bind(this),
                                onTimeout: this.loadtimeout.bind(this),
                              };
                            t.loader.load(o, s, l);
                          } else
                            this.decryptkey &&
                              ((t.decryptdata.key = this.decryptkey),
                              this.hls.trigger(d.default.KEY_LOADED, {
                                frag: t,
                              }));
                        } else
                          u.logger.warn(
                            "Missing decryption data on fragment in onKeyLoading"
                          );
                      }),
                      (a.loadsuccess = function (e, t, r) {
                        var i = r.frag;
                        i.decryptdata
                          ? ((this.decryptkey = i.decryptdata.key =
                              new Uint8Array(e.data)),
                            (i.loader = void 0),
                            delete this.loaders[i.type],
                            this.hls.trigger(d.default.KEY_LOADED, {
                              frag: i,
                            }))
                          : u.logger.error("after key load, decryptdata unset");
                      }),
                      (a.loaderror = function (e, t) {
                        var r = t.frag,
                          i = r.loader;
                        i && i.abort(),
                          delete this.loaders[r.type],
                          this.hls.trigger(d.default.ERROR, {
                            type: s.ErrorTypes.NETWORK_ERROR,
                            details: s.ErrorDetails.KEY_LOAD_ERROR,
                            fatal: !1,
                            frag: r,
                            response: e,
                          });
                      }),
                      (a.loadtimeout = function (e, t) {
                        var r = t.frag,
                          i = r.loader;
                        i && i.abort(),
                          delete this.loaders[r.type],
                          this.hls.trigger(d.default.ERROR, {
                            type: s.ErrorTypes.NETWORK_ERROR,
                            details: s.ErrorDetails.KEY_LOAD_TIMEOUT,
                            fatal: !1,
                            frag: r,
                          });
                      }),
                      i
                    );
                  })(h),
                  B = "NOT_LOADED",
                  N = "APPENDING",
                  U = "PARTIAL",
                  H = "OK",
                  j = (function (e) {
                    var t, r;
                    function i(t) {
                      var r;
                      return (
                        ((r =
                          e.call(
                            this,
                            t,
                            d.default.BUFFER_APPENDED,
                            d.default.FRAG_BUFFERED,
                            d.default.FRAG_LOADED
                          ) || this).bufferPadding = 0.2),
                        (r.fragments = Object.create(null)),
                        (r.timeRanges = Object.create(null)),
                        (r.config = t.config),
                        r
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a = i.prototype;
                    return (
                      (a.destroy = function () {
                        (this.fragments = Object.create(null)),
                          (this.timeRanges = Object.create(null)),
                          (this.config = null),
                          h.prototype.destroy.call(this),
                          e.prototype.destroy.call(this);
                      }),
                      (a.getBufferedFrag = function (e, t) {
                        var r = this.fragments,
                          i = Object.keys(r).filter(function (i) {
                            var a = r[i];
                            if (a.body.type !== t) return !1;
                            if (!a.buffered) return !1;
                            var n = a.body;
                            return n.startPTS <= e && e <= n.endPTS;
                          });
                        if (0 === i.length) return null;
                        var a = i.pop();
                        return r[a].body;
                      }),
                      (a.detectEvictedFragments = function (e, t) {
                        var r = this;
                        Object.keys(this.fragments).forEach(function (i) {
                          var a = r.fragments[i];
                          if (a && a.buffered) {
                            var n = a.range[e];
                            if (n)
                              for (var o = n.time, s = 0; s < o.length; s++) {
                                var l = o[s];
                                if (
                                  !r.isTimeBuffered(l.startPTS, l.endPTS, t)
                                ) {
                                  r.removeFragment(a.body);
                                  break;
                                }
                              }
                          }
                        });
                      }),
                      (a.detectPartialFragments = function (e) {
                        var t = this,
                          r = this.getFragmentKey(e),
                          i = this.fragments[r];
                        i &&
                          ((i.buffered = !0),
                          Object.keys(this.timeRanges).forEach(function (r) {
                            if (e.hasElementaryStream(r)) {
                              var a = t.timeRanges[r];
                              i.range[r] = t.getBufferedTimes(
                                e.startPTS,
                                e.endPTS,
                                a
                              );
                            }
                          }));
                      }),
                      (a.getBufferedTimes = function (e, t, r) {
                        for (
                          var i, a, n = [], o = !1, s = 0;
                          s < r.length;
                          s++
                        ) {
                          if (
                            ((i = r.start(s) - this.bufferPadding),
                            (a = r.end(s) + this.bufferPadding),
                            e >= i && t <= a)
                          ) {
                            n.push({
                              startPTS: Math.max(e, r.start(s)),
                              endPTS: Math.min(t, r.end(s)),
                            });
                            break;
                          }
                          if (e < a && t > i)
                            n.push({
                              startPTS: Math.max(e, r.start(s)),
                              endPTS: Math.min(t, r.end(s)),
                            }),
                              (o = !0);
                          else if (t <= i) break;
                        }
                        return {
                          time: n,
                          partial: o,
                        };
                      }),
                      (a.getFragmentKey = function (e) {
                        return (
                          e.type + "_" + e.level + "_" + e.urlId + "_" + e.sn
                        );
                      }),
                      (a.getPartialFragment = function (e) {
                        var t,
                          r,
                          i,
                          a = this,
                          n = null,
                          o = 0;
                        return (
                          Object.keys(this.fragments).forEach(function (s) {
                            var l = a.fragments[s];
                            a.isPartial(l) &&
                              ((r = l.body.startPTS - a.bufferPadding),
                              (i = l.body.endPTS + a.bufferPadding),
                              e >= r &&
                                e <= i &&
                                ((t = Math.min(e - r, i - e)),
                                o <= t && ((n = l.body), (o = t))));
                          }),
                          n
                        );
                      }),
                      (a.getState = function (e) {
                        var t = this.getFragmentKey(e),
                          r = this.fragments[t],
                          i = B;
                        return (
                          void 0 !== r &&
                            (i = r.buffered
                              ? !0 === this.isPartial(r)
                                ? U
                                : H
                              : N),
                          i
                        );
                      }),
                      (a.isPartial = function (e) {
                        return (
                          !0 === e.buffered &&
                          ((void 0 !== e.range.video &&
                            !0 === e.range.video.partial) ||
                            (void 0 !== e.range.audio &&
                              !0 === e.range.audio.partial))
                        );
                      }),
                      (a.isTimeBuffered = function (e, t, r) {
                        for (var i, a, n = 0; n < r.length; n++) {
                          if (
                            ((i = r.start(n) - this.bufferPadding),
                            (a = r.end(n) + this.bufferPadding),
                            e >= i && t <= a)
                          )
                            return !0;
                          if (t <= i) return !1;
                        }
                        return !1;
                      }),
                      (a.onFragLoaded = function (e) {
                        var t = e.frag;
                        Object(l.isFiniteNumber)(t.sn) &&
                          !t.bitrateTest &&
                          (this.fragments[this.getFragmentKey(t)] = {
                            body: t,
                            range: Object.create(null),
                            buffered: !1,
                          });
                      }),
                      (a.onBufferAppended = function (e) {
                        var t = this;
                        (this.timeRanges = e.timeRanges),
                          Object.keys(this.timeRanges).forEach(function (e) {
                            var r = t.timeRanges[e];
                            t.detectEvictedFragments(e, r);
                          });
                      }),
                      (a.onFragBuffered = function (e) {
                        this.detectPartialFragments(e.frag);
                      }),
                      (a.hasFragment = function (e) {
                        var t = this.getFragmentKey(e);
                        return void 0 !== this.fragments[t];
                      }),
                      (a.removeFragment = function (e) {
                        var t = this.getFragmentKey(e);
                        delete this.fragments[t];
                      }),
                      (a.removeAllFragments = function () {
                        this.fragments = Object.create(null);
                      }),
                      i
                    );
                  })(h),
                  G = {
                    search: function (e, t) {
                      for (
                        var r = 0, i = e.length - 1, a = null, n = null;
                        r <= i;

                      ) {
                        var o = t((n = e[(a = ((r + i) / 2) | 0)]));
                        if (o > 0) r = a + 1;
                        else {
                          if (!(o < 0)) return n;
                          i = a - 1;
                        }
                      }
                      return null;
                    },
                  },
                  z = (function () {
                    function e() {}
                    return (
                      (e.isBuffered = function (e, t) {
                        try {
                          if (e)
                            for (var r = e.buffered, i = 0; i < r.length; i++)
                              if (t >= r.start(i) && t <= r.end(i)) return !0;
                        } catch (e) {}
                        return !1;
                      }),
                      (e.bufferInfo = function (e, t, r) {
                        try {
                          if (e) {
                            var i,
                              a = e.buffered,
                              n = [];
                            for (i = 0; i < a.length; i++)
                              n.push({
                                start: a.start(i),
                                end: a.end(i),
                              });
                            return this.bufferedInfo(n, t, r);
                          }
                        } catch (e) {}
                        return {
                          len: 0,
                          start: t,
                          end: t,
                          nextStart: void 0,
                        };
                      }),
                      (e.bufferedInfo = function (e, t, r) {
                        e.sort(function (e, t) {
                          var r = e.start - t.start;
                          return r || t.end - e.end;
                        });
                        var i = [];
                        if (r)
                          for (var a = 0; a < e.length; a++) {
                            var n = i.length;
                            if (n) {
                              var o = i[n - 1].end;
                              e[a].start - o < r
                                ? e[a].end > o && (i[n - 1].end = e[a].end)
                                : i.push(e[a]);
                            } else i.push(e[a]);
                          }
                        else i = e;
                        for (
                          var s, l = 0, d = t, u = t, c = 0;
                          c < i.length;
                          c++
                        ) {
                          var h = i[c].start,
                            f = i[c].end;
                          if (t + r >= h && t < f) (d = h), (l = (u = f) - t);
                          else if (t + r < h) {
                            s = h;
                            break;
                          }
                        }
                        return {
                          len: l,
                          start: d,
                          end: u,
                          nextStart: s,
                        };
                      }),
                      e
                    );
                  })(),
                  Y = r("./node_modules/eventemitter3/index.js"),
                  K = r("./node_modules/webworkify-webpack/index.js"),
                  V = r("./src/demux/demuxer-inline.js");
                function q() {
                  return window.MediaSource || window.WebKitMediaSource;
                }
                var W = r("./src/utils/get-self-scope.js"),
                  X = (function (e) {
                    var t, r;
                    function i() {
                      return e.apply(this, arguments) || this;
                    }
                    return (
                      (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r),
                      (i.prototype.trigger = function (e) {
                        for (
                          var t = arguments.length,
                            r = new Array(t > 1 ? t - 1 : 0),
                            i = 1;
                          i < t;
                          i++
                        )
                          r[i - 1] = arguments[i];
                        this.emit.apply(this, [e, e].concat(r));
                      }),
                      i
                    );
                  })(Y.EventEmitter),
                  Q = Object(W.getSelfScope)(),
                  Z = q() || {
                    isTypeSupported: function () {
                      return !1;
                    },
                  },
                  J = (function () {
                    function e(e, t) {
                      var r = this;
                      (this.hls = e), (this.id = t);
                      var i = (this.observer = new X()),
                        a = e.config,
                        n = function (t, i) {
                          ((i = i || {}).frag = r.frag),
                            (i.id = r.id),
                            e.trigger(t, i);
                        };
                      i.on(d.default.FRAG_DECRYPTED, n),
                        i.on(d.default.FRAG_PARSING_INIT_SEGMENT, n),
                        i.on(d.default.FRAG_PARSING_DATA, n),
                        i.on(d.default.FRAG_PARSED, n),
                        i.on(d.default.ERROR, n),
                        i.on(d.default.FRAG_PARSING_METADATA, n),
                        i.on(d.default.FRAG_PARSING_USERDATA, n),
                        i.on(d.default.INIT_PTS_FOUND, n);
                      var o = {
                          mp4: Z.isTypeSupported("video/mp4"),
                          mpeg: Z.isTypeSupported("audio/mpeg"),
                          mp3: Z.isTypeSupported('audio/mp4; codecs="mp3"'),
                        },
                        l = navigator.vendor;
                      if (a.enableWorker && "undefined" != typeof Worker) {
                        var c;
                        u.logger.log("demuxing in webworker");
                        try {
                          (c = this.w =
                            K(
                              /*! ../demux/demuxer-worker.js */
                              "./src/demux/demuxer-worker.js"
                            )),
                            (this.onwmsg = this.onWorkerMessage.bind(this)),
                            c.addEventListener("message", this.onwmsg),
                            (c.onerror = function (t) {
                              e.trigger(d.default.ERROR, {
                                type: s.ErrorTypes.OTHER_ERROR,
                                details: s.ErrorDetails.INTERNAL_EXCEPTION,
                                fatal: !0,
                                event: "demuxerWorker",
                                err: {
                                  message:
                                    t.message +
                                    " (" +
                                    t.filename +
                                    ":" +
                                    t.lineno +
                                    ")",
                                },
                              });
                            }),
                            c.postMessage({
                              cmd: "init",
                              typeSupported: o,
                              vendor: l,
                              id: t,
                              config: JSON.stringify(a),
                            });
                        } catch (e) {
                          u.logger.warn("Error in worker:", e),
                            u.logger.error(
                              "Error while initializing DemuxerWorker, fallback on DemuxerInline"
                            ),
                            c && Q.URL.revokeObjectURL(c.objectURL),
                            (this.demuxer = new V.default(i, o, a, l)),
                            (this.w = void 0);
                        }
                      } else this.demuxer = new V.default(i, o, a, l);
                    }
                    var t = e.prototype;
                    return (
                      (t.destroy = function () {
                        var e = this.w;
                        if (e)
                          e.removeEventListener("message", this.onwmsg),
                            e.terminate(),
                            (this.w = null);
                        else {
                          var t = this.demuxer;
                          t && (t.destroy(), (this.demuxer = null));
                        }
                        var r = this.observer;
                        r && (r.removeAllListeners(), (this.observer = null));
                      }),
                      (t.push = function (e, t, r, i, a, n, o, s) {
                        var d = this.w,
                          c = Object(l.isFiniteNumber)(a.startPTS)
                            ? a.startPTS
                            : a.start,
                          h = a.decryptdata,
                          f = this.frag,
                          p = !(f && a.cc === f.cc),
                          g = !(f && a.level === f.level),
                          v = f && a.sn === f.sn + 1,
                          y = !g && v;
                        if (
                          (p &&
                            u.logger.log(this.id + ":discontinuity detected"),
                          g && u.logger.log(this.id + ":switch detected"),
                          (this.frag = a),
                          d)
                        )
                          d.postMessage(
                            {
                              cmd: "demux",
                              data: e,
                              decryptdata: h,
                              initSegment: t,
                              audioCodec: r,
                              videoCodec: i,
                              timeOffset: c,
                              discontinuity: p,
                              trackSwitch: g,
                              contiguous: y,
                              duration: n,
                              accurateTimeOffset: o,
                              defaultInitPTS: s,
                            },
                            e instanceof ArrayBuffer ? [e] : []
                          );
                        else {
                          var m = this.demuxer;
                          m && m.push(e, h, t, r, i, c, p, g, y, n, o, s);
                        }
                      }),
                      (t.onWorkerMessage = function (e) {
                        var t = e.data,
                          r = this.hls;
                        switch (t.event) {
                          case "init":
                            Q.URL.revokeObjectURL(this.w.objectURL);
                            break;
                          case d.default.FRAG_PARSING_DATA:
                            (t.data.data1 = new Uint8Array(t.data1)),
                              t.data2 &&
                                (t.data.data2 = new Uint8Array(t.data2));
                          default:
                            (t.data = t.data || {}),
                              (t.data.frag = this.frag),
                              (t.data.id = this.id),
                              r.trigger(t.event, t.data);
                        }
                      }),
                      e
                    );
                  })();
                function $(e, t, r) {
                  switch (t) {
                    case "audio":
                      e.audioGroupIds || (e.audioGroupIds = []),
                        e.audioGroupIds.push(r);
                      break;
                    case "text":
                      e.textGroupIds || (e.textGroupIds = []),
                        e.textGroupIds.push(r);
                  }
                }
                function ee(e, t, r) {
                  var i = e[t],
                    a = e[r],
                    n = a.startPTS;
                  if (Object(l.isFiniteNumber)(n))
                    r > t
                      ? ((i.duration = n - i.start),
                        i.duration < 0 &&
                          u.logger.warn(
                            "negative duration computed for frag " +
                              i.sn +
                              ",level " +
                              i.level +
                              ", there should be some duration drift between playlist and fragment!"
                          ))
                      : ((a.duration = i.start - n),
                        a.duration < 0 &&
                          u.logger.warn(
                            "negative duration computed for frag " +
                              a.sn +
                              ",level " +
                              a.level +
                              ", there should be some duration drift between playlist and fragment!"
                          ));
                  else if (r > t) {
                    var o = i.cc === a.cc;
                    a.start =
                      i.start +
                      (o && i.minEndPTS ? i.minEndPTS - i.start : i.duration);
                  } else a.start = Math.max(i.start - a.duration, 0);
                }
                function te(e, t, r, i, a, n) {
                  var o = r,
                    s = i;
                  if (Object(l.isFiniteNumber)(t.startPTS)) {
                    var d = Math.abs(t.startPTS - r);
                    Object(l.isFiniteNumber)(t.deltaPTS)
                      ? (t.deltaPTS = Math.max(d, t.deltaPTS))
                      : (t.deltaPTS = d),
                      (o = Math.max(r, t.startPTS)),
                      (r = Math.min(r, t.startPTS)),
                      (s = Math.min(i, t.endPTS)),
                      (i = Math.max(i, t.endPTS)),
                      (a = Math.min(a, t.startDTS)),
                      (n = Math.max(n, t.endDTS));
                  }
                  var u = r - t.start;
                  (t.start = t.startPTS = r),
                    (t.maxStartPTS = o),
                    (t.endPTS = i),
                    (t.minEndPTS = s),
                    (t.startDTS = a),
                    (t.endDTS = n),
                    (t.duration = i - r);
                  var c,
                    h,
                    f,
                    p = t.sn;
                  if (!e || p < e.startSN || p > e.endSN) return 0;
                  for (
                    c = p - e.startSN, (h = e.fragments)[c] = t, f = c;
                    f > 0;
                    f--
                  )
                    ee(h, f, f - 1);
                  for (f = c; f < h.length - 1; f++) ee(h, f, f + 1);
                  return (e.PTSKnown = !0), u;
                }
                function re(e, t) {
                  t.initSegment &&
                    e.initSegment &&
                    (t.initSegment = e.initSegment);
                  var r,
                    i = 0;
                  if (
                    (ie(e, t, function (e, a) {
                      (i = e.cc - a.cc),
                        Object(l.isFiniteNumber)(e.startPTS) &&
                          ((a.start = a.startPTS = e.startPTS),
                          (a.endPTS = e.endPTS),
                          (a.duration = e.duration),
                          (a.backtracked = e.backtracked),
                          (a.dropped = e.dropped),
                          (r = a)),
                        (t.PTSKnown = !0);
                    }),
                    t.PTSKnown)
                  ) {
                    if (i) {
                      u.logger.log(
                        "discontinuity sliding from playlist, take drift into account"
                      );
                      for (var a = t.fragments, n = 0; n < a.length; n++)
                        a[n].cc += i;
                    }
                    r
                      ? te(t, r, r.startPTS, r.endPTS, r.startDTS, r.endDTS)
                      : (function (e, t) {
                          var r = t.startSN - e.startSN,
                            i = e.fragments,
                            a = t.fragments;
                          if (!(r < 0 || r > i.length))
                            for (var n = 0; n < a.length; n++)
                              a[n].start += i[r].start;
                        })(e, t),
                      (t.PTSKnown = e.PTSKnown);
                  }
                }
                function ie(e, t, r) {
                  if (e && t)
                    for (
                      var i = Math.max(e.startSN, t.startSN) - t.startSN,
                        a = Math.min(e.endSN, t.endSN) - t.startSN,
                        n = t.startSN - e.startSN,
                        o = i;
                      o <= a;
                      o++
                    ) {
                      var s = e.fragments[n + o],
                        l = t.fragments[o];
                      if (!s || !l) break;
                      r(s, l, o);
                    }
                }
                function ae(e, t, r) {
                  var i =
                      1e3 *
                      (t.averagetargetduration
                        ? t.averagetargetduration
                        : t.targetduration),
                    a = i / 2;
                  return (
                    e && t.endSN === e.endSN && (i = a),
                    r && (i = Math.max(a, i - (window.performance.now() - r))),
                    Math.round(i)
                  );
                }
                var ne = {
                  toString: function (e) {
                    for (var t = "", r = e.length, i = 0; i < r; i++)
                      t +=
                        "[" +
                        e.start(i).toFixed(3) +
                        "," +
                        e.end(i).toFixed(3) +
                        "]";
                    return t;
                  },
                };
                function oe(e, t) {
                  t.fragments.forEach(function (t) {
                    if (t) {
                      var r = t.start + e;
                      (t.start = t.startPTS = r), (t.endPTS = r + t.duration);
                    }
                  }),
                    (t.PTSKnown = !0);
                }
                function se(e, t, r) {
                  !(function (e, t, r) {
                    if (
                      (function (e, t, r) {
                        var i = !1;
                        return (
                          t &&
                            t.details &&
                            r &&
                            (r.endCC > r.startCC || (e && e.cc < r.startCC)) &&
                            (i = !0),
                          i
                        );
                      })(e, r, t)
                    ) {
                      var i = (function (e, t) {
                        var r = e.fragments,
                          i = t.fragments;
                        if (i.length && r.length) {
                          var a = (function (e, t) {
                            for (var r = null, i = 0; i < e.length; i += 1) {
                              var a = e[i];
                              if (a && a.cc === t) {
                                r = a;
                                break;
                              }
                            }
                            return r;
                          })(r, i[0].cc);
                          if (a && (!a || a.startPTS)) return a;
                          u.logger.log("No frag in previous level to align on");
                        } else u.logger.log("No fragments to align");
                      })(r.details, t);
                      i &&
                        (u.logger.log(
                          "Adjusting PTS using last level due to CC increase within current level"
                        ),
                        oe(i.start, t));
                    }
                  })(e, r, t),
                    !r.PTSKnown &&
                      t &&
                      (function (e, t) {
                        if (t && t.fragments.length) {
                          if (!e.hasProgramDateTime || !t.hasProgramDateTime)
                            return;
                          var r = t.fragments[0].programDateTime,
                            i =
                              (e.fragments[0].programDateTime - r) / 1e3 +
                              t.fragments[0].start;
                          Object(l.isFiniteNumber)(i) &&
                            (u.logger.log(
                              "adjusting PTS using programDateTime delta, sliding:" +
                                i.toFixed(3)
                            ),
                            oe(i, e));
                        }
                      })(r, t.details);
                }
                function le(e, t, r) {
                  if (
                    null === t ||
                    !Array.isArray(e) ||
                    !e.length ||
                    !Object(l.isFiniteNumber)(t)
                  )
                    return null;
                  if (t < (e[0].programDateTime || 0)) return null;
                  if (t >= (e[e.length - 1].endProgramDateTime || 0))
                    return null;
                  r = r || 0;
                  for (var i = 0; i < e.length; ++i) {
                    var a = e[i];
                    if (ce(t, r, a)) return a;
                  }
                  return null;
                }
                function de(e, t, r, i) {
                  void 0 === r && (r = 0), void 0 === i && (i = 0);
                  var a = null;
                  if (
                    (e
                      ? (a = t[e.sn - t[0].sn + 1])
                      : 0 === r && 0 === t[0].start && (a = t[0]),
                    a && 0 === ue(r, i, a))
                  )
                    return a;
                  var n = G.search(t, ue.bind(null, r, i));
                  return n || a;
                }
                function ue(e, t, r) {
                  void 0 === e && (e = 0), void 0 === t && (t = 0);
                  var i = Math.min(
                    t,
                    r.duration + (r.deltaPTS ? r.deltaPTS : 0)
                  );
                  return r.start + r.duration - i <= e
                    ? 1
                    : r.start - i > e && r.start
                    ? -1
                    : 0;
                }
                function ce(e, t, r) {
                  var i =
                    1e3 *
                    Math.min(t, r.duration + (r.deltaPTS ? r.deltaPTS : 0));
                  return (r.endProgramDateTime || 0) - i > e;
                }
                var he = (function () {
                  function e(e, t, r, i) {
                    (this.config = e),
                      (this.media = t),
                      (this.fragmentTracker = r),
                      (this.hls = i),
                      (this.nudgeRetry = 0),
                      (this.stallReported = !1),
                      (this.stalled = null),
                      (this.moved = !1),
                      (this.seeking = !1);
                  }
                  var t = e.prototype;
                  return (
                    (t.poll = function (e) {
                      var t = this.config,
                        r = this.media,
                        i = this.stalled,
                        a = r.currentTime,
                        n = r.seeking,
                        o = this.seeking && !n,
                        s = !this.seeking && n;
                      if (((this.seeking = n), a === e)) {
                        if (
                          ((s || o) && (this.stalled = null),
                          !r.paused &&
                            !r.ended &&
                            0 !== r.playbackRate &&
                            r.buffered.length)
                        ) {
                          var l = z.bufferInfo(r, a, 0),
                            d = l.len > 0,
                            c = l.nextStart || 0;
                          if (d || c) {
                            if (n) {
                              var h = l.len > 2,
                                f =
                                  !c ||
                                  (c - a > 2 &&
                                    !this.fragmentTracker.getPartialFragment(
                                      a
                                    ));
                              if (h || f) return;
                              this.moved = !1;
                            }
                            if (!this.moved && this.stalled) {
                              var p = Math.max(c, l.start || 0) - a;
                              if (p > 0 && p <= 2)
                                return void this._trySkipBufferHole(null);
                            }
                            var g = self.performance.now();
                            if (null !== i) {
                              var v = g - i;
                              !n && v >= 250 && this._reportStall(l.len);
                              var y = z.bufferInfo(r, a, t.maxBufferHole);
                              this._tryFixBufferStall(y, v);
                            } else this.stalled = g;
                          }
                        }
                      } else if (((this.moved = !0), null !== i)) {
                        if (this.stallReported) {
                          var m = self.performance.now() - i;
                          u.logger.warn(
                            "playback not stuck anymore @" +
                              a +
                              ", after " +
                              Math.round(m) +
                              "ms"
                          ),
                            (this.stallReported = !1);
                        }
                        (this.stalled = null), (this.nudgeRetry = 0);
                      }
                    }),
                    (t._tryFixBufferStall = function (e, t) {
                      var r = this.config,
                        i = this.fragmentTracker,
                        a = this.media.currentTime,
                        n = i.getPartialFragment(a);
                      (n && this._trySkipBufferHole(n)) ||
                        (e.len > r.maxBufferHole &&
                          t > 1e3 * r.highBufferWatchdogPeriod &&
                          (u.logger.warn(
                            "Trying to nudge playhead over buffer-hole"
                          ),
                          (this.stalled = null),
                          this._tryNudgeBuffer()));
                    }),
                    (t._reportStall = function (e) {
                      var t = this.hls,
                        r = this.media;
                      this.stallReported ||
                        ((this.stallReported = !0),
                        u.logger.warn(
                          "Playback stalling at @" +
                            r.currentTime +
                            " due to low buffer (buffer=" +
                            e +
                            ")"
                        ),
                        t.trigger(d.default.ERROR, {
                          type: s.ErrorTypes.MEDIA_ERROR,
                          details: s.ErrorDetails.BUFFER_STALLED_ERROR,
                          fatal: !1,
                          buffer: e,
                        }));
                    }),
                    (t._trySkipBufferHole = function (e) {
                      for (
                        var t = this.config,
                          r = this.hls,
                          i = this.media,
                          a = i.currentTime,
                          n = 0,
                          o = 0;
                        o < i.buffered.length;
                        o++
                      ) {
                        var l = i.buffered.start(o);
                        if (a + t.maxBufferHole >= n && a < l) {
                          var c = Math.max(l + 0.05, i.currentTime + 0.1);
                          return (
                            u.logger.warn(
                              "skipping hole, adjusting currentTime from " +
                                a +
                                " to " +
                                c
                            ),
                            (this.moved = !0),
                            (this.stalled = null),
                            (i.currentTime = c),
                            e &&
                              r.trigger(d.default.ERROR, {
                                type: s.ErrorTypes.MEDIA_ERROR,
                                details: s.ErrorDetails.BUFFER_SEEK_OVER_HOLE,
                                fatal: !1,
                                reason:
                                  "fragment loaded with buffer holes, seeking from " +
                                  a +
                                  " to " +
                                  c,
                                frag: e,
                              }),
                            c
                          );
                        }
                        n = i.buffered.end(o);
                      }
                      return 0;
                    }),
                    (t._tryNudgeBuffer = function () {
                      var e = this.config,
                        t = this.hls,
                        r = this.media,
                        i = r.currentTime,
                        a = (this.nudgeRetry || 0) + 1;
                      if (((this.nudgeRetry = a), a < e.nudgeMaxRetry)) {
                        var n = i + a * e.nudgeOffset;
                        u.logger.warn(
                          "Nudging 'currentTime' from " + i + " to " + n
                        ),
                          (r.currentTime = n),
                          t.trigger(d.default.ERROR, {
                            type: s.ErrorTypes.MEDIA_ERROR,
                            details: s.ErrorDetails.BUFFER_NUDGE_ON_STALL,
                            fatal: !1,
                          });
                      } else
                        u.logger.error(
                          "Playhead still not moving while enough data buffered @" +
                            i +
                            " after " +
                            e.nudgeMaxRetry +
                            " nudges"
                        ),
                          t.trigger(d.default.ERROR, {
                            type: s.ErrorTypes.MEDIA_ERROR,
                            details: s.ErrorDetails.BUFFER_STALLED_ERROR,
                            fatal: !0,
                          });
                    }),
                    e
                  );
                })();
                function fe(e) {
                  if (void 0 === e)
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    );
                  return e;
                }
                var pe = (function (e) {
                    var t, r;
                    function i(t) {
                      for (
                        var r,
                          i = arguments.length,
                          a = new Array(i > 1 ? i - 1 : 0),
                          n = 1;
                        n < i;
                        n++
                      )
                        a[n - 1] = arguments[n];
                      return (
                        ((r =
                          e.call.apply(e, [this, t].concat(a)) ||
                          this)._boundTick = void 0),
                        (r._tickTimer = null),
                        (r._tickInterval = null),
                        (r._tickCallCount = 0),
                        (r._boundTick = r.tick.bind(fe(r))),
                        r
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a = i.prototype;
                    return (
                      (a.onHandlerDestroying = function () {
                        this.clearNextTick(), this.clearInterval();
                      }),
                      (a.hasInterval = function () {
                        return !!this._tickInterval;
                      }),
                      (a.hasNextTick = function () {
                        return !!this._tickTimer;
                      }),
                      (a.setInterval = function (e) {
                        return (
                          !this._tickInterval &&
                          ((this._tickInterval = self.setInterval(
                            this._boundTick,
                            e
                          )),
                          !0)
                        );
                      }),
                      (a.clearInterval = function () {
                        return (
                          !!this._tickInterval &&
                          (self.clearInterval(this._tickInterval),
                          (this._tickInterval = null),
                          !0)
                        );
                      }),
                      (a.clearNextTick = function () {
                        return (
                          !!this._tickTimer &&
                          (self.clearTimeout(this._tickTimer),
                          (this._tickTimer = null),
                          !0)
                        );
                      }),
                      (a.tick = function () {
                        this._tickCallCount++,
                          1 === this._tickCallCount &&
                            (this.doTick(),
                            this._tickCallCount > 1 &&
                              (this.clearNextTick(),
                              (this._tickTimer = self.setTimeout(
                                this._boundTick,
                                0
                              ))),
                            (this._tickCallCount = 0));
                      }),
                      (a.doTick = function () {}),
                      i
                    );
                  })(h),
                  ge = "STOPPED",
                  ve = "STARTING",
                  ye = "IDLE",
                  me = "PAUSED",
                  be = "KEY_LOADING",
                  _e = "FRAG_LOADING",
                  we = "FRAG_LOADING_WAITING_RETRY",
                  Te = "WAITING_TRACK",
                  Ee = "PARSING",
                  Se = "PARSED",
                  ke = "BUFFER_FLUSHING",
                  xe = "ENDED",
                  Ae = "ERROR",
                  Re = "WAITING_INIT_PTS",
                  Le = "WAITING_LEVEL",
                  De = (function (e) {
                    var t, r;
                    function i() {
                      return e.apply(this, arguments) || this;
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a = i.prototype;
                    return (
                      (a.doTick = function () {}),
                      (a.startLoad = function () {}),
                      (a.stopLoad = function () {
                        var e = this.fragCurrent;
                        e &&
                          (e.loader && e.loader.abort(),
                          this.fragmentTracker.removeFragment(e)),
                          this.demuxer &&
                            (this.demuxer.destroy(), (this.demuxer = null)),
                          (this.fragCurrent = null),
                          (this.fragPrevious = null),
                          this.clearInterval(),
                          this.clearNextTick(),
                          (this.state = ge);
                      }),
                      (a._streamEnded = function (e, t) {
                        var r = this.fragCurrent,
                          i = this.fragmentTracker;
                        if (
                          !t.live &&
                          r &&
                          !r.backtracked &&
                          r.sn === t.endSN &&
                          !e.nextStart
                        ) {
                          var a = i.getState(r);
                          return a === U || a === H;
                        }
                        return !1;
                      }),
                      (a.onMediaSeeking = function () {
                        var e = this.config,
                          t = this.media,
                          r = this.mediaBuffer,
                          i = this.state,
                          a = t ? t.currentTime : null,
                          n = z.bufferInfo(
                            r || t,
                            a,
                            this.config.maxBufferHole
                          );
                        if (
                          (u.logger.log(
                            "media seeking to " +
                              (Object(l.isFiniteNumber)(a) ? a.toFixed(3) : a)
                          ),
                          i === _e)
                        ) {
                          var o = this.fragCurrent;
                          if (0 === n.len && o) {
                            var s = e.maxFragLookUpTolerance,
                              d = o.start - s,
                              c = o.start + o.duration + s;
                            a < d || a > c
                              ? (o.loader &&
                                  (u.logger.log(
                                    "seeking outside of buffer while fragment load in progress, cancel fragment load"
                                  ),
                                  o.loader.abort()),
                                (this.fragCurrent = null),
                                (this.fragPrevious = null),
                                (this.state = ye))
                              : u.logger.log(
                                  "seeking outside of buffer but within currently loaded fragment range"
                                );
                          }
                        } else
                          i === xe &&
                            (0 === n.len &&
                              ((this.fragPrevious = null),
                              (this.fragCurrent = null)),
                            (this.state = ye));
                        t && (this.lastCurrentTime = a),
                          this.loadedmetadata ||
                            (this.nextLoadPosition = this.startPosition = a),
                          this.tick();
                      }),
                      (a.onMediaEnded = function () {
                        this.startPosition = this.lastCurrentTime = 0;
                      }),
                      (a.onHandlerDestroying = function () {
                        this.stopLoad(),
                          e.prototype.onHandlerDestroying.call(this);
                      }),
                      (a.onHandlerDestroyed = function () {
                        (this.state = ge), (this.fragmentTracker = null);
                      }),
                      (a.computeLivePosition = function (e, t) {
                        var r =
                          void 0 !== this.config.liveSyncDuration
                            ? this.config.liveSyncDuration
                            : this.config.liveSyncDurationCount *
                              t.targetduration;
                        return e + Math.max(0, t.totalduration - r);
                      }),
                      i
                    );
                  })(pe);
                function Ce(e, t) {
                  for (var r = 0; r < t.length; r++) {
                    var i = t[r];
                    (i.enumerable = i.enumerable || !1),
                      (i.configurable = !0),
                      "value" in i && (i.writable = !0),
                      Object.defineProperty(e, i.key, i);
                  }
                }
                var Oe,
                  Ie = (function (e) {
                    var t, r;
                    function i(t, r) {
                      var i;
                      return (
                        ((i =
                          e.call(
                            this,
                            t,
                            d.default.MEDIA_ATTACHED,
                            d.default.MEDIA_DETACHING,
                            d.default.MANIFEST_LOADING,
                            d.default.MANIFEST_PARSED,
                            d.default.LEVEL_LOADED,
                            d.default.LEVELS_UPDATED,
                            d.default.KEY_LOADED,
                            d.default.FRAG_LOADED,
                            d.default.FRAG_LOAD_EMERGENCY_ABORTED,
                            d.default.FRAG_PARSING_INIT_SEGMENT,
                            d.default.FRAG_PARSING_DATA,
                            d.default.FRAG_PARSED,
                            d.default.ERROR,
                            d.default.AUDIO_TRACK_SWITCHING,
                            d.default.AUDIO_TRACK_SWITCHED,
                            d.default.BUFFER_CREATED,
                            d.default.BUFFER_APPENDED,
                            d.default.BUFFER_FLUSHED
                          ) || this).fragmentTracker = r),
                        (i.config = t.config),
                        (i.audioCodecSwap = !1),
                        (i._state = ge),
                        (i.stallReported = !1),
                        (i.gapController = null),
                        (i.altAudio = !1),
                        (i.audioOnly = !1),
                        (i.bitrateTest = !1),
                        i
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a,
                      o,
                      c,
                      h = i.prototype;
                    return (
                      (h.startLoad = function (e) {
                        if (this.levels) {
                          var t = this.lastCurrentTime,
                            r = this.hls;
                          if (
                            (this.stopLoad(),
                            this.setInterval(100),
                            (this.level = -1),
                            (this.fragLoadError = 0),
                            !this.startFragRequested)
                          ) {
                            var i = r.startLevel;
                            -1 === i &&
                              (r.config.testBandwidth
                                ? ((i = 0), (this.bitrateTest = !0))
                                : (i = r.nextAutoLevel)),
                              (this.level = r.nextLoadLevel = i),
                              (this.loadedmetadata = !1);
                          }
                          t > 0 &&
                            -1 === e &&
                            (u.logger.log(
                              "override startPosition with lastCurrentTime @" +
                                t.toFixed(3)
                            ),
                            (e = t)),
                            (this.state = ye),
                            (this.nextLoadPosition =
                              this.startPosition =
                              this.lastCurrentTime =
                                e),
                            this.tick();
                        } else (this.forceStartLoad = !0), (this.state = ge);
                      }),
                      (h.stopLoad = function () {
                        (this.forceStartLoad = !1),
                          e.prototype.stopLoad.call(this);
                      }),
                      (h.doTick = function () {
                        switch (this.state) {
                          case ke:
                            this.fragLoadError = 0;
                            break;
                          case ye:
                            this._doTickIdle();
                            break;
                          case Le:
                            var e = this.levels[this.level];
                            e && e.details && (this.state = ye);
                            break;
                          case we:
                            var t = window.performance.now(),
                              r = this.retryDate;
                            (!r ||
                              t >= r ||
                              (this.media && this.media.seeking)) &&
                              (u.logger.log(
                                "mediaController: retryDate reached, switch back to IDLE state"
                              ),
                              (this.state = ye));
                        }
                        this._checkBuffer(), this._checkFragmentChanged();
                      }),
                      (h._doTickIdle = function () {
                        var e = this.hls,
                          t = e.config,
                          r = this.media;
                        if (
                          void 0 !== this.levelLastLoaded &&
                          (r ||
                            (!this.startFragRequested && t.startFragPrefetch))
                        )
                          if (this.altAudio && this.audioOnly)
                            this.demuxer.frag = null;
                          else {
                            var i;
                            i = this.loadedmetadata
                              ? r.currentTime
                              : this.nextLoadPosition;
                            var a = e.nextLoadLevel,
                              n = this.levels[a];
                            if (n) {
                              var o,
                                s = n.bitrate;
                              (o = s
                                ? Math.max(
                                    (8 * t.maxBufferSize) / s,
                                    t.maxBufferLength
                                  )
                                : t.maxBufferLength),
                                (o = Math.min(o, t.maxMaxBufferLength));
                              var l =
                                  i < t.maxBufferHole
                                    ? Math.max(2, t.maxBufferHole)
                                    : t.maxBufferHole,
                                c = z.bufferInfo(
                                  this.mediaBuffer ? this.mediaBuffer : r,
                                  i,
                                  l
                                ),
                                h = c.len;
                              if (!(h >= o)) {
                                u.logger.trace(
                                  "buffer length of " +
                                    h.toFixed(3) +
                                    " is below max of " +
                                    o.toFixed(3) +
                                    ". checking for more payload ..."
                                ),
                                  (this.level = e.nextLoadLevel = a);
                                var f = n.details;
                                if (
                                  !f ||
                                  (f.live && this.levelLastLoaded !== a)
                                )
                                  this.state = Le;
                                else {
                                  if (this._streamEnded(c, f)) {
                                    var p = {};
                                    return (
                                      this.altAudio && (p.type = "video"),
                                      this.hls.trigger(d.default.BUFFER_EOS, p),
                                      void (this.state = xe)
                                    );
                                  }
                                  this._fetchPayloadOrEos(i, c, f);
                                }
                              }
                            }
                          }
                      }),
                      (h._fetchPayloadOrEos = function (e, t, r) {
                        var i = this.fragPrevious,
                          a = (this.level, r.fragments),
                          n = a.length;
                        if (0 !== n) {
                          var o,
                            s = a[0].start,
                            l = a[n - 1].start + a[n - 1].duration,
                            d = t.end;
                          if (r.initSegment && !r.initSegment.data)
                            o = r.initSegment;
                          else if (r.live) {
                            var c = this.config.initialLiveManifestSize;
                            if (n < c)
                              return void u.logger.warn(
                                "Can not start playback of a level, reason: not enough fragments " +
                                  n +
                                  " < " +
                                  c
                              );
                            if (
                              null ===
                              (o = this._ensureFragmentAtLivePoint(
                                r,
                                d,
                                s,
                                l,
                                i,
                                a
                              ))
                            )
                              return;
                          } else d < s && (o = a[0]);
                          o || (o = this._findFragment(s, i, n, a, d, l, r)),
                            o &&
                              (o.encrypted
                                ? this._loadKey(o, r)
                                : this._loadFragment(o, r, e, d));
                        }
                      }),
                      (h._ensureFragmentAtLivePoint = function (
                        e,
                        t,
                        r,
                        i,
                        a,
                        n
                      ) {
                        var o,
                          s = this.hls.config,
                          d = this.media,
                          c = 1 / 0;
                        if (
                          (void 0 !== s.liveMaxLatencyDuration
                            ? (c = s.liveMaxLatencyDuration)
                            : Object(l.isFiniteNumber)(
                                s.liveMaxLatencyDurationCount
                              ) &&
                              (c =
                                s.liveMaxLatencyDurationCount *
                                e.targetduration),
                          t < Math.max(r - s.maxFragLookUpTolerance, i - c))
                        ) {
                          var h = (this.liveSyncPosition =
                            this.computeLivePosition(r, e));
                          (t = h),
                            d &&
                              !d.paused &&
                              d.readyState &&
                              d.duration > h &&
                              h > d.currentTime &&
                              (u.logger.log(
                                "buffer end: " +
                                  t.toFixed(3) +
                                  " is located too far from the end of live sliding playlist, reset currentTime to : " +
                                  h.toFixed(3)
                              ),
                              (d.currentTime = h)),
                            (this.nextLoadPosition = h);
                        }
                        if (e.PTSKnown && t > i && d && d.readyState)
                          return null;
                        if (this.startFragRequested && !e.PTSKnown && a)
                          if (e.hasProgramDateTime)
                            u.logger.log(
                              "live playlist, switching playlist, load frag with same PDT: " +
                                a.programDateTime
                            ),
                              (o = le(
                                n,
                                a.endProgramDateTime,
                                s.maxFragLookUpTolerance
                              ));
                          else {
                            var f = a.sn + 1;
                            if (f >= e.startSN && f <= e.endSN) {
                              var p = n[f - e.startSN];
                              a.cc === p.cc &&
                                ((o = p),
                                u.logger.log(
                                  "live playlist, switching playlist, load frag with next SN: " +
                                    o.sn
                                ));
                            }
                            o ||
                              ((o = G.search(n, function (e) {
                                return a.cc - e.cc;
                              })) &&
                                u.logger.log(
                                  "live playlist, switching playlist, load frag with same CC: " +
                                    o.sn
                                ));
                          }
                        return o;
                      }),
                      (h._findFragment = function (e, t, r, i, a, n, o) {
                        var s,
                          l = this.hls.config;
                        if (
                          (s =
                            a < n
                              ? de(
                                  t,
                                  i,
                                  a,
                                  a > n - l.maxFragLookUpTolerance
                                    ? 0
                                    : l.maxFragLookUpTolerance
                                )
                              : i[r - 1])
                        ) {
                          var d = s.sn - o.startSN,
                            c = t && s.level === t.level,
                            h = i[d - 1],
                            f = i[d + 1];
                          if (t && s.sn === t.sn)
                            if (c && !s.backtracked)
                              if (s.sn < o.endSN) {
                                var p = t.deltaPTS;
                                p && p > l.maxBufferHole && t.dropped && d
                                  ? ((s = h),
                                    u.logger.warn(
                                      "Previous fragment was dropped with large PTS gap between audio and video. Maybe fragment is not starting with a keyframe? Loading previous one to try to overcome this"
                                    ))
                                  : ((s = f),
                                    this.fragmentTracker.getState(s) !== H &&
                                      u.logger.log(
                                        "Re-loading fragment with SN: " + s.sn
                                      ));
                              } else s = null;
                            else
                              s.backtracked &&
                                (f && f.backtracked
                                  ? (u.logger.warn(
                                      "Already backtracked from fragment " +
                                        f.sn +
                                        ", will not backtrack to fragment " +
                                        s.sn +
                                        ". Loading fragment " +
                                        f.sn
                                    ),
                                    (s = f))
                                  : (u.logger.warn(
                                      "Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe"
                                    ),
                                    (s.dropped = 0),
                                    h
                                      ? ((s = h).backtracked = !0)
                                      : d && (s = null)));
                        }
                        return s;
                      }),
                      (h._loadKey = function (e, t) {
                        u.logger.log(
                          "Loading key for " +
                            e.sn +
                            " of [" +
                            t.startSN +
                            "-" +
                            t.endSN +
                            "], level " +
                            this.level
                        ),
                          (this.state = be),
                          this.hls.trigger(d.default.KEY_LOADING, {
                            frag: e,
                          });
                      }),
                      (h._loadFragment = function (e, t, r, i) {
                        var a = this.fragmentTracker.getState(e);
                        (this.fragCurrent = e),
                          "initSegment" !== e.sn &&
                            (this.startFragRequested = !0),
                          Object(l.isFiniteNumber)(e.sn) &&
                            !e.bitrateTest &&
                            (this.nextLoadPosition = e.start + e.duration),
                          e.backtracked || a === B || a === U
                            ? ((e.autoLevel = this.hls.autoLevelEnabled),
                              (e.bitrateTest = this.bitrateTest),
                              u.logger.log(
                                "Loading " +
                                  e.sn +
                                  " of [" +
                                  t.startSN +
                                  "-" +
                                  t.endSN +
                                  "], level " +
                                  this.level +
                                  ", " +
                                  (this.loadedmetadata
                                    ? "currentTime"
                                    : "nextLoadPosition") +
                                  ": " +
                                  parseFloat(r.toFixed(3)) +
                                  ", bufferEnd: " +
                                  parseFloat(i.toFixed(3))
                              ),
                              this.hls.trigger(d.default.FRAG_LOADING, {
                                frag: e,
                              }),
                              this.demuxer ||
                                (this.demuxer = new J(this.hls, "main")),
                              (this.state = _e))
                            : a === N &&
                              this._reduceMaxBufferLength(e.duration) &&
                              this.fragmentTracker.removeFragment(e);
                      }),
                      (h.getBufferedFrag = function (e) {
                        return this.fragmentTracker.getBufferedFrag(e, n.MAIN);
                      }),
                      (h.followingBufferedFrag = function (e) {
                        return e ? this.getBufferedFrag(e.endPTS + 0.5) : null;
                      }),
                      (h._checkFragmentChanged = function () {
                        var e,
                          t,
                          r = this.media;
                        if (
                          r &&
                          r.readyState &&
                          !1 === r.seeking &&
                          ((t = r.currentTime) > this.lastCurrentTime &&
                            (this.lastCurrentTime = t),
                          z.isBuffered(r, t)
                            ? (e = this.getBufferedFrag(t))
                            : z.isBuffered(r, t + 0.1) &&
                              (e = this.getBufferedFrag(t + 0.1)),
                          e)
                        ) {
                          var i = e;
                          if (i !== this.fragPlaying) {
                            this.hls.trigger(d.default.FRAG_CHANGED, {
                              frag: i,
                            });
                            var a = i.level;
                            (this.fragPlaying &&
                              this.fragPlaying.level === a) ||
                              this.hls.trigger(d.default.LEVEL_SWITCHED, {
                                level: a,
                              }),
                              (this.fragPlaying = i);
                          }
                        }
                      }),
                      (h.immediateLevelSwitch = function () {
                        if (
                          (u.logger.log("immediateLevelSwitch"),
                          !this.immediateSwitch)
                        ) {
                          this.immediateSwitch = !0;
                          var e,
                            t = this.media;
                          t ? (e = t.paused) || t.pause() : (e = !0),
                            (this.previouslyPaused = e);
                        }
                        var r = this.fragCurrent;
                        r && r.loader && r.loader.abort(),
                          (this.fragCurrent = null),
                          this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
                      }),
                      (h.immediateLevelSwitchEnd = function () {
                        var e = this.media;
                        e &&
                          e.buffered.length &&
                          ((this.immediateSwitch = !1),
                          e.currentTime > 0 &&
                            z.isBuffered(e, e.currentTime) &&
                            (e.currentTime -= 1e-4),
                          this.previouslyPaused || e.play());
                      }),
                      (h.nextLevelSwitch = function () {
                        var e = this.media;
                        if (e && e.readyState) {
                          var t,
                            r = this.getBufferedFrag(e.currentTime);
                          if (
                            (r &&
                              r.startPTS > 1 &&
                              this.flushMainBuffer(0, r.startPTS - 1),
                            e.paused)
                          )
                            t = 0;
                          else {
                            var i = this.hls.nextLoadLevel,
                              a = this.levels[i],
                              n = this.fragLastKbps;
                            t =
                              n && this.fragCurrent
                                ? (this.fragCurrent.duration * a.bitrate) /
                                    (1e3 * n) +
                                  1
                                : 0;
                          }
                          var o = this.getBufferedFrag(e.currentTime + t);
                          if (o) {
                            var s = this.followingBufferedFrag(o);
                            if (s) {
                              var l = this.fragCurrent;
                              l && l.loader && l.loader.abort(),
                                (this.fragCurrent = null);
                              var d = Math.max(
                                o.endPTS,
                                s.maxStartPTS +
                                  Math.min(
                                    this.config.maxFragLookUpTolerance,
                                    s.duration
                                  )
                              );
                              this.flushMainBuffer(d, Number.POSITIVE_INFINITY);
                            }
                          }
                        }
                      }),
                      (h.flushMainBuffer = function (e, t) {
                        this.state = ke;
                        var r = {
                          startOffset: e,
                          endOffset: t,
                        };
                        this.altAudio && (r.type = "video"),
                          this.hls.trigger(d.default.BUFFER_FLUSHING, r);
                      }),
                      (h.onMediaAttached = function (e) {
                        var t = (this.media = this.mediaBuffer = e.media);
                        (this.onvseeking = this.onMediaSeeking.bind(this)),
                          (this.onvseeked = this.onMediaSeeked.bind(this)),
                          (this.onvended = this.onMediaEnded.bind(this)),
                          t.addEventListener("seeking", this.onvseeking),
                          t.addEventListener("seeked", this.onvseeked),
                          t.addEventListener("ended", this.onvended);
                        var r = this.config;
                        this.levels &&
                          r.autoStartLoad &&
                          this.hls.startLoad(r.startPosition),
                          (this.gapController = new he(
                            r,
                            t,
                            this.fragmentTracker,
                            this.hls
                          ));
                      }),
                      (h.onMediaDetaching = function () {
                        var e = this.media;
                        e &&
                          e.ended &&
                          (u.logger.log(
                            "MSE detaching and video ended, reset startPosition"
                          ),
                          (this.startPosition = this.lastCurrentTime = 0));
                        var t = this.levels;
                        t &&
                          t.forEach(function (e) {
                            e.details &&
                              e.details.fragments.forEach(function (e) {
                                e.backtracked = void 0;
                              });
                          }),
                          e &&
                            (e.removeEventListener("seeking", this.onvseeking),
                            e.removeEventListener("seeked", this.onvseeked),
                            e.removeEventListener("ended", this.onvended),
                            (this.onvseeking =
                              this.onvseeked =
                              this.onvended =
                                null)),
                          this.fragmentTracker.removeAllFragments(),
                          (this.media = this.mediaBuffer = null),
                          (this.loadedmetadata = !1),
                          this.stopLoad();
                      }),
                      (h.onMediaSeeked = function () {
                        var e = this.media,
                          t = e ? e.currentTime : void 0;
                        Object(l.isFiniteNumber)(t) &&
                          u.logger.log("media seeked to " + t.toFixed(3)),
                          this.tick();
                      }),
                      (h.onManifestLoading = function () {
                        u.logger.log("trigger BUFFER_RESET"),
                          this.hls.trigger(d.default.BUFFER_RESET),
                          this.fragmentTracker.removeAllFragments(),
                          (this.stalled = !1),
                          (this.startPosition = this.lastCurrentTime = 0);
                      }),
                      (h.onManifestParsed = function (e) {
                        var t,
                          r = !1,
                          i = !1;
                        e.levels.forEach(function (e) {
                          (t = e.audioCodec) &&
                            (-1 !== t.indexOf("mp4a.40.2") && (r = !0),
                            -1 !== t.indexOf("mp4a.40.5") && (i = !0));
                        }),
                          (this.audioCodecSwitch = r && i),
                          this.audioCodecSwitch &&
                            u.logger.log(
                              "both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"
                            ),
                          (this.altAudio = e.altAudio),
                          (this.levels = e.levels),
                          (this.startFragRequested = !1);
                        var a = this.config;
                        (a.autoStartLoad || this.forceStartLoad) &&
                          this.hls.startLoad(a.startPosition);
                      }),
                      (h.onLevelLoaded = function (e) {
                        var t = e.details,
                          r = e.level,
                          i = this.levels[this.levelLastLoaded],
                          a = this.levels[r],
                          n = t.totalduration,
                          o = 0;
                        if (
                          (u.logger.log(
                            "level " +
                              r +
                              " loaded [" +
                              t.startSN +
                              "," +
                              t.endSN +
                              "],duration:" +
                              n
                          ),
                          t.live || (a.details && a.details.live))
                        ) {
                          var s = a.details;
                          s && t.fragments.length > 0
                            ? (re(s, t),
                              (o = t.fragments[0].start),
                              (this.liveSyncPosition = this.computeLivePosition(
                                o,
                                s
                              )),
                              t.PTSKnown && Object(l.isFiniteNumber)(o)
                                ? u.logger.log(
                                    "live playlist sliding:" + o.toFixed(3)
                                  )
                                : (u.logger.log(
                                    "live playlist - outdated PTS, unknown sliding"
                                  ),
                                  se(this.fragPrevious, i, t)))
                            : (u.logger.log(
                                "live playlist - first load, unknown sliding"
                              ),
                              (t.PTSKnown = !1),
                              se(this.fragPrevious, i, t));
                        } else t.PTSKnown = !1;
                        if (
                          ((a.details = t),
                          (this.levelLastLoaded = r),
                          this.hls.trigger(d.default.LEVEL_UPDATED, {
                            details: t,
                            level: r,
                          }),
                          !1 === this.startFragRequested)
                        ) {
                          if (
                            -1 === this.startPosition ||
                            -1 === this.lastCurrentTime
                          ) {
                            var c = t.startTimeOffset;
                            Object(l.isFiniteNumber)(c)
                              ? (c < 0 &&
                                  (u.logger.log(
                                    "negative start time offset " +
                                      c +
                                      ", count from end of last fragment"
                                  ),
                                  (c = o + n + c)),
                                u.logger.log(
                                  "start time offset found in playlist, adjust startPosition to " +
                                    c
                                ),
                                (this.startPosition = c))
                              : t.live
                              ? ((this.startPosition = this.computeLivePosition(
                                  o,
                                  t
                                )),
                                u.logger.log(
                                  "configure startPosition to " +
                                    this.startPosition
                                ))
                              : (this.startPosition = 0),
                              (this.lastCurrentTime = this.startPosition);
                          }
                          this.nextLoadPosition = this.startPosition;
                        }
                        this.state === Le && (this.state = ye), this.tick();
                      }),
                      (h.onKeyLoaded = function () {
                        this.state === be && ((this.state = ye), this.tick());
                      }),
                      (h.onFragLoaded = function (e) {
                        var t = this.fragCurrent,
                          r = this.hls,
                          i = this.levels,
                          a = this.media,
                          n = e.frag;
                        if (
                          this.state === _e &&
                          t &&
                          "main" === n.type &&
                          n.level === t.level &&
                          n.sn === t.sn
                        ) {
                          var o = e.stats,
                            s = i[t.level],
                            l = s.details;
                          if (
                            ((this.bitrateTest = !1),
                            (this.stats = o),
                            u.logger.log(
                              "Loaded " +
                                t.sn +
                                " of [" +
                                l.startSN +
                                " ," +
                                l.endSN +
                                "],level " +
                                t.level
                            ),
                            n.bitrateTest && r.nextLoadLevel)
                          )
                            (this.state = ye),
                              (this.startFragRequested = !1),
                              (o.tparsed = o.tbuffered =
                                window.performance.now()),
                              r.trigger(d.default.FRAG_BUFFERED, {
                                stats: o,
                                frag: t,
                                id: "main",
                              }),
                              this.tick();
                          else if ("initSegment" === n.sn)
                            (this.state = ye),
                              (o.tparsed = o.tbuffered =
                                window.performance.now()),
                              (l.initSegment.data = e.payload),
                              r.trigger(d.default.FRAG_BUFFERED, {
                                stats: o,
                                frag: t,
                                id: "main",
                              }),
                              this.tick();
                          else {
                            u.logger.log(
                              "Parsing " +
                                t.sn +
                                " of [" +
                                l.startSN +
                                " ," +
                                l.endSN +
                                "],level " +
                                t.level +
                                ", cc " +
                                t.cc
                            ),
                              (this.state = Ee),
                              (this.pendingBuffering = !0),
                              (this.appended = !1),
                              n.bitrateTest &&
                                ((n.bitrateTest = !1),
                                this.fragmentTracker.onFragLoaded({
                                  frag: n,
                                }));
                            var c =
                                !(a && a.seeking) && (l.PTSKnown || !l.live),
                              h = l.initSegment ? l.initSegment.data : [],
                              f = this._getAudioCodec(s);
                            (this.demuxer =
                              this.demuxer || new J(this.hls, "main")).push(
                              e.payload,
                              h,
                              f,
                              s.videoCodec,
                              t,
                              l.totalduration,
                              c
                            );
                          }
                        }
                        this.fragLoadError = 0;
                      }),
                      (h.onFragParsingInitSegment = function (e) {
                        var t = this.fragCurrent,
                          r = e.frag;
                        if (
                          t &&
                          "main" === e.id &&
                          r.sn === t.sn &&
                          r.level === t.level &&
                          this.state === Ee
                        ) {
                          var i,
                            a,
                            n = e.tracks;
                          if (
                            ((this.audioOnly = n.audio && !n.video),
                            this.altAudio && !this.audioOnly && delete n.audio,
                            (a = n.audio))
                          ) {
                            var o = this.levels[this.level].audioCodec,
                              s = navigator.userAgent.toLowerCase();
                            o &&
                              this.audioCodecSwap &&
                              (u.logger.log("swapping playlist audio codec"),
                              (o =
                                -1 !== o.indexOf("mp4a.40.5")
                                  ? "mp4a.40.2"
                                  : "mp4a.40.5")),
                              this.audioCodecSwitch &&
                                1 !== a.metadata.channelCount &&
                                -1 === s.indexOf("firefox") &&
                                (o = "mp4a.40.5"),
                              -1 !== s.indexOf("android") &&
                                "audio/mpeg" !== a.container &&
                                ((o = "mp4a.40.2"),
                                u.logger.log(
                                  "Android: force audio codec to " + o
                                )),
                              (a.levelCodec = o),
                              (a.id = e.id);
                          }
                          for (i in ((a = n.video) &&
                            ((a.levelCodec =
                              this.levels[this.level].videoCodec),
                            (a.id = e.id)),
                          this.hls.trigger(d.default.BUFFER_CODECS, n),
                          n)) {
                            (a = n[i]),
                              u.logger.log(
                                "main track:" +
                                  i +
                                  ",container:" +
                                  a.container +
                                  ",codecs[level/parsed]=[" +
                                  a.levelCodec +
                                  "/" +
                                  a.codec +
                                  "]"
                              );
                            var l = a.initSegment;
                            l &&
                              ((this.appended = !0),
                              (this.pendingBuffering = !0),
                              this.hls.trigger(d.default.BUFFER_APPENDING, {
                                type: i,
                                data: l,
                                parent: "main",
                                content: "initSegment",
                              }));
                          }
                          this.tick();
                        }
                      }),
                      (h.onFragParsingData = function (e) {
                        var t = this,
                          r = this.fragCurrent,
                          i = e.frag;
                        if (
                          r &&
                          "main" === e.id &&
                          i.sn === r.sn &&
                          i.level === r.level &&
                          ("audio" !== e.type || !this.altAudio) &&
                          this.state === Ee
                        ) {
                          var a = this.levels[this.level],
                            n = r;
                          if (
                            (Object(l.isFiniteNumber)(e.endPTS) ||
                              ((e.endPTS = e.startPTS + r.duration),
                              (e.endDTS = e.startDTS + r.duration)),
                            !0 === e.hasAudio && n.addElementaryStream(g.AUDIO),
                            !0 === e.hasVideo && n.addElementaryStream(g.VIDEO),
                            u.logger.log(
                              "Parsed " +
                                e.type +
                                ",PTS:[" +
                                e.startPTS.toFixed(3) +
                                "," +
                                e.endPTS.toFixed(3) +
                                "],DTS:[" +
                                e.startDTS.toFixed(3) +
                                "/" +
                                e.endDTS.toFixed(3) +
                                "],nb:" +
                                e.nb +
                                ",dropped:" +
                                (e.dropped || 0)
                            ),
                            "video" === e.type)
                          )
                            if (((n.dropped = e.dropped), n.dropped))
                              if (n.backtracked)
                                u.logger.warn(
                                  "Already backtracked on this fragment, appending with the gap",
                                  n.sn
                                );
                              else {
                                var o = a.details;
                                if (!o || n.sn !== o.startSN)
                                  return (
                                    u.logger.warn(
                                      "missing video frame(s), backtracking fragment",
                                      n.sn
                                    ),
                                    this.fragmentTracker.removeFragment(n),
                                    (n.backtracked = !0),
                                    (this.nextLoadPosition = e.startPTS),
                                    (this.state = ye),
                                    (this.fragPrevious = n),
                                    this.demuxer &&
                                      (this.demuxer.destroy(),
                                      (this.demuxer = null)),
                                    void this.tick()
                                  );
                                u.logger.warn(
                                  "missing video frame(s) on first frag, appending with gap",
                                  n.sn
                                );
                              }
                            else n.backtracked = !1;
                          var s = te(
                              a.details,
                              n,
                              e.startPTS,
                              e.endPTS,
                              e.startDTS,
                              e.endDTS
                            ),
                            c = this.hls;
                          c.trigger(d.default.LEVEL_PTS_UPDATED, {
                            details: a.details,
                            level: this.level,
                            drift: s,
                            type: e.type,
                            start: e.startPTS,
                            end: e.endPTS,
                          }),
                            [e.data1, e.data2].forEach(function (r) {
                              r &&
                                r.length &&
                                t.state === Ee &&
                                ((t.appended = !0),
                                (t.pendingBuffering = !0),
                                c.trigger(d.default.BUFFER_APPENDING, {
                                  type: e.type,
                                  data: r,
                                  parent: "main",
                                  content: "data",
                                }));
                            }),
                            this.tick();
                        }
                      }),
                      (h.onFragParsed = function (e) {
                        var t = this.fragCurrent,
                          r = e.frag;
                        t &&
                          "main" === e.id &&
                          r.sn === t.sn &&
                          r.level === t.level &&
                          this.state === Ee &&
                          ((this.stats.tparsed = window.performance.now()),
                          (this.state = Se),
                          this._checkAppendedParsed());
                      }),
                      (h.onAudioTrackSwitching = function (e) {
                        var t = this.altAudio,
                          r = !!e.url,
                          i = e.id;
                        if (!r) {
                          if (this.mediaBuffer !== this.media) {
                            u.logger.log(
                              "switching on main audio, use media.buffered to schedule main fragment loading"
                            ),
                              (this.mediaBuffer = this.media);
                            var a = this.fragCurrent;
                            a.loader &&
                              (u.logger.log(
                                "switching to main audio track, cancel main fragment load"
                              ),
                              a.loader.abort()),
                              (this.fragCurrent = null),
                              (this.fragPrevious = null),
                              this.demuxer &&
                                (this.demuxer.destroy(), (this.demuxer = null)),
                              (this.state = ye);
                          }
                          var n = this.hls;
                          t &&
                            n.trigger(d.default.BUFFER_FLUSHING, {
                              startOffset: 0,
                              endOffset: Number.POSITIVE_INFINITY,
                              type: "audio",
                            }),
                            n.trigger(d.default.AUDIO_TRACK_SWITCHED, {
                              id: i,
                            });
                        }
                      }),
                      (h.onAudioTrackSwitched = function (e) {
                        var t = e.id,
                          r = !!this.hls.audioTracks[t].url;
                        if (r) {
                          var i = this.videoBuffer;
                          i &&
                            this.mediaBuffer !== i &&
                            (u.logger.log(
                              "switching on alternate audio, use video.buffered to schedule main fragment loading"
                            ),
                            (this.mediaBuffer = i));
                        }
                        (this.altAudio = r), this.tick();
                      }),
                      (h.onBufferCreated = function (e) {
                        var t,
                          r,
                          i = e.tracks,
                          a = !1;
                        for (var n in i) {
                          var o = i[n];
                          "main" === o.id
                            ? ((r = n),
                              (t = o),
                              "video" === n && (this.videoBuffer = i[n].buffer))
                            : (a = !0);
                        }
                        a && t
                          ? (u.logger.log(
                              "alternate track found, use " +
                                r +
                                ".buffered to schedule main fragment loading"
                            ),
                            (this.mediaBuffer = t.buffer))
                          : (this.mediaBuffer = this.media);
                      }),
                      (h.onBufferAppended = function (e) {
                        if ("main" === e.parent) {
                          var t = this.state;
                          (t !== Ee && t !== Se) ||
                            ((this.pendingBuffering = e.pending > 0),
                            this._checkAppendedParsed());
                        }
                      }),
                      (h._checkAppendedParsed = function () {
                        if (
                          !(
                            this.state !== Se ||
                            (this.appended && this.pendingBuffering)
                          )
                        ) {
                          var e = this.fragCurrent;
                          if (e) {
                            var t = this.mediaBuffer
                              ? this.mediaBuffer
                              : this.media;
                            u.logger.log(
                              "main buffered : " + ne.toString(t.buffered)
                            ),
                              (this.fragPrevious = e);
                            var r = this.stats;
                            (r.tbuffered = window.performance.now()),
                              (this.fragLastKbps = Math.round(
                                (8 * r.total) / (r.tbuffered - r.tfirst)
                              )),
                              this.hls.trigger(d.default.FRAG_BUFFERED, {
                                stats: r,
                                frag: e,
                                id: "main",
                              }),
                              (this.state = ye);
                          }
                          (this.loadedmetadata || this.startPosition <= 0) &&
                            this.tick();
                        }
                      }),
                      (h.onError = function (e) {
                        var t = e.frag || this.fragCurrent;
                        if (!t || "main" === t.type) {
                          var r =
                            !!this.media &&
                            z.isBuffered(this.media, this.media.currentTime) &&
                            z.isBuffered(
                              this.media,
                              this.media.currentTime + 0.5
                            );
                          switch (e.details) {
                            case s.ErrorDetails.FRAG_LOAD_ERROR:
                            case s.ErrorDetails.FRAG_LOAD_TIMEOUT:
                            case s.ErrorDetails.KEY_LOAD_ERROR:
                            case s.ErrorDetails.KEY_LOAD_TIMEOUT:
                              if (!e.fatal)
                                if (
                                  this.fragLoadError + 1 <=
                                  this.config.fragLoadingMaxRetry
                                ) {
                                  var i = Math.min(
                                    Math.pow(2, this.fragLoadError) *
                                      this.config.fragLoadingRetryDelay,
                                    this.config.fragLoadingMaxRetryTimeout
                                  );
                                  u.logger.warn(
                                    "mediaController: frag loading failed, retry in " +
                                      i +
                                      " ms"
                                  ),
                                    (this.retryDate =
                                      window.performance.now() + i),
                                    this.loadedmetadata ||
                                      ((this.startFragRequested = !1),
                                      (this.nextLoadPosition =
                                        this.startPosition)),
                                    this.fragLoadError++,
                                    (this.state = we);
                                } else
                                  u.logger.error(
                                    "mediaController: " +
                                      e.details +
                                      " reaches max retry, redispatch as fatal ..."
                                  ),
                                    (e.fatal = !0),
                                    (this.state = Ae);
                              break;
                            case s.ErrorDetails.LEVEL_LOAD_ERROR:
                            case s.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                              this.state !== Ae &&
                                (e.fatal
                                  ? ((this.state = Ae),
                                    u.logger.warn(
                                      "streamController: " +
                                        e.details +
                                        ",switch to " +
                                        this.state +
                                        " state ..."
                                    ))
                                  : e.levelRetry ||
                                    this.state !== Le ||
                                    (this.state = ye));
                              break;
                            case s.ErrorDetails.BUFFER_FULL_ERROR:
                              "main" !== e.parent ||
                                (this.state !== Ee && this.state !== Se) ||
                                (r
                                  ? (this._reduceMaxBufferLength(
                                      this.config.maxBufferLength
                                    ),
                                    (this.state = ye))
                                  : (u.logger.warn(
                                      "buffer full error also media.currentTime is not buffered, flush everything"
                                    ),
                                    (this.fragCurrent = null),
                                    this.flushMainBuffer(
                                      0,
                                      Number.POSITIVE_INFINITY
                                    )));
                          }
                        }
                      }),
                      (h._reduceMaxBufferLength = function (e) {
                        var t = this.config;
                        return (
                          t.maxMaxBufferLength >= e &&
                          ((t.maxMaxBufferLength /= 2),
                          u.logger.warn(
                            "main:reduce max buffer length to " +
                              t.maxMaxBufferLength +
                              "s"
                          ),
                          !0)
                        );
                      }),
                      (h._checkBuffer = function () {
                        var e = this.media;
                        if (e && 0 !== e.readyState) {
                          var t = (this.mediaBuffer ? this.mediaBuffer : e)
                            .buffered;
                          !this.loadedmetadata && t.length
                            ? ((this.loadedmetadata = !0),
                              this._seekToStartPos())
                            : this.immediateSwitch
                            ? this.immediateLevelSwitchEnd()
                            : this.gapController.poll(this.lastCurrentTime, t);
                        }
                      }),
                      (h.onFragLoadEmergencyAborted = function () {
                        (this.state = ye),
                          this.loadedmetadata ||
                            ((this.startFragRequested = !1),
                            (this.nextLoadPosition = this.startPosition)),
                          this.tick();
                      }),
                      (h.onBufferFlushed = function () {
                        var e = this.mediaBuffer
                          ? this.mediaBuffer
                          : this.media;
                        if (e) {
                          var t = this.audioOnly ? g.AUDIO : g.VIDEO;
                          this.fragmentTracker.detectEvictedFragments(
                            t,
                            e.buffered
                          );
                        }
                        (this.state = ye), (this.fragPrevious = null);
                      }),
                      (h.onLevelsUpdated = function (e) {
                        this.levels = e.levels;
                      }),
                      (h.swapAudioCodec = function () {
                        this.audioCodecSwap = !this.audioCodecSwap;
                      }),
                      (h._seekToStartPos = function () {
                        var e = this.media,
                          t = e.currentTime,
                          r = this.startPosition;
                        if (t !== r && r >= 0) {
                          if (e.seeking)
                            return void u.logger.log(
                              "could not seek to " +
                                r +
                                ", already seeking at " +
                                t
                            );
                          var i =
                            (e.buffered.length ? e.buffered.start(0) : 0) - r;
                          i > 0 &&
                            i < this.config.maxBufferHole &&
                            (u.logger.log(
                              "adjusting start position by " +
                                i +
                                " to match buffer start"
                            ),
                            (r += i),
                            (this.startPosition = r)),
                            u.logger.log(
                              "seek to target start position " +
                                r +
                                " from current time " +
                                t +
                                ". ready state " +
                                e.readyState
                            ),
                            (e.currentTime = r);
                        }
                      }),
                      (h._getAudioCodec = function (e) {
                        var t = this.config.defaultAudioCodec || e.audioCodec;
                        return (
                          this.audioCodecSwap &&
                            (u.logger.log("swapping playlist audio codec"),
                            t &&
                              (t =
                                -1 !== t.indexOf("mp4a.40.5")
                                  ? "mp4a.40.2"
                                  : "mp4a.40.5")),
                          t
                        );
                      }),
                      (a = i),
                      (o = [
                        {
                          key: "state",
                          set: function (e) {
                            if (this.state !== e) {
                              var t = this.state;
                              (this._state = e),
                                u.logger.log(
                                  "main stream-controller: " + t + "->" + e
                                ),
                                this.hls.trigger(
                                  d.default.STREAM_STATE_TRANSITION,
                                  {
                                    previousState: t,
                                    nextState: e,
                                  }
                                );
                            }
                          },
                          get: function () {
                            return this._state;
                          },
                        },
                        {
                          key: "currentLevel",
                          get: function () {
                            var e = this.media;
                            if (e) {
                              var t = this.getBufferedFrag(e.currentTime);
                              if (t) return t.level;
                            }
                            return -1;
                          },
                        },
                        {
                          key: "nextBufferedFrag",
                          get: function () {
                            var e = this.media;
                            return e
                              ? this.followingBufferedFrag(
                                  this.getBufferedFrag(e.currentTime)
                                )
                              : null;
                          },
                        },
                        {
                          key: "nextLevel",
                          get: function () {
                            var e = this.nextBufferedFrag;
                            return e ? e.level : -1;
                          },
                        },
                        {
                          key: "liveSyncPosition",
                          get: function () {
                            return this._liveSyncPosition;
                          },
                          set: function (e) {
                            this._liveSyncPosition = e;
                          },
                        },
                      ]) && Ce(a.prototype, o),
                      c && Ce(a, c),
                      i
                    );
                  })(De);
                function Pe(e, t) {
                  for (var r = 0; r < t.length; r++) {
                    var i = t[r];
                    (i.enumerable = i.enumerable || !1),
                      (i.configurable = !0),
                      "value" in i && (i.writable = !0),
                      Object.defineProperty(e, i.key, i);
                  }
                }
                var Fe = (function (e) {
                    var t, r;
                    function i(t) {
                      var r;
                      return (
                        ((r =
                          e.call(
                            this,
                            t,
                            d.default.MANIFEST_LOADED,
                            d.default.LEVEL_LOADED,
                            d.default.AUDIO_TRACK_SWITCHED,
                            d.default.FRAG_LOADED,
                            d.default.ERROR
                          ) || this).canload = !1),
                        (r.currentLevelIndex = null),
                        (r.manualLevelIndex = -1),
                        (r.timer = null),
                        (Oe = /chrome|firefox/.test(
                          navigator.userAgent.toLowerCase()
                        )),
                        r
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a,
                      n,
                      o,
                      l = i.prototype;
                    return (
                      (l.onHandlerDestroying = function () {
                        this.clearTimer(), (this.manualLevelIndex = -1);
                      }),
                      (l.clearTimer = function () {
                        null !== this.timer &&
                          (clearTimeout(this.timer), (this.timer = null));
                      }),
                      (l.startLoad = function () {
                        var e = this._levels;
                        (this.canload = !0),
                          (this.levelRetryCount = 0),
                          e &&
                            e.forEach(function (e) {
                              e.loadError = 0;
                              var t = e.details;
                              t && t.live && (e.details = void 0);
                            }),
                          null !== this.timer && this.loadLevel();
                      }),
                      (l.stopLoad = function () {
                        this.canload = !1;
                      }),
                      (l.onManifestLoaded = function (e) {
                        var t,
                          r = [],
                          i = [],
                          a = {},
                          n = null,
                          o = !1,
                          l = !1;
                        if (
                          (e.levels.forEach(function (e) {
                            var t = e.attrs;
                            (e.loadError = 0),
                              (e.fragmentError = !1),
                              (o = o || !!e.videoCodec),
                              (l = l || !!e.audioCodec),
                              Oe &&
                                e.audioCodec &&
                                -1 !== e.audioCodec.indexOf("mp4a.40.34") &&
                                (e.audioCodec = void 0),
                              (n = a[e.bitrate])
                                ? n.url.push(e.url)
                                : ((e.url = [e.url]),
                                  (e.urlId = 0),
                                  (a[e.bitrate] = e),
                                  r.push(e)),
                              t &&
                                (t.AUDIO && $(n || e, "audio", t.AUDIO),
                                t.SUBTITLES && $(n || e, "text", t.SUBTITLES));
                          }),
                          o &&
                            l &&
                            (r = r.filter(function (e) {
                              return !!e.videoCodec;
                            })),
                          (r = r.filter(function (e) {
                            var t = e.audioCodec,
                              r = e.videoCodec;
                            return (
                              (!t || k(t, "audio")) && (!r || k(r, "video"))
                            );
                          })),
                          e.audioTracks &&
                            (i = e.audioTracks.filter(function (e) {
                              return !e.audioCodec || k(e.audioCodec, "audio");
                            })).forEach(function (e, t) {
                              e.id = t;
                            }),
                          r.length > 0)
                        ) {
                          (t = r[0].bitrate),
                            r.sort(function (e, t) {
                              return e.bitrate - t.bitrate;
                            }),
                            (this._levels = r);
                          for (var c = 0; c < r.length; c++)
                            if (r[c].bitrate === t) {
                              (this._firstLevel = c),
                                u.logger.log(
                                  "manifest loaded," +
                                    r.length +
                                    " level(s) found, first bitrate:" +
                                    t
                                );
                              break;
                            }
                          var h = l && !o;
                          this.hls.trigger(d.default.MANIFEST_PARSED, {
                            levels: r,
                            audioTracks: i,
                            firstLevel: this._firstLevel,
                            stats: e.stats,
                            audio: l,
                            video: o,
                            altAudio:
                              !h &&
                              i.some(function (e) {
                                return !!e.url;
                              }),
                          });
                        } else
                          this.hls.trigger(d.default.ERROR, {
                            type: s.ErrorTypes.MEDIA_ERROR,
                            details:
                              s.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,
                            fatal: !0,
                            url: this.hls.url,
                            reason:
                              "no level with compatible codecs found in manifest",
                          });
                      }),
                      (l.setLevelInternal = function (e) {
                        var t = this._levels,
                          r = this.hls;
                        if (e >= 0 && e < t.length) {
                          if (
                            (this.clearTimer(), this.currentLevelIndex !== e)
                          ) {
                            u.logger.log("switching to level " + e),
                              (this.currentLevelIndex = e);
                            var i = t[e];
                            (i.level = e),
                              r.trigger(d.default.LEVEL_SWITCHING, i);
                          }
                          var a = t[e],
                            n = a.details;
                          if (!n || n.live) {
                            var o = a.urlId;
                            r.trigger(d.default.LEVEL_LOADING, {
                              url: a.url[o],
                              level: e,
                              id: o,
                            });
                          }
                        } else
                          r.trigger(d.default.ERROR, {
                            type: s.ErrorTypes.OTHER_ERROR,
                            details: s.ErrorDetails.LEVEL_SWITCH_ERROR,
                            level: e,
                            fatal: !1,
                            reason: "invalid level idx",
                          });
                      }),
                      (l.onError = function (e) {
                        if (e.fatal)
                          e.type === s.ErrorTypes.NETWORK_ERROR &&
                            this.clearTimer();
                        else {
                          var t,
                            r = !1,
                            i = !1;
                          switch (e.details) {
                            case s.ErrorDetails.FRAG_LOAD_ERROR:
                            case s.ErrorDetails.FRAG_LOAD_TIMEOUT:
                            case s.ErrorDetails.KEY_LOAD_ERROR:
                            case s.ErrorDetails.KEY_LOAD_TIMEOUT:
                              (t = e.frag.level), (i = !0);
                              break;
                            case s.ErrorDetails.LEVEL_LOAD_ERROR:
                            case s.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                              (t = e.context.level), (r = !0);
                              break;
                            case s.ErrorDetails.REMUX_ALLOC_ERROR:
                              (t = e.level), (r = !0);
                          }
                          void 0 !== t && this.recoverLevel(e, t, r, i);
                        }
                      }),
                      (l.recoverLevel = function (e, t, r, i) {
                        var a,
                          n,
                          o,
                          s = this,
                          l = this.hls.config,
                          d = e.details,
                          c = this._levels[t];
                        if ((c.loadError++, (c.fragmentError = i), r)) {
                          if (
                            !(
                              this.levelRetryCount + 1 <=
                              l.levelLoadingMaxRetry
                            )
                          )
                            return (
                              u.logger.error(
                                "level controller, cannot recover from " +
                                  d +
                                  " error"
                              ),
                              (this.currentLevelIndex = null),
                              this.clearTimer(),
                              void (e.fatal = !0)
                            );
                          (n = Math.min(
                            Math.pow(2, this.levelRetryCount) *
                              l.levelLoadingRetryDelay,
                            l.levelLoadingMaxRetryTimeout
                          )),
                            (this.timer = setTimeout(function () {
                              return s.loadLevel();
                            }, n)),
                            (e.levelRetry = !0),
                            this.levelRetryCount++,
                            u.logger.warn(
                              "level controller, " +
                                d +
                                ", retry in " +
                                n +
                                " ms, current retry count is " +
                                this.levelRetryCount
                            );
                        }
                        (r || i) &&
                          ((a = c.url.length) > 1 && c.loadError < a
                            ? ((c.urlId = (c.urlId + 1) % a),
                              (c.details = void 0),
                              u.logger.warn(
                                "level controller, " +
                                  d +
                                  " for level " +
                                  t +
                                  ": switching to redundant URL-id " +
                                  c.urlId
                              ))
                            : -1 === this.manualLevelIndex
                            ? ((o = 0 === t ? this._levels.length - 1 : t - 1),
                              u.logger.warn(
                                "level controller, " + d + ": switch to " + o
                              ),
                              (this.hls.nextAutoLevel = this.currentLevelIndex =
                                o))
                            : i &&
                              (u.logger.warn(
                                "level controller, " + d + ": reload a fragment"
                              ),
                              (this.currentLevelIndex = null)));
                      }),
                      (l.onFragLoaded = function (e) {
                        var t = e.frag;
                        if (void 0 !== t && "main" === t.type) {
                          var r = this._levels[t.level];
                          void 0 !== r &&
                            ((r.fragmentError = !1),
                            (r.loadError = 0),
                            (this.levelRetryCount = 0));
                        }
                      }),
                      (l.onLevelLoaded = function (e) {
                        var t = this,
                          r = e.level,
                          i = e.details;
                        if (r === this.currentLevelIndex) {
                          var a = this._levels[r];
                          if (
                            (a.fragmentError ||
                              ((a.loadError = 0), (this.levelRetryCount = 0)),
                            i.live)
                          ) {
                            var n = ae(a.details, i, e.stats.trequest);
                            u.logger.log(
                              "live playlist, reload in " +
                                Math.round(n) +
                                " ms"
                            ),
                              (this.timer = setTimeout(function () {
                                return t.loadLevel();
                              }, n));
                          } else this.clearTimer();
                        }
                      }),
                      (l.onAudioTrackSwitched = function (e) {
                        var t = this.hls.audioTracks[e.id].groupId,
                          r = this.hls.levels[this.currentLevelIndex];
                        if (r && r.audioGroupIds) {
                          for (
                            var i = -1, a = 0;
                            a < r.audioGroupIds.length;
                            a++
                          )
                            if (r.audioGroupIds[a] === t) {
                              i = a;
                              break;
                            }
                          i !== r.urlId && ((r.urlId = i), this.startLoad());
                        }
                      }),
                      (l.loadLevel = function () {
                        if (
                          (u.logger.debug("call to loadLevel"),
                          null !== this.currentLevelIndex && this.canload)
                        ) {
                          var e = this._levels[this.currentLevelIndex];
                          if ("object" == typeof e && e.url.length > 0) {
                            var t = this.currentLevelIndex,
                              r = e.urlId,
                              i = e.url[r];
                            u.logger.log(
                              "Attempt loading level index " +
                                t +
                                " with URL-id " +
                                r
                            ),
                              this.hls.trigger(d.default.LEVEL_LOADING, {
                                url: i,
                                level: t,
                                id: r,
                              });
                          }
                        }
                      }),
                      (l.removeLevel = function (e, t) {
                        var r = this.levels
                          .filter(function (r, i) {
                            return (
                              i !== e ||
                              (r.url.length > 1 &&
                                void 0 !== t &&
                                ((r.url = r.url.filter(function (e, r) {
                                  return r !== t;
                                })),
                                (r.urlId = 0),
                                !0))
                            );
                          })
                          .map(function (e, t) {
                            var r = e.details;
                            return (
                              r &&
                                r.fragments &&
                                r.fragments.forEach(function (e) {
                                  e.level = t;
                                }),
                              e
                            );
                          });
                        (this._levels = r),
                          this.hls.trigger(d.default.LEVELS_UPDATED, {
                            levels: r,
                          });
                      }),
                      (a = i),
                      (n = [
                        {
                          key: "levels",
                          get: function () {
                            return this._levels;
                          },
                        },
                        {
                          key: "level",
                          get: function () {
                            return this.currentLevelIndex;
                          },
                          set: function (e) {
                            var t = this._levels;
                            t &&
                              ((e = Math.min(e, t.length - 1)),
                              (this.currentLevelIndex === e && t[e].details) ||
                                this.setLevelInternal(e));
                          },
                        },
                        {
                          key: "manualLevel",
                          get: function () {
                            return this.manualLevelIndex;
                          },
                          set: function (e) {
                            (this.manualLevelIndex = e),
                              void 0 === this._startLevel &&
                                (this._startLevel = e),
                              -1 !== e && (this.level = e);
                          },
                        },
                        {
                          key: "firstLevel",
                          get: function () {
                            return this._firstLevel;
                          },
                          set: function (e) {
                            this._firstLevel = e;
                          },
                        },
                        {
                          key: "startLevel",
                          get: function () {
                            if (void 0 === this._startLevel) {
                              var e = this.hls.config.startLevel;
                              return void 0 !== e ? e : this._firstLevel;
                            }
                            return this._startLevel;
                          },
                          set: function (e) {
                            this._startLevel = e;
                          },
                        },
                        {
                          key: "nextLoadLevel",
                          get: function () {
                            return -1 !== this.manualLevelIndex
                              ? this.manualLevelIndex
                              : this.hls.nextAutoLevel;
                          },
                          set: function (e) {
                            (this.level = e),
                              -1 === this.manualLevelIndex &&
                                (this.hls.nextAutoLevel = e);
                          },
                        },
                      ]) && Pe(a.prototype, n),
                      o && Pe(a, o),
                      i
                    );
                  })(h),
                  Me = r("./src/demux/id3.js");
                function Be(e, t) {
                  var r;
                  try {
                    r = new Event("addtrack");
                  } catch (e) {
                    (r = document.createEvent("Event")).initEvent(
                      "addtrack",
                      !1,
                      !1
                    );
                  }
                  (r.track = e), t.dispatchEvent(r);
                }
                function Ne(e) {
                  if (null == e ? void 0 : e.cues)
                    for (; e.cues.length > 0; ) e.removeCue(e.cues[0]);
                }
                var Ue = (function (e) {
                    var t, r;
                    function i(t) {
                      var r;
                      return (
                        ((r =
                          e.call(
                            this,
                            t,
                            d.default.MEDIA_ATTACHED,
                            d.default.MEDIA_DETACHING,
                            d.default.FRAG_PARSING_METADATA,
                            d.default.LIVE_BACK_BUFFER_REACHED
                          ) || this).id3Track = void 0),
                        (r.media = void 0),
                        r
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a = i.prototype;
                    return (
                      (a.destroy = function () {
                        h.prototype.destroy.call(this);
                      }),
                      (a.onMediaAttached = function (e) {
                        (this.media = e.media), this.media;
                      }),
                      (a.onMediaDetaching = function () {
                        Ne(this.id3Track),
                          (this.id3Track = void 0),
                          (this.media = void 0);
                      }),
                      (a.getID3Track = function (e) {
                        for (var t = 0; t < e.length; t++) {
                          var r = e[t];
                          if ("metadata" === r.kind && "id3" === r.label)
                            return Be(r, this.media), r;
                        }
                        return this.media.addTextTrack("metadata", "id3");
                      }),
                      (a.onFragParsingMetadata = function (e) {
                        var t = e.frag,
                          r = e.samples;
                        this.id3Track ||
                          ((this.id3Track = this.getID3Track(
                            this.media.textTracks
                          )),
                          (this.id3Track.mode = "hidden"));
                        for (
                          var i =
                              window.WebKitDataCue ||
                              window.VTTCue ||
                              window.TextTrackCue,
                            a = 0;
                          a < r.length;
                          a++
                        ) {
                          var n = Me.default.getID3Frames(r[a].data);
                          if (n) {
                            var o = Math.max(r[a].pts, 0),
                              s = a < r.length - 1 ? r[a + 1].pts : t.endPTS;
                            s || (s = t.start + t.duration),
                              s - o <= 0 && (s = o + 0.25);
                            for (var l = 0; l < n.length; l++) {
                              var d = n[l];
                              if (!Me.default.isTimeStampFrame(d)) {
                                var u = new i(o, s, "");
                                (u.value = d), this.id3Track.addCue(u);
                              }
                            }
                          }
                        }
                      }),
                      (a.onLiveBackBufferReached = function (e) {
                        var t = e.bufferEnd,
                          r = this.id3Track;
                        if (r && r.cues && r.cues.length) {
                          var i = (function (e, t) {
                            if (t < e[0].endTime) return e[0];
                            if (t > e[e.length - 1].endTime)
                              return e[e.length - 1];
                            for (var r = 0, i = e.length - 1; r <= i; ) {
                              var a = Math.floor((i + r) / 2);
                              if (t < e[a].endTime) i = a - 1;
                              else {
                                if (!(t > e[a].endTime)) return e[a];
                                r = a + 1;
                              }
                            }
                            return e[r].endTime - t < t - e[i].endTime
                              ? e[r]
                              : e[i];
                          })(r.cues, t);
                          if (i)
                            for (; r.cues[0] !== i; ) r.removeCue(r.cues[0]);
                        }
                      }),
                      i
                    );
                  })(h),
                  He = (function () {
                    function e(e) {
                      (this.alpha_ = void 0),
                        (this.estimate_ = void 0),
                        (this.totalWeight_ = void 0),
                        (this.alpha_ = e ? Math.exp(Math.log(0.5) / e) : 0),
                        (this.estimate_ = 0),
                        (this.totalWeight_ = 0);
                    }
                    var t = e.prototype;
                    return (
                      (t.sample = function (e, t) {
                        var r = Math.pow(this.alpha_, e);
                        (this.estimate_ = t * (1 - r) + r * this.estimate_),
                          (this.totalWeight_ += e);
                      }),
                      (t.getTotalWeight = function () {
                        return this.totalWeight_;
                      }),
                      (t.getEstimate = function () {
                        if (this.alpha_) {
                          var e = 1 - Math.pow(this.alpha_, this.totalWeight_);
                          return this.estimate_ / e;
                        }
                        return this.estimate_;
                      }),
                      e
                    );
                  })(),
                  je = (function () {
                    function e(e, t, r, i) {
                      (this.hls = void 0),
                        (this.defaultEstimate_ = void 0),
                        (this.minWeight_ = void 0),
                        (this.minDelayMs_ = void 0),
                        (this.slow_ = void 0),
                        (this.fast_ = void 0),
                        (this.hls = e),
                        (this.defaultEstimate_ = i),
                        (this.minWeight_ = 0.001),
                        (this.minDelayMs_ = 50),
                        (this.slow_ = new He(t)),
                        (this.fast_ = new He(r));
                    }
                    var t = e.prototype;
                    return (
                      (t.sample = function (e, t) {
                        var r = (e = Math.max(e, this.minDelayMs_)) / 1e3,
                          i = (8 * t) / r;
                        this.fast_.sample(r, i), this.slow_.sample(r, i);
                      }),
                      (t.canEstimate = function () {
                        var e = this.fast_;
                        return e && e.getTotalWeight() >= this.minWeight_;
                      }),
                      (t.getEstimate = function () {
                        return this.canEstimate()
                          ? Math.min(
                              this.fast_.getEstimate(),
                              this.slow_.getEstimate()
                            )
                          : this.defaultEstimate_;
                      }),
                      (t.destroy = function () {}),
                      e
                    );
                  })();
                function Ge(e, t) {
                  for (var r = 0; r < t.length; r++) {
                    var i = t[r];
                    (i.enumerable = i.enumerable || !1),
                      (i.configurable = !0),
                      "value" in i && (i.writable = !0),
                      Object.defineProperty(e, i.key, i);
                  }
                }
                var ze = window.performance,
                  Ye = (function (e) {
                    var t, r;
                    function i(t) {
                      var r;
                      return (
                        ((r =
                          e.call(
                            this,
                            t,
                            d.default.FRAG_LOADING,
                            d.default.FRAG_LOADED,
                            d.default.FRAG_BUFFERED,
                            d.default.ERROR
                          ) || this).lastLoadedFragLevel = 0),
                        (r._nextAutoLevel = -1),
                        (r.hls = t),
                        (r.timer = null),
                        (r._bwEstimator = null),
                        (r.onCheck = r._abandonRulesCheck.bind(
                          (function (e) {
                            if (void 0 === e)
                              throw new ReferenceError(
                                "this hasn't been initialised - super() hasn't been called"
                              );
                            return e;
                          })(r)
                        )),
                        r
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a,
                      n,
                      o,
                      c = i.prototype;
                    return (
                      (c.destroy = function () {
                        this.clearTimer(), h.prototype.destroy.call(this);
                      }),
                      (c.onFragLoading = function (e) {
                        var t = e.frag;
                        if (
                          "main" === t.type &&
                          (this.timer ||
                            ((this.fragCurrent = t),
                            (this.timer = setInterval(this.onCheck, 100))),
                          !this._bwEstimator)
                        ) {
                          var r,
                            i,
                            a = this.hls,
                            n = a.config,
                            o = t.level;
                          a.levels[o].details.live
                            ? ((r = n.abrEwmaFastLive), (i = n.abrEwmaSlowLive))
                            : ((r = n.abrEwmaFastVoD), (i = n.abrEwmaSlowVoD)),
                            (this._bwEstimator = new je(
                              a,
                              i,
                              r,
                              n.abrEwmaDefaultEstimate
                            ));
                        }
                      }),
                      (c._abandonRulesCheck = function () {
                        var e = this.hls,
                          t = e.media,
                          r = this.fragCurrent;
                        if (r) {
                          var i = r.loader;
                          if (!i || (i.stats && i.stats.aborted))
                            return (
                              u.logger.warn(
                                "frag loader destroy or aborted, disarm abandonRules"
                              ),
                              this.clearTimer(),
                              void (this._nextAutoLevel = -1)
                            );
                          var a = i.stats;
                          if (
                            t &&
                            a &&
                            ((!t.paused && 0 !== t.playbackRate) ||
                              !t.readyState) &&
                            r.autoLevel &&
                            r.level
                          ) {
                            var n = ze.now() - a.trequest,
                              o = Math.abs(t.playbackRate);
                            if (n > (500 * r.duration) / o) {
                              var s = e.levels,
                                l = Math.max(
                                  1,
                                  a.bw ? a.bw / 8 : (1e3 * a.loaded) / n
                                ),
                                c = s[r.level];
                              if (!c) return;
                              var h = c.realBitrate
                                  ? Math.max(c.realBitrate, c.bitrate)
                                  : c.bitrate,
                                f = a.total
                                  ? a.total
                                  : Math.max(
                                      a.loaded,
                                      Math.round((r.duration * h) / 8)
                                    ),
                                p = t.currentTime,
                                g = (f - a.loaded) / l,
                                v =
                                  (z.bufferInfo(t, p, e.config.maxBufferHole)
                                    .end -
                                    p) /
                                  o;
                              if (v < (2 * r.duration) / o && g > v) {
                                var y,
                                  m = e.minAutoLevel;
                                for (y = r.level - 1; y > m; y--) {
                                  var b = s[y].realBitrate
                                    ? Math.max(s[y].realBitrate, s[y].bitrate)
                                    : s[y].bitrate;
                                  if ((r.duration * b) / (6.4 * l) < v) break;
                                }
                                void 0 < g &&
                                  (u.logger.warn(
                                    "loading too slow, abort fragment loading and switch to level " +
                                      y +
                                      ":fragLoadedDelay[" +
                                      y +
                                      "]<fragLoadedDelay[" +
                                      (r.level - 1) +
                                      "];bufferStarvationDelay:" +
                                      (void 0).toFixed(1) +
                                      "<" +
                                      g.toFixed(1) +
                                      ":" +
                                      v.toFixed(1)
                                  ),
                                  (e.nextLoadLevel = y),
                                  this._bwEstimator.sample(n, a.loaded),
                                  i.abort(),
                                  this.clearTimer(),
                                  e.trigger(
                                    d.default.FRAG_LOAD_EMERGENCY_ABORTED,
                                    {
                                      frag: r,
                                      stats: a,
                                    }
                                  ));
                              }
                            }
                          }
                        }
                      }),
                      (c.onFragLoaded = function (e) {
                        var t = e.frag;
                        if (
                          "main" === t.type &&
                          Object(l.isFiniteNumber)(t.sn)
                        ) {
                          if (
                            (this.clearTimer(),
                            (this.lastLoadedFragLevel = t.level),
                            (this._nextAutoLevel = -1),
                            this.hls.config.abrMaxWithRealBitrate)
                          ) {
                            var r = this.hls.levels[t.level],
                              i =
                                (r.loaded ? r.loaded.bytes : 0) +
                                e.stats.loaded,
                              a =
                                (r.loaded ? r.loaded.duration : 0) +
                                e.frag.duration;
                            (r.loaded = {
                              bytes: i,
                              duration: a,
                            }),
                              (r.realBitrate = Math.round((8 * i) / a));
                          }
                          if (e.frag.bitrateTest) {
                            var n = e.stats;
                            (n.tparsed = n.tbuffered = n.tload),
                              this.onFragBuffered(e);
                          }
                        }
                      }),
                      (c.onFragBuffered = function (e) {
                        var t = e.stats,
                          r = e.frag;
                        if (
                          !0 !== t.aborted &&
                          "main" === r.type &&
                          Object(l.isFiniteNumber)(r.sn) &&
                          (!r.bitrateTest || t.tload === t.tbuffered)
                        ) {
                          var i = t.tparsed - t.trequest;
                          u.logger.log(
                            "latency/loading/parsing/append/kbps:" +
                              Math.round(t.tfirst - t.trequest) +
                              "/" +
                              Math.round(t.tload - t.tfirst) +
                              "/" +
                              Math.round(t.tparsed - t.tload) +
                              "/" +
                              Math.round(t.tbuffered - t.tparsed) +
                              "/" +
                              Math.round(
                                (8 * t.loaded) / (t.tbuffered - t.trequest)
                              )
                          ),
                            this._bwEstimator.sample(i, t.loaded),
                            (t.bwEstimate = this._bwEstimator.getEstimate()),
                            r.bitrateTest
                              ? (this.bitrateTestDelay = i / 1e3)
                              : (this.bitrateTestDelay = 0);
                        }
                      }),
                      (c.onError = function (e) {
                        switch (e.details) {
                          case s.ErrorDetails.FRAG_LOAD_ERROR:
                          case s.ErrorDetails.FRAG_LOAD_TIMEOUT:
                            this.clearTimer();
                        }
                      }),
                      (c.clearTimer = function () {
                        clearInterval(this.timer), (this.timer = null);
                      }),
                      (c._findBestLevel = function (e, t, r, i, a, n, o, s, l) {
                        for (var d = a; d >= i; d--) {
                          var c = l[d];
                          if (c) {
                            var h = c.details,
                              f = h ? h.totalduration / h.fragments.length : t,
                              p = !!h && h.live,
                              g = void 0;
                            g = d <= e ? o * r : s * r;
                            var v = l[d].realBitrate
                                ? Math.max(l[d].realBitrate, l[d].bitrate)
                                : l[d].bitrate,
                              y = (v * f) / g;
                            if (
                              (u.logger.trace(
                                "level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: " +
                                  d +
                                  "/" +
                                  Math.round(g) +
                                  "/" +
                                  v +
                                  "/" +
                                  f +
                                  "/" +
                                  n +
                                  "/" +
                                  y
                              ),
                              g > v &&
                                (!y || (p && !this.bitrateTestDelay) || y < n))
                            )
                              return d;
                          }
                        }
                        return -1;
                      }),
                      (a = i),
                      (n = [
                        {
                          key: "nextAutoLevel",
                          get: function () {
                            var e = this._nextAutoLevel,
                              t = this._bwEstimator;
                            if (!(-1 === e || (t && t.canEstimate()))) return e;
                            var r = this._nextABRAutoLevel;
                            return -1 !== e && (r = Math.min(e, r)), r;
                          },
                          set: function (e) {
                            this._nextAutoLevel = e;
                          },
                        },
                        {
                          key: "_nextABRAutoLevel",
                          get: function () {
                            var e = this.hls,
                              t = e.maxAutoLevel,
                              r = e.levels,
                              i = e.config,
                              a = e.minAutoLevel,
                              n = e.media,
                              o = this.lastLoadedFragLevel,
                              s = this.fragCurrent
                                ? this.fragCurrent.duration
                                : 0,
                              l = n ? n.currentTime : 0,
                              d =
                                n && 0 !== n.playbackRate
                                  ? Math.abs(n.playbackRate)
                                  : 1,
                              c = this._bwEstimator
                                ? this._bwEstimator.getEstimate()
                                : i.abrEwmaDefaultEstimate,
                              h =
                                (z.bufferInfo(n, l, i.maxBufferHole).end - l) /
                                d,
                              f = this._findBestLevel(
                                o,
                                s,
                                c,
                                a,
                                t,
                                h,
                                i.abrBandWidthFactor,
                                i.abrBandWidthUpFactor,
                                r
                              );
                            if (f >= 0) return f;
                            u.logger.trace(
                              "rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering"
                            );
                            var p = s
                                ? Math.min(s, i.maxStarvationDelay)
                                : i.maxStarvationDelay,
                              g = i.abrBandWidthFactor,
                              v = i.abrBandWidthUpFactor;
                            if (0 === h) {
                              var y = this.bitrateTestDelay;
                              y &&
                                ((p =
                                  (s
                                    ? Math.min(s, i.maxLoadingDelay)
                                    : i.maxLoadingDelay) - y),
                                u.logger.trace(
                                  "bitrate test took " +
                                    Math.round(1e3 * y) +
                                    "ms, set first fragment max fetchDuration to " +
                                    Math.round(1e3 * p) +
                                    " ms"
                                ),
                                (g = v = 1));
                            }
                            return (
                              (f = this._findBestLevel(
                                o,
                                s,
                                c,
                                a,
                                t,
                                h + p,
                                g,
                                v,
                                r
                              )),
                              Math.max(f, 0)
                            );
                          },
                        },
                      ]) && Ge(a.prototype, n),
                      o && Ge(a, o),
                      i
                    );
                  })(h),
                  Ke = q(),
                  Ve = (function (e) {
                    var t, r;
                    function i(t) {
                      var r;
                      return (
                        ((r =
                          e.call(
                            this,
                            t,
                            d.default.MEDIA_ATTACHING,
                            d.default.MEDIA_DETACHING,
                            d.default.MANIFEST_PARSED,
                            d.default.BUFFER_RESET,
                            d.default.BUFFER_APPENDING,
                            d.default.BUFFER_CODECS,
                            d.default.BUFFER_EOS,
                            d.default.BUFFER_FLUSHING,
                            d.default.LEVEL_PTS_UPDATED,
                            d.default.LEVEL_UPDATED
                          ) || this)._msDuration = null),
                        (r._levelDuration = null),
                        (r._levelTargetDuration = 10),
                        (r._live = null),
                        (r._objectUrl = null),
                        (r._needsFlush = !1),
                        (r._needsEos = !1),
                        (r.config = void 0),
                        (r.audioTimestampOffset = void 0),
                        (r.bufferCodecEventsExpected = 0),
                        (r._bufferCodecEventsTotal = 0),
                        (r.media = null),
                        (r.mediaSource = null),
                        (r.segments = []),
                        (r.parent = void 0),
                        (r.appending = !1),
                        (r.appended = 0),
                        (r.appendError = 0),
                        (r.flushBufferCounter = 0),
                        (r.tracks = {}),
                        (r.pendingTracks = {}),
                        (r.sourceBuffer = {}),
                        (r.flushRange = []),
                        (r._onMediaSourceOpen = function () {
                          u.logger.log("media source opened"),
                            r.hls.trigger(d.default.MEDIA_ATTACHED, {
                              media: r.media,
                            });
                          var e = r.mediaSource;
                          e &&
                            e.removeEventListener(
                              "sourceopen",
                              r._onMediaSourceOpen
                            ),
                            r.checkPendingTracks();
                        }),
                        (r._onMediaSourceClose = function () {
                          u.logger.log("media source closed");
                        }),
                        (r._onMediaSourceEnded = function () {
                          u.logger.log("media source ended");
                        }),
                        (r._onSBUpdateEnd = function () {
                          if (r.audioTimestampOffset && r.sourceBuffer.audio) {
                            var e = r.sourceBuffer.audio;
                            u.logger.warn(
                              "change mpeg audio timestamp offset from " +
                                e.timestampOffset +
                                " to " +
                                r.audioTimestampOffset
                            ),
                              (e.timestampOffset = r.audioTimestampOffset),
                              delete r.audioTimestampOffset;
                          }
                          r._needsFlush && r.doFlush(),
                            r._needsEos && r.checkEos(),
                            (r.appending = !1);
                          var t = r.parent,
                            i = r.segments.reduce(function (e, r) {
                              return r.parent === t ? e + 1 : e;
                            }, 0),
                            a = {},
                            n = r.sourceBuffer;
                          for (var o in n) {
                            var s = n[o];
                            if (!s)
                              throw Error(
                                "handling source buffer update end error: source buffer for " +
                                  o +
                                  " uninitilized and unable to update buffered TimeRanges."
                              );
                            a[o] = s.buffered;
                          }
                          r.hls.trigger(d.default.BUFFER_APPENDED, {
                            parent: t,
                            pending: i,
                            timeRanges: a,
                          }),
                            r._needsFlush || r.doAppending(),
                            r.updateMediaElementDuration(),
                            0 === i && r.flushLiveBackBuffer();
                        }),
                        (r._onSBUpdateError = function (e) {
                          u.logger.error("sourceBuffer error:", e),
                            r.hls.trigger(d.default.ERROR, {
                              type: s.ErrorTypes.MEDIA_ERROR,
                              details: s.ErrorDetails.BUFFER_APPENDING_ERROR,
                              fatal: !1,
                            });
                        }),
                        (r.config = t.config),
                        r
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a = i.prototype;
                    return (
                      (a.destroy = function () {
                        h.prototype.destroy.call(this);
                      }),
                      (a.onLevelPtsUpdated = function (e) {
                        var t = e.type,
                          r = this.tracks.audio;
                        if (
                          "audio" === t &&
                          r &&
                          "audio/mpeg" === r.container
                        ) {
                          var i = this.sourceBuffer.audio;
                          if (!i)
                            throw Error(
                              "Level PTS Updated and source buffer for audio uninitalized"
                            );
                          if (Math.abs(i.timestampOffset - e.start) > 0.1) {
                            var a = i.updating;
                            try {
                              i.abort();
                            } catch (e) {
                              u.logger.warn("can not abort audio buffer: " + e);
                            }
                            a
                              ? (this.audioTimestampOffset = e.start)
                              : (u.logger.warn(
                                  "change mpeg audio timestamp offset from " +
                                    i.timestampOffset +
                                    " to " +
                                    e.start
                                ),
                                (i.timestampOffset = e.start));
                          }
                        }
                      }),
                      (a.onManifestParsed = function (e) {
                        var t = 2;
                        ((e.audio && !e.video) || !e.altAudio) && (t = 1),
                          (this.bufferCodecEventsExpected =
                            this._bufferCodecEventsTotal =
                              t),
                          u.logger.log(
                            this.bufferCodecEventsExpected +
                              " bufferCodec event(s) expected"
                          );
                      }),
                      (a.onMediaAttaching = function (e) {
                        var t = (this.media = e.media);
                        if (t && Ke) {
                          var r = (this.mediaSource = new Ke());
                          r.addEventListener(
                            "sourceopen",
                            this._onMediaSourceOpen
                          ),
                            r.addEventListener(
                              "sourceended",
                              this._onMediaSourceEnded
                            ),
                            r.addEventListener(
                              "sourceclose",
                              this._onMediaSourceClose
                            ),
                            (t.src = window.URL.createObjectURL(r)),
                            (this._objectUrl = t.src);
                        }
                      }),
                      (a.onMediaDetaching = function () {
                        u.logger.log("media source detaching");
                        var e = this.mediaSource;
                        if (e) {
                          if ("open" === e.readyState)
                            try {
                              e.endOfStream();
                            } catch (e) {
                              u.logger.warn(
                                "onMediaDetaching:" +
                                  e.message +
                                  " while calling endOfStream"
                              );
                            }
                          e.removeEventListener(
                            "sourceopen",
                            this._onMediaSourceOpen
                          ),
                            e.removeEventListener(
                              "sourceended",
                              this._onMediaSourceEnded
                            ),
                            e.removeEventListener(
                              "sourceclose",
                              this._onMediaSourceClose
                            ),
                            this.media &&
                              (this._objectUrl &&
                                window.URL.revokeObjectURL(this._objectUrl),
                              this.media.src === this._objectUrl
                                ? (this.media.removeAttribute("src"),
                                  this.media.load())
                                : u.logger.warn(
                                    "media.src was changed by a third party - skip cleanup"
                                  )),
                            (this.mediaSource = null),
                            (this.media = null),
                            (this._objectUrl = null),
                            (this.bufferCodecEventsExpected =
                              this._bufferCodecEventsTotal),
                            (this.pendingTracks = {}),
                            (this.tracks = {}),
                            (this.sourceBuffer = {}),
                            (this.flushRange = []),
                            (this.segments = []),
                            (this.appended = 0);
                        }
                        this.hls.trigger(d.default.MEDIA_DETACHED);
                      }),
                      (a.checkPendingTracks = function () {
                        var e = this.bufferCodecEventsExpected,
                          t = this.pendingTracks,
                          r = Object.keys(t).length;
                        ((r && !e) || 2 === r) &&
                          (this.createSourceBuffers(t),
                          (this.pendingTracks = {}),
                          this.doAppending());
                      }),
                      (a.onBufferReset = function () {
                        var e = this.sourceBuffer;
                        for (var t in e) {
                          var r = e[t];
                          try {
                            r &&
                              (this.mediaSource &&
                                this.mediaSource.removeSourceBuffer(r),
                              r.removeEventListener(
                                "updateend",
                                this._onSBUpdateEnd
                              ),
                              r.removeEventListener(
                                "error",
                                this._onSBUpdateError
                              ));
                          } catch (e) {}
                        }
                        (this.sourceBuffer = {}),
                          (this.flushRange = []),
                          (this.segments = []),
                          (this.appended = 0);
                      }),
                      (a.onBufferCodecs = function (e) {
                        var t = this;
                        Object.keys(this.sourceBuffer).length ||
                          (Object.keys(e).forEach(function (r) {
                            t.pendingTracks[r] = e[r];
                          }),
                          (this.bufferCodecEventsExpected = Math.max(
                            this.bufferCodecEventsExpected - 1,
                            0
                          )),
                          this.mediaSource &&
                            "open" === this.mediaSource.readyState &&
                            this.checkPendingTracks());
                      }),
                      (a.createSourceBuffers = function (e) {
                        var t = this.sourceBuffer,
                          r = this.mediaSource;
                        if (!r)
                          throw Error(
                            "createSourceBuffers called when mediaSource was null"
                          );
                        for (var i in e)
                          if (!t[i]) {
                            var a = e[i];
                            if (!a)
                              throw Error(
                                "source buffer exists for track " +
                                  i +
                                  ", however track does not"
                              );
                            var n = a.levelCodec || a.codec,
                              o = a.container + ";codecs=" + n;
                            u.logger.log("creating sourceBuffer(" + o + ")");
                            try {
                              var l = (t[i] = r.addSourceBuffer(o));
                              l.addEventListener(
                                "updateend",
                                this._onSBUpdateEnd
                              ),
                                l.addEventListener(
                                  "error",
                                  this._onSBUpdateError
                                ),
                                (this.tracks[i] = {
                                  buffer: l,
                                  codec: n,
                                  id: a.id,
                                  container: a.container,
                                  levelCodec: a.levelCodec,
                                });
                            } catch (e) {
                              u.logger.error(
                                "error while trying to add sourceBuffer:" +
                                  e.message
                              ),
                                this.hls.trigger(d.default.ERROR, {
                                  type: s.ErrorTypes.MEDIA_ERROR,
                                  details:
                                    s.ErrorDetails.BUFFER_ADD_CODEC_ERROR,
                                  fatal: !1,
                                  err: e,
                                  mimeType: o,
                                });
                            }
                          }
                        this.hls.trigger(d.default.BUFFER_CREATED, {
                          tracks: this.tracks,
                        });
                      }),
                      (a.onBufferAppending = function (e) {
                        this._needsFlush ||
                          (this.segments
                            ? this.segments.push(e)
                            : (this.segments = [e]),
                          this.doAppending());
                      }),
                      (a.onBufferEos = function (e) {
                        for (var t in this.sourceBuffer)
                          if (!e.type || e.type === t) {
                            var r = this.sourceBuffer[t];
                            r &&
                              !r.ended &&
                              ((r.ended = !0),
                              u.logger.log(t + " sourceBuffer now EOS"));
                          }
                        this.checkEos();
                      }),
                      (a.checkEos = function () {
                        var e = this.sourceBuffer,
                          t = this.mediaSource;
                        if (t && "open" === t.readyState) {
                          for (var r in e) {
                            var i = e[r];
                            if (i) {
                              if (!i.ended) return;
                              if (i.updating) return void (this._needsEos = !0);
                            }
                          }
                          u.logger.log(
                            "all media data are available, signal endOfStream() to MediaSource and stop loading fragment"
                          );
                          try {
                            t.endOfStream();
                          } catch (e) {
                            u.logger.warn(
                              "exception while calling mediaSource.endOfStream()"
                            );
                          }
                          this._needsEos = !1;
                        } else this._needsEos = !1;
                      }),
                      (a.onBufferFlushing = function (e) {
                        e.type
                          ? this.flushRange.push({
                              start: e.startOffset,
                              end: e.endOffset,
                              type: e.type,
                            })
                          : (this.flushRange.push({
                              start: e.startOffset,
                              end: e.endOffset,
                              type: "video",
                            }),
                            this.flushRange.push({
                              start: e.startOffset,
                              end: e.endOffset,
                              type: "audio",
                            })),
                          (this.flushBufferCounter = 0),
                          this.doFlush();
                      }),
                      (a.flushLiveBackBuffer = function () {
                        if (this._live) {
                          var e = this.config.liveBackBufferLength;
                          if (isFinite(e) && !(e < 0))
                            if (this.media)
                              for (
                                var t = this.media.currentTime,
                                  r = this.sourceBuffer,
                                  i = Object.keys(r),
                                  a =
                                    t - Math.max(e, this._levelTargetDuration),
                                  n = i.length - 1;
                                n >= 0;
                                n--
                              ) {
                                var o = i[n],
                                  s = r[o];
                                if (s) {
                                  var l = s.buffered;
                                  l.length > 0 &&
                                    a > l.start(0) &&
                                    this.removeBufferRange(o, s, 0, a) &&
                                    this.hls.trigger(
                                      d.default.LIVE_BACK_BUFFER_REACHED,
                                      {
                                        bufferEnd: a,
                                      }
                                    );
                                }
                              }
                            else
                              u.logger.error(
                                "flushLiveBackBuffer called without attaching media"
                              );
                        }
                      }),
                      (a.onLevelUpdated = function (e) {
                        var t = e.details;
                        t.fragments.length > 0 &&
                          ((this._levelDuration =
                            t.totalduration + t.fragments[0].start),
                          (this._levelTargetDuration =
                            t.averagetargetduration || t.targetduration || 10),
                          (this._live = t.live),
                          this.updateMediaElementDuration());
                      }),
                      (a.updateMediaElementDuration = function () {
                        var e,
                          t = this.config;
                        if (
                          null !== this._levelDuration &&
                          this.media &&
                          this.mediaSource &&
                          this.sourceBuffer &&
                          0 !== this.media.readyState &&
                          "open" === this.mediaSource.readyState
                        ) {
                          for (var r in this.sourceBuffer) {
                            var i = this.sourceBuffer[r];
                            if (i && !0 === i.updating) return;
                          }
                          (e = this.media.duration),
                            null === this._msDuration &&
                              (this._msDuration = this.mediaSource.duration),
                            !0 === this._live && !0 === t.liveDurationInfinity
                              ? (u.logger.log(
                                  "Media Source duration is set to Infinity"
                                ),
                                (this._msDuration = this.mediaSource.duration =
                                  1 / 0))
                              : ((this._levelDuration > this._msDuration &&
                                  this._levelDuration > e) ||
                                  !Object(l.isFiniteNumber)(e)) &&
                                (u.logger.log(
                                  "Updating Media Source duration to " +
                                    this._levelDuration.toFixed(3)
                                ),
                                (this._msDuration = this.mediaSource.duration =
                                  this._levelDuration));
                        }
                      }),
                      (a.doFlush = function () {
                        for (; this.flushRange.length; ) {
                          var e = this.flushRange[0];
                          if (!this.flushBuffer(e.start, e.end, e.type))
                            return void (this._needsFlush = !0);
                          this.flushRange.shift(),
                            (this.flushBufferCounter = 0);
                        }
                        if (0 === this.flushRange.length) {
                          this._needsFlush = !1;
                          var t = 0,
                            r = this.sourceBuffer;
                          try {
                            for (var i in r) {
                              var a = r[i];
                              a && (t += a.buffered.length);
                            }
                          } catch (e) {
                            u.logger.error(
                              "error while accessing sourceBuffer.buffered"
                            );
                          }
                          (this.appended = t),
                            this.hls.trigger(d.default.BUFFER_FLUSHED);
                        }
                      }),
                      (a.doAppending = function () {
                        var e = this.config,
                          t = this.hls,
                          r = this.segments,
                          i = this.sourceBuffer;
                        if (Object.keys(i).length) {
                          if (!this.media || this.media.error)
                            return (
                              (this.segments = []),
                              void u.logger.error(
                                "trying to append although a media error occured, flush segment and abort"
                              )
                            );
                          if (!this.appending) {
                            var a = r.shift();
                            if (a)
                              try {
                                var n = i[a.type];
                                if (!n) return void this._onSBUpdateEnd();
                                if (n.updating) return void r.unshift(a);
                                (n.ended = !1),
                                  (this.parent = a.parent),
                                  n.appendBuffer(a.data),
                                  (this.appendError = 0),
                                  this.appended++,
                                  (this.appending = !0);
                              } catch (i) {
                                u.logger.error(
                                  "error while trying to append buffer:" +
                                    i.message
                                ),
                                  r.unshift(a);
                                var o = {
                                  type: s.ErrorTypes.MEDIA_ERROR,
                                  parent: a.parent,
                                  details: "",
                                  fatal: !1,
                                };
                                22 === i.code
                                  ? ((this.segments = []),
                                    (o.details =
                                      s.ErrorDetails.BUFFER_FULL_ERROR))
                                  : (this.appendError++,
                                    (o.details =
                                      s.ErrorDetails.BUFFER_APPEND_ERROR),
                                    this.appendError > e.appendErrorMaxRetry &&
                                      (u.logger.log(
                                        "fail " +
                                          e.appendErrorMaxRetry +
                                          " times to append segment in sourceBuffer"
                                      ),
                                      (this.segments = []),
                                      (o.fatal = !0))),
                                  t.trigger(d.default.ERROR, o);
                              }
                          }
                        }
                      }),
                      (a.flushBuffer = function (e, t, r) {
                        var i = this.sourceBuffer;
                        if (!Object.keys(i).length) return !0;
                        var a = "null";
                        if (
                          (this.media &&
                            (a = this.media.currentTime.toFixed(3)),
                          u.logger.log(
                            "flushBuffer,pos/start/end: " +
                              a +
                              "/" +
                              e +
                              "/" +
                              t
                          ),
                          this.flushBufferCounter >= this.appended)
                        )
                          return (
                            u.logger.warn("abort flushing too many retries"), !0
                          );
                        var n = i[r];
                        if (n) {
                          if (((n.ended = !1), n.updating))
                            return (
                              u.logger.warn(
                                "cannot flush, sb updating in progress"
                              ),
                              !1
                            );
                          if (this.removeBufferRange(r, n, e, t))
                            return this.flushBufferCounter++, !1;
                        }
                        return u.logger.log("buffer flushed"), !0;
                      }),
                      (a.removeBufferRange = function (e, t, r, i) {
                        try {
                          for (var a = 0; a < t.buffered.length; a++) {
                            var n = t.buffered.start(a),
                              o = t.buffered.end(a),
                              s = Math.max(n, r),
                              l = Math.min(o, i);
                            if (Math.min(l, o) - s > 0.5) {
                              var d = "null";
                              return (
                                this.media &&
                                  (d = this.media.currentTime.toString()),
                                u.logger.log(
                                  "sb remove " +
                                    e +
                                    " [" +
                                    s +
                                    "," +
                                    l +
                                    "], of [" +
                                    n +
                                    "," +
                                    o +
                                    "], pos:" +
                                    d
                                ),
                                t.remove(s, l),
                                !0
                              );
                            }
                          }
                        } catch (e) {
                          u.logger.warn("removeBufferRange failed", e);
                        }
                        return !1;
                      }),
                      i
                    );
                  })(h);
                function qe(e, t) {
                  for (var r = 0; r < t.length; r++) {
                    var i = t[r];
                    (i.enumerable = i.enumerable || !1),
                      (i.configurable = !0),
                      "value" in i && (i.writable = !0),
                      Object.defineProperty(e, i.key, i);
                  }
                }
                var We = (function (e) {
                    var t, r;
                    function i(t) {
                      var r;
                      return (
                        ((r =
                          e.call(
                            this,
                            t,
                            d.default.FPS_DROP_LEVEL_CAPPING,
                            d.default.MEDIA_ATTACHING,
                            d.default.MANIFEST_PARSED,
                            d.default.LEVELS_UPDATED,
                            d.default.BUFFER_CODECS,
                            d.default.MEDIA_DETACHING
                          ) || this).autoLevelCapping =
                          Number.POSITIVE_INFINITY),
                        (r.firstLevel = null),
                        (r.levels = []),
                        (r.media = null),
                        (r.restrictedLevels = []),
                        (r.timer = null),
                        (r.clientRect = null),
                        r
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a,
                      n,
                      o,
                      s = i.prototype;
                    return (
                      (s.destroy = function () {
                        this.hls.config.capLevelToPlayerSize &&
                          ((this.media = null),
                          (this.clientRect = null),
                          this.stopCapping());
                      }),
                      (s.onFpsDropLevelCapping = function (e) {
                        i.isLevelAllowed(
                          e.droppedLevel,
                          this.restrictedLevels
                        ) && this.restrictedLevels.push(e.droppedLevel);
                      }),
                      (s.onMediaAttaching = function (e) {
                        this.media =
                          e.media instanceof window.HTMLVideoElement
                            ? e.media
                            : null;
                      }),
                      (s.onManifestParsed = function (e) {
                        var t = this.hls;
                        (this.restrictedLevels = []),
                          (this.levels = e.levels),
                          (this.firstLevel = e.firstLevel),
                          t.config.capLevelToPlayerSize &&
                            e.video &&
                            this.startCapping();
                      }),
                      (s.onBufferCodecs = function (e) {
                        this.hls.config.capLevelToPlayerSize &&
                          e.video &&
                          this.startCapping();
                      }),
                      (s.onLevelsUpdated = function (e) {
                        this.levels = e.levels;
                      }),
                      (s.onMediaDetaching = function () {
                        this.stopCapping();
                      }),
                      (s.detectPlayerSize = function () {
                        if (this.media) {
                          var e = this.levels ? this.levels.length : 0;
                          if (e) {
                            var t = this.hls;
                            (t.autoLevelCapping = this.getMaxLevel(e - 1)),
                              t.autoLevelCapping > this.autoLevelCapping &&
                                t.streamController.nextLevelSwitch(),
                              (this.autoLevelCapping = t.autoLevelCapping);
                          }
                        }
                      }),
                      (s.getMaxLevel = function (e) {
                        var t = this;
                        if (!this.levels) return -1;
                        var r = this.levels.filter(function (r, a) {
                          return (
                            i.isLevelAllowed(a, t.restrictedLevels) && a <= e
                          );
                        });
                        return (
                          (this.clientRect = null),
                          i.getMaxLevelByMediaSize(
                            r,
                            this.mediaWidth,
                            this.mediaHeight
                          )
                        );
                      }),
                      (s.startCapping = function () {
                        this.timer ||
                          ((this.autoLevelCapping = Number.POSITIVE_INFINITY),
                          (this.hls.firstLevel = this.getMaxLevel(
                            this.firstLevel
                          )),
                          clearInterval(this.timer),
                          (this.timer = setInterval(
                            this.detectPlayerSize.bind(this),
                            1e3
                          )),
                          this.detectPlayerSize());
                      }),
                      (s.stopCapping = function () {
                        (this.restrictedLevels = []),
                          (this.firstLevel = null),
                          (this.autoLevelCapping = Number.POSITIVE_INFINITY),
                          this.timer &&
                            ((this.timer = clearInterval(this.timer)),
                            (this.timer = null));
                      }),
                      (s.getDimensions = function () {
                        if (this.clientRect) return this.clientRect;
                        var e = this.media,
                          t = {
                            width: 0,
                            height: 0,
                          };
                        if (e) {
                          var r = e.getBoundingClientRect();
                          (t.width = r.width),
                            (t.height = r.height),
                            t.width ||
                              t.height ||
                              ((t.width = r.right - r.left || e.width || 0),
                              (t.height = r.bottom - r.top || e.height || 0));
                        }
                        return (this.clientRect = t), t;
                      }),
                      (i.isLevelAllowed = function (e, t) {
                        return void 0 === t && (t = []), -1 === t.indexOf(e);
                      }),
                      (i.getMaxLevelByMediaSize = function (e, t, r) {
                        if (!e || (e && !e.length)) return -1;
                        for (
                          var i, a, n = e.length - 1, o = 0;
                          o < e.length;
                          o += 1
                        ) {
                          var s = e[o];
                          if (
                            (s.width >= t || s.height >= r) &&
                            ((i = s),
                            !(a = e[o + 1]) ||
                              i.width !== a.width ||
                              i.height !== a.height)
                          ) {
                            n = o;
                            break;
                          }
                        }
                        return n;
                      }),
                      (a = i),
                      (o = [
                        {
                          key: "contentScaleFactor",
                          get: function () {
                            var e = 1;
                            try {
                              e = window.devicePixelRatio;
                            } catch (e) {}
                            return e;
                          },
                        },
                      ]),
                      (n = [
                        {
                          key: "mediaWidth",
                          get: function () {
                            return (
                              this.getDimensions().width * i.contentScaleFactor
                            );
                          },
                        },
                        {
                          key: "mediaHeight",
                          get: function () {
                            return (
                              this.getDimensions().height * i.contentScaleFactor
                            );
                          },
                        },
                      ]) && qe(a.prototype, n),
                      o && qe(a, o),
                      i
                    );
                  })(h),
                  Xe = window.performance,
                  Qe = (function (e) {
                    var t, r;
                    function i(t) {
                      return e.call(this, t, d.default.MEDIA_ATTACHING) || this;
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a = i.prototype;
                    return (
                      (a.destroy = function () {
                        this.timer && clearInterval(this.timer),
                          (this.isVideoPlaybackQualityAvailable = !1);
                      }),
                      (a.onMediaAttaching = function (e) {
                        var t = this.hls.config;
                        t.capLevelOnFPSDrop &&
                          ("function" ==
                            typeof (this.video =
                              e.media instanceof window.HTMLVideoElement
                                ? e.media
                                : null).getVideoPlaybackQuality &&
                            (this.isVideoPlaybackQualityAvailable = !0),
                          clearInterval(this.timer),
                          (this.timer = setInterval(
                            this.checkFPSInterval.bind(this),
                            t.fpsDroppedMonitoringPeriod
                          )));
                      }),
                      (a.checkFPS = function (e, t, r) {
                        var i = Xe.now();
                        if (t) {
                          if (this.lastTime) {
                            var a = i - this.lastTime,
                              n = r - this.lastDroppedFrames,
                              o = t - this.lastDecodedFrames,
                              s = (1e3 * n) / a,
                              l = this.hls;
                            if (
                              (l.trigger(d.default.FPS_DROP, {
                                currentDropped: n,
                                currentDecoded: o,
                                totalDroppedFrames: r,
                              }),
                              s > 0 &&
                                n > l.config.fpsDroppedMonitoringThreshold * o)
                            ) {
                              var c = l.currentLevel;
                              u.logger.warn(
                                "drop FPS ratio greater than max allowed value for currentLevel: " +
                                  c
                              ),
                                c > 0 &&
                                  (-1 === l.autoLevelCapping ||
                                    l.autoLevelCapping >= c) &&
                                  ((c -= 1),
                                  l.trigger(d.default.FPS_DROP_LEVEL_CAPPING, {
                                    level: c,
                                    droppedLevel: l.currentLevel,
                                  }),
                                  (l.autoLevelCapping = c),
                                  l.streamController.nextLevelSwitch());
                            }
                          }
                          (this.lastTime = i),
                            (this.lastDroppedFrames = r),
                            (this.lastDecodedFrames = t);
                        }
                      }),
                      (a.checkFPSInterval = function () {
                        var e = this.video;
                        if (e)
                          if (this.isVideoPlaybackQualityAvailable) {
                            var t = e.getVideoPlaybackQuality();
                            this.checkFPS(
                              e,
                              t.totalVideoFrames,
                              t.droppedVideoFrames
                            );
                          } else
                            this.checkFPS(
                              e,
                              e.webkitDecodedFrameCount,
                              e.webkitDroppedFrameCount
                            );
                      }),
                      i
                    );
                  })(h),
                  Ze = (function () {
                    function e(e) {
                      e && e.xhrSetup && (this.xhrSetup = e.xhrSetup);
                    }
                    var t = e.prototype;
                    return (
                      (t.destroy = function () {
                        this.abort(), (this.loader = null);
                      }),
                      (t.abort = function () {
                        var e = this.loader;
                        e &&
                          4 !== e.readyState &&
                          ((this.stats.aborted = !0), e.abort()),
                          window.clearTimeout(this.requestTimeout),
                          (this.requestTimeout = null),
                          window.clearTimeout(this.retryTimeout),
                          (this.retryTimeout = null);
                      }),
                      (t.load = function (e, t, r) {
                        (this.context = e),
                          (this.config = t),
                          (this.callbacks = r),
                          (this.stats = {
                            trequest: window.performance.now(),
                            retry: 0,
                          }),
                          (this.retryDelay = t.retryDelay),
                          this.loadInternal();
                      }),
                      (t.loadInternal = function () {
                        var e,
                          t = this.context;
                        e = this.loader = new window.XMLHttpRequest();
                        var r = this.stats;
                        (r.tfirst = 0), (r.loaded = 0);
                        var i = this.xhrSetup;
                        try {
                          if (i)
                            try {
                              i(e, t.url);
                            } catch (r) {
                              e.open("GET", t.url, !0), i(e, t.url);
                            }
                          e.readyState || e.open("GET", t.url, !0);
                        } catch (r) {
                          return void this.callbacks.onError(
                            {
                              code: e.status,
                              text: r.message,
                            },
                            t,
                            e
                          );
                        }
                        t.rangeEnd &&
                          e.setRequestHeader(
                            "Range",
                            "bytes=" + t.rangeStart + "-" + (t.rangeEnd - 1)
                          ),
                          (e.onreadystatechange =
                            this.readystatechange.bind(this)),
                          (e.onprogress = this.loadprogress.bind(this)),
                          (e.responseType = t.responseType),
                          (this.requestTimeout = window.setTimeout(
                            this.loadtimeout.bind(this),
                            this.config.timeout
                          )),
                          e.send();
                      }),
                      (t.readystatechange = function (e) {
                        var t = e.currentTarget,
                          r = t.readyState,
                          i = this.stats,
                          a = this.context,
                          n = this.config;
                        if (!i.aborted && r >= 2)
                          if (
                            (window.clearTimeout(this.requestTimeout),
                            0 === i.tfirst &&
                              (i.tfirst = Math.max(
                                window.performance.now(),
                                i.trequest
                              )),
                            4 === r)
                          ) {
                            var o = t.status;
                            if (o >= 200 && o < 300) {
                              var s, l;
                              (i.tload = Math.max(
                                i.tfirst,
                                window.performance.now()
                              )),
                                (l =
                                  "arraybuffer" === a.responseType
                                    ? (s = t.response).byteLength
                                    : (s = t.responseText).length),
                                (i.loaded = i.total = l);
                              var d = {
                                url: t.responseURL,
                                data: s,
                              };
                              this.callbacks.onSuccess(d, i, a, t);
                            } else
                              i.retry >= n.maxRetry || (o >= 400 && o < 499)
                                ? (u.logger.error(
                                    o + " while loading " + a.url
                                  ),
                                  this.callbacks.onError(
                                    {
                                      code: o,
                                      text: t.statusText,
                                    },
                                    a,
                                    t
                                  ))
                                : (u.logger.warn(
                                    o +
                                      " while loading " +
                                      a.url +
                                      ", retrying in " +
                                      this.retryDelay +
                                      "..."
                                  ),
                                  this.destroy(),
                                  (this.retryTimeout = window.setTimeout(
                                    this.loadInternal.bind(this),
                                    this.retryDelay
                                  )),
                                  (this.retryDelay = Math.min(
                                    2 * this.retryDelay,
                                    n.maxRetryDelay
                                  )),
                                  i.retry++);
                          } else
                            this.requestTimeout = window.setTimeout(
                              this.loadtimeout.bind(this),
                              n.timeout
                            );
                      }),
                      (t.loadtimeout = function () {
                        u.logger.warn(
                          "timeout while loading " + this.context.url
                        ),
                          this.callbacks.onTimeout(
                            this.stats,
                            this.context,
                            null
                          );
                      }),
                      (t.loadprogress = function (e) {
                        var t = e.currentTarget,
                          r = this.stats;
                        (r.loaded = e.loaded),
                          e.lengthComputable && (r.total = e.total);
                        var i = this.callbacks.onProgress;
                        i && i(r, this.context, null, t);
                      }),
                      e
                    );
                  })();
                function Je(e, t) {
                  for (var r = 0; r < t.length; r++) {
                    var i = t[r];
                    (i.enumerable = i.enumerable || !1),
                      (i.configurable = !0),
                      "value" in i && (i.writable = !0),
                      Object.defineProperty(e, i.key, i);
                  }
                }
                var $e = (function (e) {
                  var t, r;
                  function i(t) {
                    var r;
                    return (
                      ((r =
                        e.call(
                          this,
                          t,
                          d.default.MANIFEST_LOADING,
                          d.default.MANIFEST_PARSED,
                          d.default.AUDIO_TRACK_LOADED,
                          d.default.AUDIO_TRACK_SWITCHED,
                          d.default.LEVEL_LOADED,
                          d.default.ERROR
                        ) || this)._trackId = -1),
                      (r._selectDefaultTrack = !0),
                      (r.tracks = []),
                      (r.trackIdBlacklist = Object.create(null)),
                      (r.audioGroupId = null),
                      r
                    );
                  }
                  (r = e),
                    ((t = i).prototype = Object.create(r.prototype)),
                    (t.prototype.constructor = t),
                    (t.__proto__ = r);
                  var a,
                    n,
                    o,
                    l = i.prototype;
                  return (
                    (l.onManifestLoading = function () {
                      (this.tracks = []),
                        (this._trackId = -1),
                        (this._selectDefaultTrack = !0);
                    }),
                    (l.onManifestParsed = function (e) {
                      var t = (this.tracks = e.audioTracks || []);
                      this.hls.trigger(d.default.AUDIO_TRACKS_UPDATED, {
                        audioTracks: t,
                      }),
                        this._selectAudioGroup(this.hls.nextLoadLevel);
                    }),
                    (l.onAudioTrackLoaded = function (e) {
                      if (e.id >= this.tracks.length)
                        u.logger.warn("Invalid audio track id:", e.id);
                      else {
                        if (
                          (u.logger.log("audioTrack " + e.id + " loaded"),
                          (this.tracks[e.id].details = e.details),
                          e.details.live && !this.hasInterval())
                        ) {
                          var t = 1e3 * e.details.targetduration;
                          this.setInterval(t);
                        }
                        !e.details.live &&
                          this.hasInterval() &&
                          this.clearInterval();
                      }
                    }),
                    (l.onAudioTrackSwitched = function (e) {
                      var t = this.tracks[e.id].groupId;
                      t && this.audioGroupId !== t && (this.audioGroupId = t);
                    }),
                    (l.onLevelLoaded = function (e) {
                      this._selectAudioGroup(e.level);
                    }),
                    (l.onError = function (e) {
                      e.type === s.ErrorTypes.NETWORK_ERROR &&
                        (e.fatal && this.clearInterval(),
                        e.details === s.ErrorDetails.AUDIO_TRACK_LOAD_ERROR &&
                          (u.logger.warn(
                            "Network failure on audio-track id:",
                            e.context.id
                          ),
                          this._handleLoadError()));
                    }),
                    (l._setAudioTrack = function (e) {
                      if (
                        this._trackId === e &&
                        this.tracks[this._trackId].details
                      )
                        u.logger.debug(
                          "Same id as current audio-track passed, and track details available -> no-op"
                        );
                      else if (e < 0 || e >= this.tracks.length)
                        u.logger.warn(
                          "Invalid id passed to audio-track controller"
                        );
                      else {
                        var t = this.tracks[e];
                        u.logger.log("Now switching to audio-track index " + e),
                          this.clearInterval(),
                          (this._trackId = e);
                        var r = t.url,
                          i = t.type,
                          a = t.id;
                        this.hls.trigger(d.default.AUDIO_TRACK_SWITCHING, {
                          id: a,
                          type: i,
                          url: r,
                        }),
                          this._loadTrackDetailsIfNeeded(t);
                      }
                    }),
                    (l.doTick = function () {
                      this._updateTrack(this._trackId);
                    }),
                    (l._selectAudioGroup = function (e) {
                      var t = this.hls.levels[e];
                      if (t && t.audioGroupIds) {
                        var r = t.audioGroupIds[t.urlId];
                        this.audioGroupId !== r &&
                          ((this.audioGroupId = r),
                          this._selectInitialAudioTrack());
                      }
                    }),
                    (l._selectInitialAudioTrack = function () {
                      var e = this,
                        t = this.tracks;
                      if (t.length) {
                        var r = this.tracks[this._trackId],
                          i = null;
                        if ((r && (i = r.name), this._selectDefaultTrack)) {
                          var a = t.filter(function (e) {
                            return e.default;
                          });
                          a.length
                            ? (t = a)
                            : u.logger.warn("No default audio tracks defined");
                        }
                        var n = !1,
                          o = function () {
                            t.forEach(function (t) {
                              n ||
                                (e.audioGroupId &&
                                  t.groupId !== e.audioGroupId) ||
                                (i && i !== t.name) ||
                                (e._setAudioTrack(t.id), (n = !0));
                            });
                          };
                        o(),
                          n || ((i = null), o()),
                          n ||
                            (u.logger.error(
                              "No track found for running audio group-ID: " +
                                this.audioGroupId
                            ),
                            this.hls.trigger(d.default.ERROR, {
                              type: s.ErrorTypes.MEDIA_ERROR,
                              details: s.ErrorDetails.AUDIO_TRACK_LOAD_ERROR,
                              fatal: !0,
                            }));
                      }
                    }),
                    (l._needsTrackLoading = function (e) {
                      var t = e.details,
                        r = e.url;
                      return !((t && !t.live) || !r);
                    }),
                    (l._loadTrackDetailsIfNeeded = function (e) {
                      if (this._needsTrackLoading(e)) {
                        var t = e.url,
                          r = e.id;
                        u.logger.log(
                          "loading audio-track playlist for id: " + r
                        ),
                          this.hls.trigger(d.default.AUDIO_TRACK_LOADING, {
                            url: t,
                            id: r,
                          });
                      }
                    }),
                    (l._updateTrack = function (e) {
                      if (!(e < 0 || e >= this.tracks.length)) {
                        this.clearInterval(),
                          (this._trackId = e),
                          u.logger.log("trying to update audio-track " + e);
                        var t = this.tracks[e];
                        this._loadTrackDetailsIfNeeded(t);
                      }
                    }),
                    (l._handleLoadError = function () {
                      this.trackIdBlacklist[this._trackId] = !0;
                      var e = this._trackId,
                        t = this.tracks[e],
                        r = t.name,
                        i = t.language,
                        a = t.groupId;
                      u.logger.warn(
                        "Loading failed on audio track id: " +
                          e +
                          ", group-id: " +
                          a +
                          ', name/language: "' +
                          r +
                          '" / "' +
                          i +
                          '"'
                      );
                      for (var n = e, o = 0; o < this.tracks.length; o++)
                        if (
                          !this.trackIdBlacklist[o] &&
                          this.tracks[o].name === r
                        ) {
                          n = o;
                          break;
                        }
                      n !== e
                        ? (u.logger.log(
                            "Attempting audio-track fallback id:",
                            n,
                            "group-id:",
                            this.tracks[n].groupId
                          ),
                          this._setAudioTrack(n))
                        : u.logger.warn(
                            'No fallback audio-track found for name/language: "' +
                              r +
                              '" / "' +
                              i +
                              '"'
                          );
                    }),
                    (a = i),
                    (n = [
                      {
                        key: "audioTracks",
                        get: function () {
                          return this.tracks;
                        },
                      },
                      {
                        key: "audioTrack",
                        get: function () {
                          return this._trackId;
                        },
                        set: function (e) {
                          this._setAudioTrack(e),
                            (this._selectDefaultTrack = !1);
                        },
                      },
                    ]) && Je(a.prototype, n),
                    o && Je(a, o),
                    i
                  );
                })(pe);
                function et(e, t) {
                  for (var r = 0; r < t.length; r++) {
                    var i = t[r];
                    (i.enumerable = i.enumerable || !1),
                      (i.configurable = !0),
                      "value" in i && (i.writable = !0),
                      Object.defineProperty(e, i.key, i);
                  }
                }
                var tt = window.performance,
                  rt = (function (e) {
                    var t, r;
                    function i(t, r) {
                      var i;
                      return (
                        ((i =
                          e.call(
                            this,
                            t,
                            d.default.MEDIA_ATTACHED,
                            d.default.MEDIA_DETACHING,
                            d.default.AUDIO_TRACKS_UPDATED,
                            d.default.AUDIO_TRACK_SWITCHING,
                            d.default.AUDIO_TRACK_LOADED,
                            d.default.KEY_LOADED,
                            d.default.FRAG_LOADED,
                            d.default.FRAG_PARSING_INIT_SEGMENT,
                            d.default.FRAG_PARSING_DATA,
                            d.default.FRAG_PARSED,
                            d.default.ERROR,
                            d.default.BUFFER_RESET,
                            d.default.BUFFER_CREATED,
                            d.default.BUFFER_APPENDED,
                            d.default.BUFFER_FLUSHED,
                            d.default.INIT_PTS_FOUND
                          ) || this).fragmentTracker = r),
                        (i.config = t.config),
                        (i.audioCodecSwap = !1),
                        (i._state = ge),
                        (i.initPTS = []),
                        (i.waitingFragment = null),
                        (i.videoTrackCC = null),
                        (i.waitingVideoCC = null),
                        i
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a,
                      n,
                      o,
                      c = i.prototype;
                    return (
                      (c.onInitPtsFound = function (e) {
                        var t = e.id,
                          r = e.frag.cc,
                          i = e.initPTS;
                        "main" === t &&
                          ((this.initPTS[r] = i),
                          (this.videoTrackCC = r),
                          u.logger.log(
                            "InitPTS for cc: " + r + " found from main: " + i
                          ),
                          this.state === Re && this.tick());
                      }),
                      (c.startLoad = function (e) {
                        if (this.tracks) {
                          var t = this.lastCurrentTime;
                          this.stopLoad(),
                            this.setInterval(100),
                            (this.fragLoadError = 0),
                            t > 0 && -1 === e
                              ? (u.logger.log(
                                  "audio:override startPosition with lastCurrentTime @" +
                                    t.toFixed(3)
                                ),
                                (this.state = ye))
                              : ((this.lastCurrentTime = this.startPosition
                                  ? this.startPosition
                                  : e),
                                (this.state = ve)),
                            (this.nextLoadPosition = this.startPosition =
                              this.lastCurrentTime),
                            this.tick();
                        } else (this.startPosition = e), (this.state = ge);
                      }),
                      (c.doTick = function () {
                        var e,
                          t,
                          r,
                          i = this.hls,
                          a = i.config;
                        switch (this.state) {
                          case Ae:
                          case me:
                          case ke:
                            break;
                          case ve:
                            (this.state = Te), (this.loadedmetadata = !1);
                            break;
                          case ye:
                            var n = this.tracks;
                            if (!n) break;
                            if (
                              !this.media &&
                              (this.startFragRequested || !a.startFragPrefetch)
                            )
                              break;
                            if (this.loadedmetadata) e = this.media.currentTime;
                            else if (void 0 === (e = this.nextLoadPosition))
                              break;
                            var o = this.mediaBuffer
                                ? this.mediaBuffer
                                : this.media,
                              s = this.videoBuffer
                                ? this.videoBuffer
                                : this.media,
                              c =
                                e < a.maxBufferHole
                                  ? Math.max(2, a.maxBufferHole)
                                  : a.maxBufferHole,
                              h = z.bufferInfo(o, e, c),
                              f = z.bufferInfo(s, e, c),
                              p = h.len,
                              g = h.end,
                              v = this.fragPrevious,
                              y = Math.min(
                                a.maxBufferLength,
                                a.maxMaxBufferLength
                              ),
                              m = Math.max(y, f.len),
                              b = this.audioSwitch,
                              _ = this.trackId;
                            if ((p < m || b) && _ < n.length) {
                              if (void 0 === (r = n[_].details)) {
                                this.state = Te;
                                break;
                              }
                              if (!b && this._streamEnded(h, r))
                                return (
                                  this.hls.trigger(d.default.BUFFER_EOS, {
                                    type: "audio",
                                  }),
                                  void (this.state = xe)
                                );
                              var w,
                                T = r.fragments,
                                E = T.length,
                                S = T[0].start,
                                k = T[E - 1].start + T[E - 1].duration;
                              if (b)
                                if (r.live && !r.PTSKnown)
                                  u.logger.log(
                                    "switching audiotrack, live stream, unknown PTS,load first fragment"
                                  ),
                                    (g = 0);
                                else if (((g = e), r.PTSKnown && e < S)) {
                                  if (!(h.end > S || h.nextStart)) return;
                                  u.logger.log(
                                    "alt audio track ahead of main track, seek to start of alt audio track"
                                  ),
                                    (this.media.currentTime = S + 0.05);
                                }
                              if (r.initSegment && !r.initSegment.data)
                                w = r.initSegment;
                              else if (g <= S) {
                                if (
                                  ((w = T[0]),
                                  null !== this.videoTrackCC &&
                                    w.cc !== this.videoTrackCC &&
                                    (w = (function (e, t) {
                                      return G.search(e, function (e) {
                                        return e.cc < t ? 1 : e.cc > t ? -1 : 0;
                                      });
                                    })(T, this.videoTrackCC)),
                                  r.live &&
                                    w.loadIdx &&
                                    w.loadIdx === this.fragLoadIdx)
                                ) {
                                  var x = h.nextStart ? h.nextStart : S;
                                  return (
                                    u.logger.log(
                                      "no alt audio available @currentTime:" +
                                        this.media.currentTime +
                                        ", seeking @" +
                                        (x + 0.05)
                                    ),
                                    void (this.media.currentTime = x + 0.05)
                                  );
                                }
                              } else {
                                var A,
                                  R = a.maxFragLookUpTolerance,
                                  L = v ? T[v.sn - T[0].sn + 1] : void 0;
                                g < k
                                  ? (g > k - R && (R = 0),
                                    (A =
                                      L && !ue(g, R, L)
                                        ? L
                                        : G.search(T, function (e) {
                                            return ue(g, R, e);
                                          })))
                                  : (A = T[E - 1]),
                                  A &&
                                    ((w = A),
                                    (S = A.start),
                                    v &&
                                      w.level === v.level &&
                                      w.sn === v.sn &&
                                      (w.sn < r.endSN
                                        ? ((w = T[w.sn + 1 - r.startSN]),
                                          this.fragmentTracker.getState(w) !==
                                            H &&
                                            u.logger.log(
                                              "SN just loaded, load next one: " +
                                                w.sn
                                            ))
                                        : (w = null)));
                              }
                              w &&
                                (w.encrypted
                                  ? (u.logger.log(
                                      "Loading key for " +
                                        w.sn +
                                        " of [" +
                                        r.startSN +
                                        " ," +
                                        r.endSN +
                                        "],track " +
                                        _
                                    ),
                                    (this.state = be),
                                    i.trigger(d.default.KEY_LOADING, {
                                      frag: w,
                                    }))
                                  : ((this.fragCurrent = w),
                                    (b ||
                                      this.fragmentTracker.getState(w) === B) &&
                                      (u.logger.log(
                                        "Loading " +
                                          w.sn +
                                          ", cc: " +
                                          w.cc +
                                          " of [" +
                                          r.startSN +
                                          " ," +
                                          r.endSN +
                                          "],track " +
                                          _ +
                                          ", " +
                                          (this.loadedmetadata
                                            ? "currentTime"
                                            : "nextLoadPosition") +
                                          ": " +
                                          e +
                                          ", bufferEnd: " +
                                          g.toFixed(3)
                                      ),
                                      "initSegment" !== w.sn &&
                                        (this.startFragRequested = !0),
                                      Object(l.isFiniteNumber)(w.sn) &&
                                        (this.nextLoadPosition =
                                          w.start + w.duration),
                                      i.trigger(d.default.FRAG_LOADING, {
                                        frag: w,
                                      }),
                                      (this.state = _e))));
                            }
                            break;
                          case Te:
                            (t = this.tracks[this.trackId]) &&
                              t.details &&
                              (this.state = ye);
                            break;
                          case we:
                            var D = tt.now(),
                              C = this.retryDate,
                              O = (o = this.media) && o.seeking;
                            (!C || D >= C || O) &&
                              (u.logger.log(
                                "audioStreamController: retryDate reached, switch back to IDLE state"
                              ),
                              (this.state = ye));
                            break;
                          case Re:
                            var I = this.waitingFragment;
                            if (I) {
                              var P = I.frag.cc;
                              if (void 0 !== this.initPTS[P])
                                (this.waitingFragment = null),
                                  (this.state = _e),
                                  this.onFragLoaded(I);
                              else if (
                                this.videoTrackCC !== this.waitingVideoCC
                              )
                                u.logger.log(
                                  "Waiting fragment cc (" +
                                    P +
                                    ") cancelled because video is at cc " +
                                    this.videoTrackCC
                                ),
                                  this.clearWaitingFragment();
                              else {
                                var F = z.bufferInfo(
                                  this.mediaBuffer,
                                  this.media.currentTime,
                                  a.maxBufferHole
                                );
                                ue(F.end, a.maxFragLookUpTolerance, I.frag) <
                                  0 &&
                                  (u.logger.log(
                                    "Waiting fragment cc (" +
                                      P +
                                      ") @ " +
                                      I.frag.start +
                                      " cancelled because another fragment at " +
                                      F.end +
                                      " is needed"
                                  ),
                                  this.clearWaitingFragment());
                              }
                            } else this.state = ye;
                        }
                      }),
                      (c.clearWaitingFragment = function () {
                        var e = this.waitingFragment;
                        e &&
                          (this.fragmentTracker.removeFragment(e.frag),
                          (this.waitingFragment = null),
                          (this.waitingVideoCC = null),
                          (this.state = ye));
                      }),
                      (c.onMediaAttached = function (e) {
                        var t = (this.media = this.mediaBuffer = e.media);
                        (this.onvseeking = this.onMediaSeeking.bind(this)),
                          (this.onvended = this.onMediaEnded.bind(this)),
                          t.addEventListener("seeking", this.onvseeking),
                          t.addEventListener("ended", this.onvended);
                        var r = this.config;
                        this.tracks &&
                          r.autoStartLoad &&
                          this.startLoad(r.startPosition);
                      }),
                      (c.onMediaDetaching = function () {
                        var e = this.media;
                        e &&
                          e.ended &&
                          (u.logger.log(
                            "MSE detaching and video ended, reset startPosition"
                          ),
                          (this.startPosition = this.lastCurrentTime = 0)),
                          e &&
                            (e.removeEventListener("seeking", this.onvseeking),
                            e.removeEventListener("ended", this.onvended),
                            (this.onvseeking =
                              this.onvseeked =
                              this.onvended =
                                null)),
                          (this.media =
                            this.mediaBuffer =
                            this.videoBuffer =
                              null),
                          (this.loadedmetadata = !1),
                          this.fragmentTracker.removeAllFragments(),
                          this.stopLoad();
                      }),
                      (c.onAudioTracksUpdated = function (e) {
                        u.logger.log("audio tracks updated"),
                          (this.tracks = e.audioTracks);
                      }),
                      (c.onAudioTrackSwitching = function (e) {
                        var t = !!e.url;
                        (this.trackId = e.id),
                          (this.fragCurrent = null),
                          this.clearWaitingFragment(),
                          (this.state = me),
                          t
                            ? this.setInterval(100)
                            : this.demuxer &&
                              (this.demuxer.destroy(), (this.demuxer = null)),
                          t && ((this.audioSwitch = !0), (this.state = ye)),
                          this.tick();
                      }),
                      (c.onAudioTrackLoaded = function (e) {
                        var t = e.details,
                          r = e.id,
                          i = this.tracks[r],
                          a = i.details,
                          n = t.totalduration,
                          o = 0;
                        if (
                          (u.logger.log(
                            "track " +
                              r +
                              " loaded [" +
                              t.startSN +
                              "," +
                              t.endSN +
                              "],duration:" +
                              n
                          ),
                          t.live || (a && a.live)
                            ? a && t.fragments.length > 0
                              ? (re(a, t),
                                (o = t.fragments[0].start),
                                t.PTSKnown
                                  ? u.logger.log(
                                      "live audio playlist sliding:" +
                                        o.toFixed(3)
                                    )
                                  : u.logger.log(
                                      "live audio playlist - outdated PTS, unknown sliding"
                                    ))
                              : ((t.PTSKnown = !1),
                                u.logger.log(
                                  "live audio playlist - first load, unknown sliding"
                                ))
                            : (t.PTSKnown = !1),
                          (i.details = t),
                          !this.startFragRequested)
                        ) {
                          if (-1 === this.startPosition) {
                            var s = t.startTimeOffset;
                            Object(l.isFiniteNumber)(s)
                              ? (u.logger.log(
                                  "start time offset found in playlist, adjust startPosition to " +
                                    s
                                ),
                                (this.startPosition = s))
                              : t.live
                              ? ((this.startPosition = this.computeLivePosition(
                                  o,
                                  t
                                )),
                                u.logger.log(
                                  "compute startPosition for audio-track to " +
                                    this.startPosition
                                ))
                              : (this.startPosition = 0);
                          }
                          this.nextLoadPosition = this.startPosition;
                        }
                        this.state === Te && (this.state = ye), this.tick();
                      }),
                      (c.onKeyLoaded = function () {
                        this.state === be && ((this.state = ye), this.tick());
                      }),
                      (c.onFragLoaded = function (e) {
                        var t = this.fragCurrent,
                          r = e.frag;
                        if (
                          this.state === _e &&
                          t &&
                          "audio" === r.type &&
                          r.level === t.level &&
                          r.sn === t.sn
                        ) {
                          var i = this.tracks[this.trackId],
                            a = i.details,
                            n = a.totalduration,
                            o = t.level,
                            s = t.sn,
                            l = t.cc,
                            c =
                              this.config.defaultAudioCodec ||
                              i.audioCodec ||
                              "mp4a.40.2",
                            h = (this.stats = e.stats);
                          if ("initSegment" === s)
                            (this.state = ye),
                              (h.tparsed = h.tbuffered = tt.now()),
                              (a.initSegment.data = e.payload),
                              this.hls.trigger(d.default.FRAG_BUFFERED, {
                                stats: h,
                                frag: t,
                                id: "audio",
                              }),
                              this.tick();
                          else {
                            (this.state = Ee),
                              (this.appended = !1),
                              this.demuxer ||
                                (this.demuxer = new J(this.hls, "audio"));
                            var f = this.initPTS[l],
                              p = a.initSegment ? a.initSegment.data : [];
                            void 0 !== f
                              ? ((this.pendingBuffering = !0),
                                u.logger.log(
                                  "Demuxing " +
                                    s +
                                    " of [" +
                                    a.startSN +
                                    " ," +
                                    a.endSN +
                                    "],track " +
                                    o
                                ),
                                this.demuxer.push(
                                  e.payload,
                                  p,
                                  c,
                                  null,
                                  t,
                                  n,
                                  !1,
                                  f
                                ))
                              : (u.logger.log(
                                  "Unknown video PTS for cc " +
                                    l +
                                    ", waiting for video PTS before demuxing audio frag " +
                                    s +
                                    " of [" +
                                    a.startSN +
                                    " ," +
                                    a.endSN +
                                    "],track " +
                                    o
                                ),
                                (this.waitingFragment = e),
                                (this.waitingVideoCC = this.videoTrackCC),
                                (this.state = Re));
                          }
                        }
                        this.fragLoadError = 0;
                      }),
                      (c.onFragParsingInitSegment = function (e) {
                        var t = this.fragCurrent,
                          r = e.frag;
                        if (
                          t &&
                          "audio" === e.id &&
                          r.sn === t.sn &&
                          r.level === t.level &&
                          this.state === Ee
                        ) {
                          var i,
                            a = e.tracks;
                          if ((a.video && delete a.video, (i = a.audio))) {
                            (i.levelCodec = i.codec),
                              (i.id = e.id),
                              this.hls.trigger(d.default.BUFFER_CODECS, a),
                              u.logger.log(
                                "audio track:audio,container:" +
                                  i.container +
                                  ",codecs[level/parsed]=[" +
                                  i.levelCodec +
                                  "/" +
                                  i.codec +
                                  "]"
                              );
                            var n = i.initSegment;
                            if (n) {
                              var o = {
                                type: "audio",
                                data: n,
                                parent: "audio",
                                content: "initSegment",
                              };
                              this.audioSwitch
                                ? (this.pendingData = [o])
                                : ((this.appended = !0),
                                  (this.pendingBuffering = !0),
                                  this.hls.trigger(
                                    d.default.BUFFER_APPENDING,
                                    o
                                  ));
                            }
                            this.tick();
                          }
                        }
                      }),
                      (c.onFragParsingData = function (e) {
                        var t = this,
                          r = this.fragCurrent,
                          i = e.frag;
                        if (
                          r &&
                          "audio" === e.id &&
                          "audio" === e.type &&
                          i.sn === r.sn &&
                          i.level === r.level &&
                          this.state === Ee
                        ) {
                          var a = this.trackId,
                            n = this.tracks[a],
                            o = this.hls;
                          Object(l.isFiniteNumber)(e.endPTS) ||
                            ((e.endPTS = e.startPTS + r.duration),
                            (e.endDTS = e.startDTS + r.duration)),
                            r.addElementaryStream(g.AUDIO),
                            u.logger.log(
                              "parsed " +
                                e.type +
                                ",PTS:[" +
                                e.startPTS.toFixed(3) +
                                "," +
                                e.endPTS.toFixed(3) +
                                "],DTS:[" +
                                e.startDTS.toFixed(3) +
                                "/" +
                                e.endDTS.toFixed(3) +
                                "],nb:" +
                                e.nb
                            ),
                            te(n.details, r, e.startPTS, e.endPTS);
                          var c = this.media,
                            h = !1;
                          if (this.audioSwitch)
                            if (c && c.readyState) {
                              var f = c.currentTime;
                              u.logger.log(
                                "switching audio track : currentTime:" + f
                              ),
                                f >= e.startPTS &&
                                  (u.logger.log(
                                    "switching audio track : flushing all audio"
                                  ),
                                  (this.state = ke),
                                  o.trigger(d.default.BUFFER_FLUSHING, {
                                    startOffset: 0,
                                    endOffset: Number.POSITIVE_INFINITY,
                                    type: "audio",
                                  }),
                                  (h = !0),
                                  (this.audioSwitch = !1),
                                  o.trigger(d.default.AUDIO_TRACK_SWITCHED, {
                                    id: a,
                                  }));
                            } else
                              (this.audioSwitch = !1),
                                o.trigger(d.default.AUDIO_TRACK_SWITCHED, {
                                  id: a,
                                });
                          var p = this.pendingData;
                          if (!p)
                            return (
                              u.logger.warn(
                                "Apparently attempt to enqueue media payload without codec initialization data upfront"
                              ),
                              void o.trigger(d.default.ERROR, {
                                type: s.ErrorTypes.MEDIA_ERROR,
                                details: null,
                                fatal: !0,
                              })
                            );
                          this.audioSwitch ||
                            ([e.data1, e.data2].forEach(function (t) {
                              t &&
                                t.length &&
                                p.push({
                                  type: e.type,
                                  data: t,
                                  parent: "audio",
                                  content: "data",
                                });
                            }),
                            !h &&
                              p.length &&
                              (p.forEach(function (e) {
                                t.state === Ee &&
                                  ((t.pendingBuffering = !0),
                                  t.hls.trigger(d.default.BUFFER_APPENDING, e));
                              }),
                              (this.pendingData = []),
                              (this.appended = !0))),
                            this.tick();
                        }
                      }),
                      (c.onFragParsed = function (e) {
                        var t = this.fragCurrent,
                          r = e.frag;
                        t &&
                          "audio" === e.id &&
                          r.sn === t.sn &&
                          r.level === t.level &&
                          this.state === Ee &&
                          ((this.stats.tparsed = tt.now()),
                          (this.state = Se),
                          this._checkAppendedParsed());
                      }),
                      (c.onBufferReset = function () {
                        (this.mediaBuffer = this.videoBuffer = null),
                          (this.loadedmetadata = !1);
                      }),
                      (c.onBufferCreated = function (e) {
                        var t = e.tracks.audio;
                        t &&
                          ((this.mediaBuffer = t.buffer),
                          (this.loadedmetadata = !0)),
                          e.tracks.video &&
                            (this.videoBuffer = e.tracks.video.buffer);
                      }),
                      (c.onBufferAppended = function (e) {
                        if ("audio" === e.parent) {
                          var t = this.state;
                          (t !== Ee && t !== Se) ||
                            ((this.pendingBuffering = e.pending > 0),
                            this._checkAppendedParsed());
                        }
                      }),
                      (c._checkAppendedParsed = function () {
                        if (
                          !(
                            this.state !== Se ||
                            (this.appended && this.pendingBuffering)
                          )
                        ) {
                          var e = this.fragCurrent,
                            t = this.stats,
                            r = this.hls;
                          if (e) {
                            (this.fragPrevious = e),
                              (t.tbuffered = tt.now()),
                              r.trigger(d.default.FRAG_BUFFERED, {
                                stats: t,
                                frag: e,
                                id: "audio",
                              });
                            var i = this.mediaBuffer
                              ? this.mediaBuffer
                              : this.media;
                            i &&
                              u.logger.log(
                                "audio buffered : " + ne.toString(i.buffered)
                              ),
                              this.audioSwitch &&
                                this.appended &&
                                ((this.audioSwitch = !1),
                                r.trigger(d.default.AUDIO_TRACK_SWITCHED, {
                                  id: this.trackId,
                                })),
                              (this.state = ye);
                          }
                          this.tick();
                        }
                      }),
                      (c.onError = function (e) {
                        var t = e.frag;
                        if (!t || "audio" === t.type)
                          switch (e.details) {
                            case s.ErrorDetails.FRAG_LOAD_ERROR:
                            case s.ErrorDetails.FRAG_LOAD_TIMEOUT:
                              var r = e.frag;
                              if (r && "audio" !== r.type) break;
                              if (!e.fatal) {
                                var i = this.fragLoadError;
                                i ? i++ : (i = 1);
                                var a = this.config;
                                if (i <= a.fragLoadingMaxRetry) {
                                  this.fragLoadError = i;
                                  var n = Math.min(
                                    Math.pow(2, i - 1) *
                                      a.fragLoadingRetryDelay,
                                    a.fragLoadingMaxRetryTimeout
                                  );
                                  u.logger.warn(
                                    "AudioStreamController: frag loading failed, retry in " +
                                      n +
                                      " ms"
                                  ),
                                    (this.retryDate = tt.now() + n),
                                    (this.state = we);
                                } else
                                  u.logger.error(
                                    "AudioStreamController: " +
                                      e.details +
                                      " reaches max retry, redispatch as fatal ..."
                                  ),
                                    (e.fatal = !0),
                                    (this.state = Ae);
                              }
                              break;
                            case s.ErrorDetails.AUDIO_TRACK_LOAD_ERROR:
                            case s.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:
                            case s.ErrorDetails.KEY_LOAD_ERROR:
                            case s.ErrorDetails.KEY_LOAD_TIMEOUT:
                              this.state !== Ae &&
                                ((this.state = e.fatal ? Ae : ye),
                                u.logger.warn(
                                  "AudioStreamController: " +
                                    e.details +
                                    " while loading frag, now switching to " +
                                    this.state +
                                    " state ..."
                                ));
                              break;
                            case s.ErrorDetails.BUFFER_FULL_ERROR:
                              if (
                                "audio" === e.parent &&
                                (this.state === Ee || this.state === Se)
                              ) {
                                var o = this.mediaBuffer,
                                  l = this.media.currentTime;
                                if (
                                  o &&
                                  z.isBuffered(o, l) &&
                                  z.isBuffered(o, l + 0.5)
                                ) {
                                  var c = this.config;
                                  c.maxMaxBufferLength >= c.maxBufferLength &&
                                    ((c.maxMaxBufferLength /= 2),
                                    u.logger.warn(
                                      "AudioStreamController: reduce max buffer length to " +
                                        c.maxMaxBufferLength +
                                        "s"
                                    )),
                                    (this.state = ye);
                                } else
                                  u.logger.warn(
                                    "AudioStreamController: buffer full error also media.currentTime is not buffered, flush audio buffer"
                                  ),
                                    (this.fragCurrent = null),
                                    (this.state = ke),
                                    this.hls.trigger(
                                      d.default.BUFFER_FLUSHING,
                                      {
                                        startOffset: 0,
                                        endOffset: Number.POSITIVE_INFINITY,
                                        type: "audio",
                                      }
                                    );
                              }
                          }
                      }),
                      (c.onBufferFlushed = function () {
                        var e = this,
                          t = this.pendingData;
                        t && t.length
                          ? (u.logger.log(
                              "AudioStreamController: appending pending audio data after buffer flushed"
                            ),
                            t.forEach(function (t) {
                              e.hls.trigger(d.default.BUFFER_APPENDING, t);
                            }),
                            (this.appended = !0),
                            (this.pendingData = []),
                            (this.state = Se))
                          : ((this.state = ye),
                            (this.fragPrevious = null),
                            this.tick());
                      }),
                      (a = i),
                      (n = [
                        {
                          key: "state",
                          set: function (e) {
                            if (this.state !== e) {
                              var t = this.state;
                              (this._state = e),
                                u.logger.log("audio stream:" + t + "->" + e);
                            }
                          },
                          get: function () {
                            return this._state;
                          },
                        },
                      ]) && et(a.prototype, n),
                      o && et(a, o),
                      i
                    );
                  })(De),
                  it = (function () {
                    if ("undefined" != typeof window && window.VTTCue)
                      return window.VTTCue;
                    var e = {
                        "": !0,
                        lr: !0,
                        rl: !0,
                      },
                      t = {
                        start: !0,
                        middle: !0,
                        end: !0,
                        left: !0,
                        right: !0,
                      };
                    function r(e) {
                      return (
                        "string" == typeof e &&
                        !!t[e.toLowerCase()] &&
                        e.toLowerCase()
                      );
                    }
                    function i(e) {
                      for (var t = 1; t < arguments.length; t++) {
                        var r = arguments[t];
                        for (var i in r) e[i] = r[i];
                      }
                      return e;
                    }
                    function a(t, a, n) {
                      var o = this,
                        s = {
                          enumerable: !0,
                        };
                      o.hasBeenReset = !1;
                      var l = "",
                        d = !1,
                        u = t,
                        c = a,
                        h = n,
                        f = null,
                        p = "",
                        g = !0,
                        v = "auto",
                        y = "start",
                        m = 50,
                        b = "middle",
                        _ = 50,
                        w = "middle";
                      Object.defineProperty(
                        o,
                        "id",
                        i({}, s, {
                          get: function () {
                            return l;
                          },
                          set: function (e) {
                            l = "" + e;
                          },
                        })
                      ),
                        Object.defineProperty(
                          o,
                          "pauseOnExit",
                          i({}, s, {
                            get: function () {
                              return d;
                            },
                            set: function (e) {
                              d = !!e;
                            },
                          })
                        ),
                        Object.defineProperty(
                          o,
                          "startTime",
                          i({}, s, {
                            get: function () {
                              return u;
                            },
                            set: function (e) {
                              if ("number" != typeof e)
                                throw new TypeError(
                                  "Start time must be set to a number."
                                );
                              (u = e), (this.hasBeenReset = !0);
                            },
                          })
                        ),
                        Object.defineProperty(
                          o,
                          "endTime",
                          i({}, s, {
                            get: function () {
                              return c;
                            },
                            set: function (e) {
                              if ("number" != typeof e)
                                throw new TypeError(
                                  "End time must be set to a number."
                                );
                              (c = e), (this.hasBeenReset = !0);
                            },
                          })
                        ),
                        Object.defineProperty(
                          o,
                          "text",
                          i({}, s, {
                            get: function () {
                              return h;
                            },
                            set: function (e) {
                              (h = "" + e), (this.hasBeenReset = !0);
                            },
                          })
                        ),
                        Object.defineProperty(
                          o,
                          "region",
                          i({}, s, {
                            get: function () {
                              return f;
                            },
                            set: function (e) {
                              (f = e), (this.hasBeenReset = !0);
                            },
                          })
                        ),
                        Object.defineProperty(
                          o,
                          "vertical",
                          i({}, s, {
                            get: function () {
                              return p;
                            },
                            set: function (t) {
                              var r = (function (t) {
                                return (
                                  "string" == typeof t &&
                                  !!e[t.toLowerCase()] &&
                                  t.toLowerCase()
                                );
                              })(t);
                              if (!1 === r)
                                throw new SyntaxError(
                                  "An invalid or illegal string was specified."
                                );
                              (p = r), (this.hasBeenReset = !0);
                            },
                          })
                        ),
                        Object.defineProperty(
                          o,
                          "snapToLines",
                          i({}, s, {
                            get: function () {
                              return g;
                            },
                            set: function (e) {
                              (g = !!e), (this.hasBeenReset = !0);
                            },
                          })
                        ),
                        Object.defineProperty(
                          o,
                          "line",
                          i({}, s, {
                            get: function () {
                              return v;
                            },
                            set: function (e) {
                              if ("number" != typeof e && "auto" !== e)
                                throw new SyntaxError(
                                  "An invalid number or illegal string was specified."
                                );
                              (v = e), (this.hasBeenReset = !0);
                            },
                          })
                        ),
                        Object.defineProperty(
                          o,
                          "lineAlign",
                          i({}, s, {
                            get: function () {
                              return y;
                            },
                            set: function (e) {
                              var t = r(e);
                              if (!t)
                                throw new SyntaxError(
                                  "An invalid or illegal string was specified."
                                );
                              (y = t), (this.hasBeenReset = !0);
                            },
                          })
                        ),
                        Object.defineProperty(
                          o,
                          "position",
                          i({}, s, {
                            get: function () {
                              return m;
                            },
                            set: function (e) {
                              if (e < 0 || e > 100)
                                throw new Error(
                                  "Position must be between 0 and 100."
                                );
                              (m = e), (this.hasBeenReset = !0);
                            },
                          })
                        ),
                        Object.defineProperty(
                          o,
                          "positionAlign",
                          i({}, s, {
                            get: function () {
                              return b;
                            },
                            set: function (e) {
                              var t = r(e);
                              if (!t)
                                throw new SyntaxError(
                                  "An invalid or illegal string was specified."
                                );
                              (b = t), (this.hasBeenReset = !0);
                            },
                          })
                        ),
                        Object.defineProperty(
                          o,
                          "size",
                          i({}, s, {
                            get: function () {
                              return _;
                            },
                            set: function (e) {
                              if (e < 0 || e > 100)
                                throw new Error(
                                  "Size must be between 0 and 100."
                                );
                              (_ = e), (this.hasBeenReset = !0);
                            },
                          })
                        ),
                        Object.defineProperty(
                          o,
                          "align",
                          i({}, s, {
                            get: function () {
                              return w;
                            },
                            set: function (e) {
                              var t = r(e);
                              if (!t)
                                throw new SyntaxError(
                                  "An invalid or illegal string was specified."
                                );
                              (w = t), (this.hasBeenReset = !0);
                            },
                          })
                        ),
                        (o.displayState = void 0);
                    }
                    return (
                      (a.prototype.getCueAsHTML = function () {
                        return window.WebVTT.convertCueToDOMTree(
                          window,
                          this.text
                        );
                      }),
                      a
                    );
                  })(),
                  at = function () {
                    return {
                      decode: function (e) {
                        if (!e) return "";
                        if ("string" != typeof e)
                          throw new Error("Error - expected string data.");
                        return decodeURIComponent(encodeURIComponent(e));
                      },
                    };
                  };
                function nt() {
                  (this.window = window),
                    (this.state = "INITIAL"),
                    (this.buffer = ""),
                    (this.decoder = new at()),
                    (this.regionList = []);
                }
                function ot() {
                  this.values = Object.create(null);
                }
                function st(e, t, r, i) {
                  var a = i ? e.split(i) : [e];
                  for (var n in a)
                    if ("string" == typeof a[n]) {
                      var o = a[n].split(r);
                      2 === o.length && t(o[0], o[1]);
                    }
                }
                ot.prototype = {
                  set: function (e, t) {
                    this.get(e) || "" === t || (this.values[e] = t);
                  },
                  get: function (e, t, r) {
                    return r
                      ? this.has(e)
                        ? this.values[e]
                        : t[r]
                      : this.has(e)
                      ? this.values[e]
                      : t;
                  },
                  has: function (e) {
                    return e in this.values;
                  },
                  alt: function (e, t, r) {
                    for (var i = 0; i < r.length; ++i)
                      if (t === r[i]) {
                        this.set(e, t);
                        break;
                      }
                  },
                  integer: function (e, t) {
                    /^-?\d+$/.test(t) && this.set(e, parseInt(t, 10));
                  },
                  percent: function (e, t) {
                    return (
                      !!(
                        t.match(/^([\d]{1,3})(\.[\d]*)?%$/) &&
                        (t = parseFloat(t)) >= 0 &&
                        t <= 100
                      ) && (this.set(e, t), !0)
                    );
                  },
                };
                var lt = new it(0, 0, 0),
                  dt = "middle" === lt.align ? "middle" : "center";
                function ut(e, t, r) {
                  var i = e;
                  function a() {
                    var t = (function (e) {
                      function t(e, t, r, i) {
                        return (
                          3600 * (0 | e) +
                          60 * (0 | t) +
                          (0 | r) +
                          (0 | i) / 1e3
                        );
                      }
                      var r = e.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
                      return r
                        ? r[3]
                          ? t(r[1], r[2], r[3].replace(":", ""), r[4])
                          : r[1] > 59
                          ? t(r[1], r[2], 0, r[4])
                          : t(0, r[1], r[2], r[4])
                        : null;
                    })(e);
                    if (null === t)
                      throw new Error("Malformed timestamp: " + i);
                    return (e = e.replace(/^[^\sa-zA-Z-]+/, "")), t;
                  }
                  function n() {
                    e = e.replace(/^\s+/, "");
                  }
                  if (
                    (n(), (t.startTime = a()), n(), "--\x3e" !== e.substr(0, 3))
                  )
                    throw new Error(
                      "Malformed time stamp (time stamps must be separated by '--\x3e'): " +
                        i
                    );
                  (e = e.substr(3)),
                    n(),
                    (t.endTime = a()),
                    n(),
                    (function (e, t) {
                      var i = new ot();
                      st(
                        e,
                        function (e, t) {
                          switch (e) {
                            case "region":
                              for (var a = r.length - 1; a >= 0; a--)
                                if (r[a].id === t) {
                                  i.set(e, r[a].region);
                                  break;
                                }
                              break;
                            case "vertical":
                              i.alt(e, t, ["rl", "lr"]);
                              break;
                            case "line":
                              var n = t.split(","),
                                o = n[0];
                              i.integer(e, o),
                                i.percent(e, o) && i.set("snapToLines", !1),
                                i.alt(e, o, ["auto"]),
                                2 === n.length &&
                                  i.alt("lineAlign", n[1], [
                                    "start",
                                    dt,
                                    "end",
                                  ]);
                              break;
                            case "position":
                              (n = t.split(",")),
                                i.percent(e, n[0]),
                                2 === n.length &&
                                  i.alt("positionAlign", n[1], [
                                    "start",
                                    dt,
                                    "end",
                                    "line-left",
                                    "line-right",
                                    "auto",
                                  ]);
                              break;
                            case "size":
                              i.percent(e, t);
                              break;
                            case "align":
                              i.alt(e, t, [
                                "start",
                                dt,
                                "end",
                                "left",
                                "right",
                              ]);
                          }
                        },
                        /:/,
                        /\s/
                      ),
                        (t.region = i.get("region", null)),
                        (t.vertical = i.get("vertical", ""));
                      var a = i.get("line", "auto");
                      "auto" === a && -1 === lt.line && (a = -1),
                        (t.line = a),
                        (t.lineAlign = i.get("lineAlign", "start")),
                        (t.snapToLines = i.get("snapToLines", !0)),
                        (t.size = i.get("size", 100)),
                        (t.align = i.get("align", dt));
                      var n = i.get("position", "auto");
                      "auto" === n &&
                        50 === lt.position &&
                        (n =
                          "start" === t.align || "left" === t.align
                            ? 0
                            : "end" === t.align || "right" === t.align
                            ? 100
                            : 50),
                        (t.position = n);
                    })(e, t);
                }
                function ct(e) {
                  return e.replace(/<br(?: \/)?>/gi, "\n");
                }
                nt.prototype = {
                  parse: function (e) {
                    var t = this;
                    function r() {
                      var e = t.buffer,
                        r = 0;
                      for (
                        e = ct(e);
                        r < e.length && "\r" !== e[r] && "\n" !== e[r];

                      )
                        ++r;
                      var i = e.substr(0, r);
                      return (
                        "\r" === e[r] && ++r,
                        "\n" === e[r] && ++r,
                        (t.buffer = e.substr(r)),
                        i
                      );
                    }
                    e &&
                      (t.buffer += t.decoder.decode(e, {
                        stream: !0,
                      }));
                    try {
                      var i;
                      if ("INITIAL" === t.state) {
                        if (!/\r\n|\n/.test(t.buffer)) return this;
                        var a = (i = r()).match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
                        if (!a || !a[0])
                          throw new Error("Malformed WebVTT signature.");
                        t.state = "HEADER";
                      }
                      for (var n = !1; t.buffer; ) {
                        if (!/\r\n|\n/.test(t.buffer)) return this;
                        switch ((n ? (n = !1) : (i = r()), t.state)) {
                          case "HEADER":
                            /:/.test(i)
                              ? st(i, function (e, t) {}, /:/)
                              : i || (t.state = "ID");
                            continue;
                          case "NOTE":
                            i || (t.state = "ID");
                            continue;
                          case "ID":
                            if (/^NOTE($|[ \t])/.test(i)) {
                              t.state = "NOTE";
                              break;
                            }
                            if (!i) continue;
                            if (
                              ((t.cue = new it(0, 0, "")),
                              (t.state = "CUE"),
                              -1 === i.indexOf("--\x3e"))
                            ) {
                              t.cue.id = i;
                              continue;
                            }
                          case "CUE":
                            try {
                              ut(i, t.cue, t.regionList);
                            } catch (e) {
                              (t.cue = null), (t.state = "BADCUE");
                              continue;
                            }
                            t.state = "CUETEXT";
                            continue;
                          case "CUETEXT":
                            var o = -1 !== i.indexOf("--\x3e");
                            if (!i || (o && (n = !0))) {
                              t.oncue && t.oncue(t.cue),
                                (t.cue = null),
                                (t.state = "ID");
                              continue;
                            }
                            t.cue.text && (t.cue.text += "\n"),
                              (t.cue.text += i);
                            continue;
                          case "BADCUE":
                            i || (t.state = "ID");
                            continue;
                        }
                      }
                    } catch (e) {
                      "CUETEXT" === t.state &&
                        t.cue &&
                        t.oncue &&
                        t.oncue(t.cue),
                        (t.cue = null),
                        (t.state =
                          "INITIAL" === t.state ? "BADWEBVTT" : "BADCUE");
                    }
                    return this;
                  },
                  flush: function () {
                    try {
                      if (
                        ((this.buffer += this.decoder.decode()),
                        (this.cue || "HEADER" === this.state) &&
                          ((this.buffer += "\n\n"), this.parse()),
                        "INITIAL" === this.state)
                      )
                        throw new Error("Malformed WebVTT signature.");
                    } catch (e) {
                      throw e;
                    }
                    return this.onflush && this.onflush(), this;
                  },
                };
                var ht = nt;
                function ft(e, t, r, i) {
                  for (
                    var a,
                      n,
                      o,
                      s,
                      l,
                      d = [],
                      u = window.VTTCue || TextTrackCue,
                      c = 0;
                    c < i.rows.length;
                    c++
                  )
                    if (
                      ((o = !0), (s = 0), (l = ""), !(a = i.rows[c]).isEmpty())
                    ) {
                      for (var h = 0; h < a.chars.length; h++)
                        a.chars[h].uchar.match(/\s/) && o
                          ? s++
                          : ((l += a.chars[h].uchar), (o = !1));
                      (a.cueStartTime = t),
                        t === r && (r += 1e-4),
                        (n = new u(t, r, ct(l.trim()))),
                        s >= 16 ? s-- : s++,
                        navigator.userAgent.match(/Firefox\//)
                          ? (n.line = c + 1)
                          : (n.line = c > 7 ? c - 2 : c + 1),
                        (n.align = "left"),
                        (n.position = Math.max(
                          0,
                          Math.min(100, (s / 32) * 100)
                        )),
                        d.push(n),
                        e && e.addCue(n);
                    }
                  return d;
                }
                var pt,
                  gt = {
                    42: 225,
                    92: 233,
                    94: 237,
                    95: 243,
                    96: 250,
                    123: 231,
                    124: 247,
                    125: 209,
                    126: 241,
                    127: 9608,
                    128: 174,
                    129: 176,
                    130: 189,
                    131: 191,
                    132: 8482,
                    133: 162,
                    134: 163,
                    135: 9834,
                    136: 224,
                    137: 32,
                    138: 232,
                    139: 226,
                    140: 234,
                    141: 238,
                    142: 244,
                    143: 251,
                    144: 193,
                    145: 201,
                    146: 211,
                    147: 218,
                    148: 220,
                    149: 252,
                    150: 8216,
                    151: 161,
                    152: 42,
                    153: 8217,
                    154: 9473,
                    155: 169,
                    156: 8480,
                    157: 8226,
                    158: 8220,
                    159: 8221,
                    160: 192,
                    161: 194,
                    162: 199,
                    163: 200,
                    164: 202,
                    165: 203,
                    166: 235,
                    167: 206,
                    168: 207,
                    169: 239,
                    170: 212,
                    171: 217,
                    172: 249,
                    173: 219,
                    174: 171,
                    175: 187,
                    176: 195,
                    177: 227,
                    178: 205,
                    179: 204,
                    180: 236,
                    181: 210,
                    182: 242,
                    183: 213,
                    184: 245,
                    185: 123,
                    186: 125,
                    187: 92,
                    188: 94,
                    189: 95,
                    190: 124,
                    191: 8764,
                    192: 196,
                    193: 228,
                    194: 214,
                    195: 246,
                    196: 223,
                    197: 165,
                    198: 164,
                    199: 9475,
                    200: 197,
                    201: 229,
                    202: 216,
                    203: 248,
                    204: 9487,
                    205: 9491,
                    206: 9495,
                    207: 9499,
                  },
                  vt = function (e) {
                    var t = e;
                    return (
                      gt.hasOwnProperty(e) && (t = gt[e]),
                      String.fromCharCode(t)
                    );
                  },
                  yt = {
                    17: 1,
                    18: 3,
                    21: 5,
                    22: 7,
                    23: 9,
                    16: 11,
                    19: 12,
                    20: 14,
                  },
                  mt = {
                    17: 2,
                    18: 4,
                    21: 6,
                    22: 8,
                    23: 10,
                    19: 13,
                    20: 15,
                  },
                  bt = {
                    25: 1,
                    26: 3,
                    29: 5,
                    30: 7,
                    31: 9,
                    24: 11,
                    27: 12,
                    28: 14,
                  },
                  _t = {
                    25: 2,
                    26: 4,
                    29: 6,
                    30: 8,
                    31: 10,
                    27: 13,
                    28: 15,
                  },
                  wt = [
                    "white",
                    "green",
                    "blue",
                    "cyan",
                    "red",
                    "yellow",
                    "magenta",
                    "black",
                    "transparent",
                  ];
                !(function (e) {
                  (e[(e.ERROR = 0)] = "ERROR"),
                    (e[(e.TEXT = 1)] = "TEXT"),
                    (e[(e.WARNING = 2)] = "WARNING"),
                    (e[(e.INFO = 2)] = "INFO"),
                    (e[(e.DEBUG = 3)] = "DEBUG"),
                    (e[(e.DATA = 3)] = "DATA");
                })(pt || (pt = {}));
                var Tt = (function () {
                    function e() {
                      (this.time = null), (this.verboseLevel = pt.ERROR);
                    }
                    return (
                      (e.prototype.log = function (e, t) {
                        this.verboseLevel >= e &&
                          u.logger.log(this.time + " [" + e + "] " + t);
                      }),
                      e
                    );
                  })(),
                  Et = function (e) {
                    for (var t = [], r = 0; r < e.length; r++)
                      t.push(e[r].toString(16));
                    return t;
                  },
                  St = (function () {
                    function e(e, t, r, i, a) {
                      (this.foreground = void 0),
                        (this.underline = void 0),
                        (this.italics = void 0),
                        (this.background = void 0),
                        (this.flash = void 0),
                        (this.foreground = e || "white"),
                        (this.underline = t || !1),
                        (this.italics = r || !1),
                        (this.background = i || "black"),
                        (this.flash = a || !1);
                    }
                    var t = e.prototype;
                    return (
                      (t.reset = function () {
                        (this.foreground = "white"),
                          (this.underline = !1),
                          (this.italics = !1),
                          (this.background = "black"),
                          (this.flash = !1);
                      }),
                      (t.setStyles = function (e) {
                        for (
                          var t = [
                              "foreground",
                              "underline",
                              "italics",
                              "background",
                              "flash",
                            ],
                            r = 0;
                          r < t.length;
                          r++
                        ) {
                          var i = t[r];
                          e.hasOwnProperty(i) && (this[i] = e[i]);
                        }
                      }),
                      (t.isDefault = function () {
                        return (
                          "white" === this.foreground &&
                          !this.underline &&
                          !this.italics &&
                          "black" === this.background &&
                          !this.flash
                        );
                      }),
                      (t.equals = function (e) {
                        return (
                          this.foreground === e.foreground &&
                          this.underline === e.underline &&
                          this.italics === e.italics &&
                          this.background === e.background &&
                          this.flash === e.flash
                        );
                      }),
                      (t.copy = function (e) {
                        (this.foreground = e.foreground),
                          (this.underline = e.underline),
                          (this.italics = e.italics),
                          (this.background = e.background),
                          (this.flash = e.flash);
                      }),
                      (t.toString = function () {
                        return (
                          "color=" +
                          this.foreground +
                          ", underline=" +
                          this.underline +
                          ", italics=" +
                          this.italics +
                          ", background=" +
                          this.background +
                          ", flash=" +
                          this.flash
                        );
                      }),
                      e
                    );
                  })(),
                  kt = (function () {
                    function e(e, t, r, i, a, n) {
                      (this.uchar = void 0),
                        (this.penState = void 0),
                        (this.uchar = e || " "),
                        (this.penState = new St(t, r, i, a, n));
                    }
                    var t = e.prototype;
                    return (
                      (t.reset = function () {
                        (this.uchar = " "), this.penState.reset();
                      }),
                      (t.setChar = function (e, t) {
                        (this.uchar = e), this.penState.copy(t);
                      }),
                      (t.setPenState = function (e) {
                        this.penState.copy(e);
                      }),
                      (t.equals = function (e) {
                        return (
                          this.uchar === e.uchar &&
                          this.penState.equals(e.penState)
                        );
                      }),
                      (t.copy = function (e) {
                        (this.uchar = e.uchar), this.penState.copy(e.penState);
                      }),
                      (t.isEmpty = function () {
                        return " " === this.uchar && this.penState.isDefault();
                      }),
                      e
                    );
                  })(),
                  xt = (function () {
                    function e(e) {
                      (this.chars = void 0),
                        (this.pos = void 0),
                        (this.currPenState = void 0),
                        (this.cueStartTime = void 0),
                        (this.logger = void 0),
                        (this.chars = []);
                      for (var t = 0; t < 100; t++) this.chars.push(new kt());
                      (this.logger = e),
                        (this.pos = 0),
                        (this.currPenState = new St());
                    }
                    var t = e.prototype;
                    return (
                      (t.equals = function (e) {
                        for (var t = !0, r = 0; r < 100; r++)
                          if (!this.chars[r].equals(e.chars[r])) {
                            t = !1;
                            break;
                          }
                        return t;
                      }),
                      (t.copy = function (e) {
                        for (var t = 0; t < 100; t++)
                          this.chars[t].copy(e.chars[t]);
                      }),
                      (t.isEmpty = function () {
                        for (var e = !0, t = 0; t < 100; t++)
                          if (!this.chars[t].isEmpty()) {
                            e = !1;
                            break;
                          }
                        return e;
                      }),
                      (t.setCursor = function (e) {
                        this.pos !== e && (this.pos = e),
                          this.pos < 0
                            ? (this.logger.log(
                                pt.DEBUG,
                                "Negative cursor position " + this.pos
                              ),
                              (this.pos = 0))
                            : this.pos > 100 &&
                              (this.logger.log(
                                pt.DEBUG,
                                "Too large cursor position " + this.pos
                              ),
                              (this.pos = 100));
                      }),
                      (t.moveCursor = function (e) {
                        var t = this.pos + e;
                        if (e > 1)
                          for (var r = this.pos + 1; r < t + 1; r++)
                            this.chars[r].setPenState(this.currPenState);
                        this.setCursor(t);
                      }),
                      (t.backSpace = function () {
                        this.moveCursor(-1),
                          this.chars[this.pos].setChar(" ", this.currPenState);
                      }),
                      (t.insertChar = function (e) {
                        e >= 144 && this.backSpace();
                        var t = vt(e);
                        this.pos >= 100
                          ? this.logger.log(
                              pt.ERROR,
                              "Cannot insert " +
                                e.toString(16) +
                                " (" +
                                t +
                                ") at position " +
                                this.pos +
                                ". Skipping it!"
                            )
                          : (this.chars[this.pos].setChar(t, this.currPenState),
                            this.moveCursor(1));
                      }),
                      (t.clearFromPos = function (e) {
                        var t;
                        for (t = e; t < 100; t++) this.chars[t].reset();
                      }),
                      (t.clear = function () {
                        this.clearFromPos(0),
                          (this.pos = 0),
                          this.currPenState.reset();
                      }),
                      (t.clearToEndOfRow = function () {
                        this.clearFromPos(this.pos);
                      }),
                      (t.getTextString = function () {
                        for (var e = [], t = !0, r = 0; r < 100; r++) {
                          var i = this.chars[r].uchar;
                          " " !== i && (t = !1), e.push(i);
                        }
                        return t ? "" : e.join("");
                      }),
                      (t.setPenStyles = function (e) {
                        this.currPenState.setStyles(e),
                          this.chars[this.pos].setPenState(this.currPenState);
                      }),
                      e
                    );
                  })(),
                  At = (function () {
                    function e(e) {
                      (this.rows = void 0),
                        (this.currRow = void 0),
                        (this.nrRollUpRows = void 0),
                        (this.lastOutputScreen = void 0),
                        (this.logger = void 0),
                        (this.rows = []);
                      for (var t = 0; t < 15; t++) this.rows.push(new xt(e));
                      (this.logger = e),
                        (this.currRow = 14),
                        (this.nrRollUpRows = null),
                        (this.lastOutputScreen = null),
                        this.reset();
                    }
                    var t = e.prototype;
                    return (
                      (t.reset = function () {
                        for (var e = 0; e < 15; e++) this.rows[e].clear();
                        this.currRow = 14;
                      }),
                      (t.equals = function (e) {
                        for (var t = !0, r = 0; r < 15; r++)
                          if (!this.rows[r].equals(e.rows[r])) {
                            t = !1;
                            break;
                          }
                        return t;
                      }),
                      (t.copy = function (e) {
                        for (var t = 0; t < 15; t++)
                          this.rows[t].copy(e.rows[t]);
                      }),
                      (t.isEmpty = function () {
                        for (var e = !0, t = 0; t < 15; t++)
                          if (!this.rows[t].isEmpty()) {
                            e = !1;
                            break;
                          }
                        return e;
                      }),
                      (t.backSpace = function () {
                        this.rows[this.currRow].backSpace();
                      }),
                      (t.clearToEndOfRow = function () {
                        this.rows[this.currRow].clearToEndOfRow();
                      }),
                      (t.insertChar = function (e) {
                        this.rows[this.currRow].insertChar(e);
                      }),
                      (t.setPen = function (e) {
                        this.rows[this.currRow].setPenStyles(e);
                      }),
                      (t.moveCursor = function (e) {
                        this.rows[this.currRow].moveCursor(e);
                      }),
                      (t.setCursor = function (e) {
                        this.logger.log(pt.INFO, "setCursor: " + e),
                          this.rows[this.currRow].setCursor(e);
                      }),
                      (t.setPAC = function (e) {
                        this.logger.log(
                          pt.INFO,
                          "pacData = " + JSON.stringify(e)
                        );
                        var t = e.row - 1;
                        if (
                          (this.nrRollUpRows &&
                            t < this.nrRollUpRows - 1 &&
                            (t = this.nrRollUpRows - 1),
                          this.nrRollUpRows && this.currRow !== t)
                        ) {
                          for (var r = 0; r < 15; r++) this.rows[r].clear();
                          var i = this.currRow + 1 - this.nrRollUpRows,
                            a = this.lastOutputScreen;
                          if (a) {
                            var n = a.rows[i].cueStartTime,
                              o = this.logger.time;
                            if (n && null !== o && n < o)
                              for (var s = 0; s < this.nrRollUpRows; s++)
                                this.rows[t - this.nrRollUpRows + s + 1].copy(
                                  a.rows[i + s]
                                );
                          }
                        }
                        this.currRow = t;
                        var l = this.rows[this.currRow];
                        if (null !== e.indent) {
                          var d = e.indent,
                            u = Math.max(d - 1, 0);
                          l.setCursor(e.indent),
                            (e.color = l.chars[u].penState.foreground);
                        }
                        var c = {
                          foreground: e.color,
                          underline: e.underline,
                          italics: e.italics,
                          background: "black",
                          flash: !1,
                        };
                        this.setPen(c);
                      }),
                      (t.setBkgData = function (e) {
                        this.logger.log(
                          pt.INFO,
                          "bkgData = " + JSON.stringify(e)
                        ),
                          this.backSpace(),
                          this.setPen(e),
                          this.insertChar(32);
                      }),
                      (t.setRollUpRows = function (e) {
                        this.nrRollUpRows = e;
                      }),
                      (t.rollUp = function () {
                        if (null !== this.nrRollUpRows) {
                          this.logger.log(pt.TEXT, this.getDisplayText());
                          var e = this.currRow + 1 - this.nrRollUpRows,
                            t = this.rows.splice(e, 1)[0];
                          t.clear(),
                            this.rows.splice(this.currRow, 0, t),
                            this.logger.log(pt.INFO, "Rolling up");
                        } else
                          this.logger.log(
                            pt.DEBUG,
                            "roll_up but nrRollUpRows not set yet"
                          );
                      }),
                      (t.getDisplayText = function (e) {
                        e = e || !1;
                        for (var t = [], r = "", i = -1, a = 0; a < 15; a++) {
                          var n = this.rows[a].getTextString();
                          n &&
                            ((i = a + 1),
                            e
                              ? t.push("Row " + i + ": '" + n + "'")
                              : t.push(n.trim()));
                        }
                        return (
                          t.length > 0 &&
                            (r = e ? "[" + t.join(" | ") + "]" : t.join("\n")),
                          r
                        );
                      }),
                      (t.getTextAndFormat = function () {
                        return this.rows;
                      }),
                      e
                    );
                  })(),
                  Rt = (function () {
                    function e(e, t, r) {
                      (this.chNr = void 0),
                        (this.outputFilter = void 0),
                        (this.mode = void 0),
                        (this.verbose = void 0),
                        (this.displayedMemory = void 0),
                        (this.nonDisplayedMemory = void 0),
                        (this.lastOutputScreen = void 0),
                        (this.currRollUpRow = void 0),
                        (this.writeScreen = void 0),
                        (this.cueStartTime = void 0),
                        (this.logger = void 0),
                        (this.chNr = e),
                        (this.outputFilter = t),
                        (this.mode = null),
                        (this.verbose = 0),
                        (this.displayedMemory = new At(r)),
                        (this.nonDisplayedMemory = new At(r)),
                        (this.lastOutputScreen = new At(r)),
                        (this.currRollUpRow = this.displayedMemory.rows[14]),
                        (this.writeScreen = this.displayedMemory),
                        (this.mode = null),
                        (this.cueStartTime = null),
                        (this.logger = r);
                    }
                    var t = e.prototype;
                    return (
                      (t.reset = function () {
                        (this.mode = null),
                          this.displayedMemory.reset(),
                          this.nonDisplayedMemory.reset(),
                          this.lastOutputScreen.reset(),
                          this.outputFilter.reset(),
                          (this.currRollUpRow = this.displayedMemory.rows[14]),
                          (this.writeScreen = this.displayedMemory),
                          (this.mode = null),
                          (this.cueStartTime = null);
                      }),
                      (t.getHandler = function () {
                        return this.outputFilter;
                      }),
                      (t.setHandler = function (e) {
                        this.outputFilter = e;
                      }),
                      (t.setPAC = function (e) {
                        this.writeScreen.setPAC(e);
                      }),
                      (t.setBkgData = function (e) {
                        this.writeScreen.setBkgData(e);
                      }),
                      (t.setMode = function (e) {
                        e !== this.mode &&
                          ((this.mode = e),
                          this.logger.log(pt.INFO, "MODE=" + e),
                          "MODE_POP-ON" === this.mode
                            ? (this.writeScreen = this.nonDisplayedMemory)
                            : ((this.writeScreen = this.displayedMemory),
                              this.writeScreen.reset()),
                          "MODE_ROLL-UP" !== this.mode &&
                            ((this.displayedMemory.nrRollUpRows = null),
                            (this.nonDisplayedMemory.nrRollUpRows = null)),
                          (this.mode = e));
                      }),
                      (t.insertChars = function (e) {
                        for (var t = 0; t < e.length; t++)
                          this.writeScreen.insertChar(e[t]);
                        var r =
                          this.writeScreen === this.displayedMemory
                            ? "DISP"
                            : "NON_DISP";
                        this.logger.log(
                          pt.INFO,
                          r + ": " + this.writeScreen.getDisplayText(!0)
                        ),
                          ("MODE_PAINT-ON" !== this.mode &&
                            "MODE_ROLL-UP" !== this.mode) ||
                            (this.logger.log(
                              pt.TEXT,
                              "DISPLAYED: " +
                                this.displayedMemory.getDisplayText(!0)
                            ),
                            this.outputDataUpdate());
                      }),
                      (t.ccRCL = function () {
                        this.logger.log(
                          pt.INFO,
                          "RCL - Resume Caption Loading"
                        ),
                          this.setMode("MODE_POP-ON");
                      }),
                      (t.ccBS = function () {
                        this.logger.log(pt.INFO, "BS - BackSpace"),
                          "MODE_TEXT" !== this.mode &&
                            (this.writeScreen.backSpace(),
                            this.writeScreen === this.displayedMemory &&
                              this.outputDataUpdate());
                      }),
                      (t.ccAOF = function () {}),
                      (t.ccAON = function () {}),
                      (t.ccDER = function () {
                        this.logger.log(pt.INFO, "DER- Delete to End of Row"),
                          this.writeScreen.clearToEndOfRow(),
                          this.outputDataUpdate();
                      }),
                      (t.ccRU = function (e) {
                        this.logger.log(pt.INFO, "RU(" + e + ") - Roll Up"),
                          (this.writeScreen = this.displayedMemory),
                          this.setMode("MODE_ROLL-UP"),
                          this.writeScreen.setRollUpRows(e);
                      }),
                      (t.ccFON = function () {
                        this.logger.log(pt.INFO, "FON - Flash On"),
                          this.writeScreen.setPen({
                            flash: !0,
                          });
                      }),
                      (t.ccRDC = function () {
                        this.logger.log(
                          pt.INFO,
                          "RDC - Resume Direct Captioning"
                        ),
                          this.setMode("MODE_PAINT-ON");
                      }),
                      (t.ccTR = function () {
                        this.logger.log(pt.INFO, "TR"),
                          this.setMode("MODE_TEXT");
                      }),
                      (t.ccRTD = function () {
                        this.logger.log(pt.INFO, "RTD"),
                          this.setMode("MODE_TEXT");
                      }),
                      (t.ccEDM = function () {
                        this.logger.log(
                          pt.INFO,
                          "EDM - Erase Displayed Memory"
                        ),
                          this.displayedMemory.reset(),
                          this.outputDataUpdate(!0);
                      }),
                      (t.ccCR = function () {
                        this.logger.log(pt.INFO, "CR - Carriage Return"),
                          this.writeScreen.rollUp(),
                          this.outputDataUpdate(!0);
                      }),
                      (t.ccENM = function () {
                        this.logger.log(
                          pt.INFO,
                          "ENM - Erase Non-displayed Memory"
                        ),
                          this.nonDisplayedMemory.reset();
                      }),
                      (t.ccEOC = function () {
                        if (
                          (this.logger.log(pt.INFO, "EOC - End Of Caption"),
                          "MODE_POP-ON" === this.mode)
                        ) {
                          var e = this.displayedMemory;
                          (this.displayedMemory = this.nonDisplayedMemory),
                            (this.nonDisplayedMemory = e),
                            (this.writeScreen = this.nonDisplayedMemory),
                            this.logger.log(
                              pt.TEXT,
                              "DISP: " + this.displayedMemory.getDisplayText()
                            );
                        }
                        this.outputDataUpdate(!0);
                      }),
                      (t.ccTO = function (e) {
                        this.logger.log(pt.INFO, "TO(" + e + ") - Tab Offset"),
                          this.writeScreen.moveCursor(e);
                      }),
                      (t.ccMIDROW = function (e) {
                        var t = {
                          flash: !1,
                        };
                        if (
                          ((t.underline = e % 2 == 1),
                          (t.italics = e >= 46),
                          t.italics)
                        )
                          t.foreground = "white";
                        else {
                          var r = Math.floor(e / 2) - 16;
                          t.foreground = [
                            "white",
                            "green",
                            "blue",
                            "cyan",
                            "red",
                            "yellow",
                            "magenta",
                          ][r];
                        }
                        this.logger.log(
                          pt.INFO,
                          "MIDROW: " + JSON.stringify(t)
                        ),
                          this.writeScreen.setPen(t);
                      }),
                      (t.outputDataUpdate = function (e) {
                        void 0 === e && (e = !1);
                        var t = this.logger.time;
                        null !== t &&
                          this.outputFilter &&
                          (null !== this.cueStartTime ||
                          this.displayedMemory.isEmpty()
                            ? this.displayedMemory.equals(
                                this.lastOutputScreen
                              ) ||
                              (this.outputFilter.newCue(
                                this.cueStartTime,
                                t,
                                this.lastOutputScreen
                              ),
                              e &&
                                this.outputFilter.dispatchCue &&
                                this.outputFilter.dispatchCue(),
                              (this.cueStartTime =
                                this.displayedMemory.isEmpty() ? null : t))
                            : (this.cueStartTime = t),
                          this.lastOutputScreen.copy(this.displayedMemory));
                      }),
                      (t.cueSplitAtTime = function (e) {
                        this.outputFilter &&
                          (this.displayedMemory.isEmpty() ||
                            (this.outputFilter.newCue &&
                              this.outputFilter.newCue(
                                this.cueStartTime,
                                e,
                                this.displayedMemory
                              ),
                            (this.cueStartTime = e)));
                      }),
                      e
                    );
                  })();
                function Lt(e, t, r) {
                  (r.a = e), (r.b = t);
                }
                function Dt(e, t, r) {
                  return r.a === e && r.b === t;
                }
                var Ct = (function () {
                    function e(e, t, r) {
                      (this.channels = void 0),
                        (this.currentChannel = 0),
                        (this.cmdHistory = void 0),
                        (this.logger = void 0);
                      var i = new Tt();
                      (this.channels = [
                        null,
                        new Rt(e, t, i),
                        new Rt(e + 1, r, i),
                      ]),
                        (this.cmdHistory = {
                          a: null,
                          b: null,
                        }),
                        (this.logger = i);
                    }
                    var t = e.prototype;
                    return (
                      (t.getHandler = function (e) {
                        return this.channels[e].getHandler();
                      }),
                      (t.setHandler = function (e, t) {
                        this.channels[e].setHandler(t);
                      }),
                      (t.addData = function (e, t) {
                        var r,
                          i,
                          a,
                          n = !1;
                        this.logger.time = e;
                        for (var o = 0; o < t.length; o += 2)
                          if (
                            ((i = 127 & t[o]),
                            (a = 127 & t[o + 1]),
                            0 !== i || 0 !== a)
                          ) {
                            if (
                              (this.logger.log(
                                pt.DATA,
                                "[" +
                                  Et([t[o], t[o + 1]]) +
                                  "] -> (" +
                                  Et([i, a]) +
                                  ")"
                              ),
                              (r = this.parseCmd(i, a)) ||
                                (r = this.parseMidrow(i, a)),
                              r || (r = this.parsePAC(i, a)),
                              r || (r = this.parseBackgroundAttributes(i, a)),
                              !r && (n = this.parseChars(i, a)))
                            ) {
                              var s = this.currentChannel;
                              s && s > 0
                                ? this.channels[s].insertChars(n)
                                : this.logger.log(
                                    pt.WARNING,
                                    "No channel found yet. TEXT-MODE?"
                                  );
                            }
                            r ||
                              n ||
                              this.logger.log(
                                pt.WARNING,
                                "Couldn't parse cleaned data " +
                                  Et([i, a]) +
                                  " orig: " +
                                  Et([t[o], t[o + 1]])
                              );
                          }
                      }),
                      (t.parseCmd = function (e, t) {
                        var r = this.cmdHistory;
                        if (
                          !(
                            ((20 === e || 28 === e || 21 === e || 29 === e) &&
                              t >= 32 &&
                              t <= 47) ||
                            ((23 === e || 31 === e) && t >= 33 && t <= 35)
                          )
                        )
                          return !1;
                        if (Dt(e, t, r))
                          return (
                            Lt(null, null, r),
                            this.logger.log(
                              pt.DEBUG,
                              "Repeated command (" + Et([e, t]) + ") is dropped"
                            ),
                            !0
                          );
                        var i = 20 === e || 21 === e || 23 === e ? 1 : 2,
                          a = this.channels[i];
                        return (
                          20 === e || 21 === e || 28 === e || 29 === e
                            ? 32 === t
                              ? a.ccRCL()
                              : 33 === t
                              ? a.ccBS()
                              : 34 === t
                              ? a.ccAOF()
                              : 35 === t
                              ? a.ccAON()
                              : 36 === t
                              ? a.ccDER()
                              : 37 === t
                              ? a.ccRU(2)
                              : 38 === t
                              ? a.ccRU(3)
                              : 39 === t
                              ? a.ccRU(4)
                              : 40 === t
                              ? a.ccFON()
                              : 41 === t
                              ? a.ccRDC()
                              : 42 === t
                              ? a.ccTR()
                              : 43 === t
                              ? a.ccRTD()
                              : 44 === t
                              ? a.ccEDM()
                              : 45 === t
                              ? a.ccCR()
                              : 46 === t
                              ? a.ccENM()
                              : 47 === t && a.ccEOC()
                            : a.ccTO(t - 32),
                          Lt(e, t, r),
                          (this.currentChannel = i),
                          !0
                        );
                      }),
                      (t.parseMidrow = function (e, t) {
                        var r = 0;
                        if ((17 === e || 25 === e) && t >= 32 && t <= 47) {
                          if ((r = 17 === e ? 1 : 2) !== this.currentChannel)
                            return (
                              this.logger.log(
                                pt.ERROR,
                                "Mismatch channel in midrow parsing"
                              ),
                              !1
                            );
                          var i = this.channels[r];
                          return (
                            !!i &&
                            (i.ccMIDROW(t),
                            this.logger.log(
                              pt.DEBUG,
                              "MIDROW (" + Et([e, t]) + ")"
                            ),
                            !0)
                          );
                        }
                        return !1;
                      }),
                      (t.parsePAC = function (e, t) {
                        var r,
                          i = this.cmdHistory;
                        if (
                          !(
                            (((e >= 17 && e <= 23) || (e >= 25 && e <= 31)) &&
                              t >= 64 &&
                              t <= 127) ||
                            ((16 === e || 24 === e) && t >= 64 && t <= 95)
                          )
                        )
                          return !1;
                        if (Dt(e, t, i)) return Lt(null, null, i), !0;
                        var a = e <= 23 ? 1 : 2;
                        r =
                          t >= 64 && t <= 95
                            ? 1 === a
                              ? yt[e]
                              : bt[e]
                            : 1 === a
                            ? mt[e]
                            : _t[e];
                        var n = this.channels[a];
                        return (
                          !!n &&
                          (n.setPAC(this.interpretPAC(r, t)),
                          Lt(e, t, i),
                          (this.currentChannel = a),
                          !0)
                        );
                      }),
                      (t.interpretPAC = function (e, t) {
                        var r = t,
                          i = {
                            color: null,
                            italics: !1,
                            indent: null,
                            underline: !1,
                            row: e,
                          };
                        return (
                          (r = t > 95 ? t - 96 : t - 64),
                          (i.underline = 1 == (1 & r)),
                          r <= 13
                            ? (i.color = [
                                "white",
                                "green",
                                "blue",
                                "cyan",
                                "red",
                                "yellow",
                                "magenta",
                                "white",
                              ][Math.floor(r / 2)])
                            : r <= 15
                            ? ((i.italics = !0), (i.color = "white"))
                            : (i.indent = 4 * Math.floor((r - 16) / 2)),
                          i
                        );
                      }),
                      (t.parseChars = function (e, t) {
                        var r,
                          i = null,
                          a = null;
                        if (
                          (e >= 25
                            ? ((r = 2), (a = e - 8))
                            : ((r = 1), (a = e)),
                          a >= 17 && a <= 19)
                        ) {
                          var n = t;
                          (n =
                            17 === a ? t + 80 : 18 === a ? t + 112 : t + 144),
                            this.logger.log(
                              pt.INFO,
                              "Special char '" + vt(n) + "' in channel " + r
                            ),
                            (i = [n]);
                        } else
                          e >= 32 && e <= 127 && (i = 0 === t ? [e] : [e, t]);
                        if (i) {
                          var o = Et(i);
                          this.logger.log(
                            pt.DEBUG,
                            "Char codes =  " + o.join(",")
                          ),
                            Lt(e, t, this.cmdHistory);
                        }
                        return i;
                      }),
                      (t.parseBackgroundAttributes = function (e, t) {
                        var r;
                        if (
                          !(
                            ((16 === e || 24 === e) && t >= 32 && t <= 47) ||
                            ((23 === e || 31 === e) && t >= 45 && t <= 47)
                          )
                        )
                          return !1;
                        var i = {};
                        16 === e || 24 === e
                          ? ((r = Math.floor((t - 32) / 2)),
                            (i.background = wt[r]),
                            t % 2 == 1 &&
                              (i.background = i.background + "_semi"))
                          : 45 === t
                          ? (i.background = "transparent")
                          : ((i.foreground = "black"),
                            47 === t && (i.underline = !0));
                        var a = e <= 23 ? 1 : 2;
                        return (
                          this.channels[a].setBkgData(i),
                          Lt(e, t, this.cmdHistory),
                          !0
                        );
                      }),
                      (t.reset = function () {
                        for (
                          var e = 0;
                          e < Object.keys(this.channels).length;
                          e++
                        ) {
                          var t = this.channels[e];
                          t && t.reset();
                        }
                        this.cmdHistory = {
                          a: null,
                          b: null,
                        };
                      }),
                      (t.cueSplitAtTime = function (e) {
                        for (var t = 0; t < this.channels.length; t++) {
                          var r = this.channels[t];
                          r && r.cueSplitAtTime(e);
                        }
                      }),
                      e
                    );
                  })(),
                  Ot = (function () {
                    function e(e, t) {
                      (this.timelineController = void 0),
                        (this.cueRanges = []),
                        (this.trackName = void 0),
                        (this.startTime = null),
                        (this.endTime = null),
                        (this.screen = null),
                        (this.timelineController = e),
                        (this.trackName = t);
                    }
                    var t = e.prototype;
                    return (
                      (t.dispatchCue = function () {
                        null !== this.startTime &&
                          (this.timelineController.addCues(
                            this.trackName,
                            this.startTime,
                            this.endTime,
                            this.screen,
                            this.cueRanges
                          ),
                          (this.startTime = null));
                      }),
                      (t.newCue = function (e, t, r) {
                        (null === this.startTime || this.startTime > e) &&
                          (this.startTime = e),
                          (this.endTime = t),
                          (this.screen = r),
                          this.timelineController.createCaptionsTrack(
                            this.trackName
                          );
                      }),
                      (t.reset = function () {
                        this.cueRanges = [];
                      }),
                      e
                    );
                  })(),
                  It = function (e, t, r) {
                    return e.substr(r || 0, t.length) === t;
                  },
                  Pt = function (e) {
                    for (var t = 5381, r = e.length; r; )
                      t = (33 * t) ^ e.charCodeAt(--r);
                    return (t >>> 0).toString();
                  },
                  Ft = {
                    parse: function (e, t, r, i, a, n) {
                      var o,
                        s = Object(Me.utf8ArrayToStr)(new Uint8Array(e))
                          .trim()
                          .replace(/\r\n|\n\r|\n|\r/g, "\n")
                          .split("\n"),
                        d = "00:00.000",
                        u = 0,
                        c = 0,
                        h = 0,
                        f = [],
                        p = !0,
                        g = !1,
                        v = new ht();
                      (v.oncue = function (e) {
                        var t = r[i],
                          a = r.ccOffset;
                        t &&
                          t.new &&
                          (void 0 !== c
                            ? (a = r.ccOffset = t.start)
                            : (function (e, t, r) {
                                var i = e[t],
                                  a = e[i.prevCC];
                                if (!a || (!a.new && i.new))
                                  return (
                                    (e.ccOffset = e.presentationOffset =
                                      i.start),
                                    void (i.new = !1)
                                  );
                                for (; a && a.new; )
                                  (e.ccOffset += i.start - a.start),
                                    (i.new = !1),
                                    (a = e[(i = a).prevCC]);
                                e.presentationOffset = r;
                              })(r, i, h)),
                          h && (a = h - r.presentationOffset),
                          g && ((e.startTime += a - c), (e.endTime += a - c)),
                          (e.id =
                            Pt(e.startTime.toString()) +
                            Pt(e.endTime.toString()) +
                            Pt(e.text)),
                          (e.text = decodeURIComponent(
                            encodeURIComponent(e.text)
                          )),
                          e.endTime > 0 && f.push(e);
                      }),
                        (v.onparsingerror = function (e) {
                          o = e;
                        }),
                        (v.onflush = function () {
                          o && n ? n(o) : a(f);
                        }),
                        s.forEach(function (e) {
                          if (p) {
                            if (It(e, "X-TIMESTAMP-MAP=")) {
                              (p = !1),
                                (g = !0),
                                e
                                  .substr(16)
                                  .split(",")
                                  .forEach(function (e) {
                                    It(e, "LOCAL:")
                                      ? (d = e.substr(6))
                                      : It(e, "MPEGTS:") &&
                                        (u = parseInt(e.substr(7)));
                                  });
                              try {
                                t + (9e4 * r[i].start || 0) < 0 &&
                                  (t += 8589934592),
                                  (u -= t),
                                  (c =
                                    (function (e) {
                                      var t = parseInt(e.substr(-3)),
                                        r = parseInt(e.substr(-6, 2)),
                                        i = parseInt(e.substr(-9, 2)),
                                        a =
                                          e.length > 9
                                            ? parseInt(
                                                e.substr(0, e.indexOf(":"))
                                              )
                                            : 0;
                                      if (
                                        !(
                                          Object(l.isFiniteNumber)(t) &&
                                          Object(l.isFiniteNumber)(r) &&
                                          Object(l.isFiniteNumber)(i) &&
                                          Object(l.isFiniteNumber)(a)
                                        )
                                      )
                                        throw Error(
                                          "Malformed X-TIMESTAMP-MAP: Local:" +
                                            e
                                        );
                                      return (
                                        (t += 1e3 * r),
                                        (t += 6e4 * i),
                                        (t += 36e5 * a)
                                      );
                                    })(d) / 1e3),
                                  (h = u / 9e4);
                              } catch (e) {
                                (g = !1), (o = e);
                              }
                              return;
                            }
                            "" === e && (p = !1);
                          }
                          v.parse(e + "\n");
                        }),
                        v.flush();
                    },
                  };
                function Mt(e) {
                  if (void 0 === e)
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    );
                  return e;
                }
                function Bt(e, t) {
                  return (
                    e && e.label === t.name && !(e.textTrack1 || e.textTrack2)
                  );
                }
                var Nt = (function (e) {
                  var t, r;
                  function i(t) {
                    var r;
                    if (
                      (((r =
                        e.call(
                          this,
                          t,
                          d.default.MEDIA_ATTACHING,
                          d.default.MEDIA_DETACHING,
                          d.default.FRAG_PARSING_USERDATA,
                          d.default.FRAG_DECRYPTED,
                          d.default.MANIFEST_LOADING,
                          d.default.MANIFEST_LOADED,
                          d.default.FRAG_LOADED,
                          d.default.INIT_PTS_FOUND
                        ) || this).media = null),
                      (r.config = void 0),
                      (r.enabled = !0),
                      (r.Cues = void 0),
                      (r.textTracks = []),
                      (r.tracks = []),
                      (r.initPTS = []),
                      (r.unparsedVttFrags = []),
                      (r.captionsTracks = {}),
                      (r.nonNativeCaptionsTracks = {}),
                      (r.captionsProperties = void 0),
                      (r.cea608Parser1 = void 0),
                      (r.cea608Parser2 = void 0),
                      (r.lastSn = -1),
                      (r.prevCC = -1),
                      (r.vttCCs = {
                        ccOffset: 0,
                        presentationOffset: 0,
                        0: {
                          start: 0,
                          prevCC: -1,
                          new: !1,
                        },
                      }),
                      (r.hls = t),
                      (r.config = t.config),
                      (r.Cues = t.config.cueHandler),
                      (r.captionsProperties = {
                        textTrack1: {
                          label: r.config.captionsTextTrack1Label,
                          languageCode: r.config.captionsTextTrack1LanguageCode,
                        },
                        textTrack2: {
                          label: r.config.captionsTextTrack2Label,
                          languageCode: r.config.captionsTextTrack2LanguageCode,
                        },
                        textTrack3: {
                          label: r.config.captionsTextTrack3Label,
                          languageCode: r.config.captionsTextTrack3LanguageCode,
                        },
                        textTrack4: {
                          label: r.config.captionsTextTrack4Label,
                          languageCode: r.config.captionsTextTrack4LanguageCode,
                        },
                      }),
                      r.config.enableCEA708Captions)
                    ) {
                      var i = new Ot(Mt(r), "textTrack1"),
                        a = new Ot(Mt(r), "textTrack2"),
                        n = new Ot(Mt(r), "textTrack3"),
                        o = new Ot(Mt(r), "textTrack4");
                      (r.cea608Parser1 = new Ct(1, i, a)),
                        (r.cea608Parser2 = new Ct(3, n, o));
                    }
                    return r;
                  }
                  (r = e),
                    ((t = i).prototype = Object.create(r.prototype)),
                    (t.prototype.constructor = t),
                    (t.__proto__ = r);
                  var a = i.prototype;
                  return (
                    (a.addCues = function (e, t, r, i, a) {
                      for (var n, o, s, l, u = !1, c = a.length; c--; ) {
                        var h = a[c],
                          f =
                            ((n = h[0]),
                            (o = h[1]),
                            (s = t),
                            (l = r),
                            Math.min(o, l) - Math.max(n, s));
                        if (
                          f >= 0 &&
                          ((h[0] = Math.min(h[0], t)),
                          (h[1] = Math.max(h[1], r)),
                          (u = !0),
                          f / (r - t) > 0.5)
                        )
                          return;
                      }
                      if (
                        (u || a.push([t, r]),
                        this.config.renderTextTracksNatively)
                      )
                        this.Cues.newCue(this.captionsTracks[e], t, r, i);
                      else {
                        var p = this.Cues.newCue(null, t, r, i);
                        this.hls.trigger(d.default.CUES_PARSED, {
                          type: "captions",
                          cues: p,
                          track: e,
                        });
                      }
                    }),
                    (a.onInitPtsFound = function (e) {
                      var t = this,
                        r = e.frag,
                        i = e.id,
                        a = e.initPTS,
                        n = this.unparsedVttFrags;
                      "main" === i && (this.initPTS[r.cc] = a),
                        n.length &&
                          ((this.unparsedVttFrags = []),
                          n.forEach(function (e) {
                            t.onFragLoaded(e);
                          }));
                    }),
                    (a.getExistingTrack = function (e) {
                      var t = this.media;
                      if (t)
                        for (var r = 0; r < t.textTracks.length; r++) {
                          var i = t.textTracks[r];
                          if (i[e]) return i;
                        }
                      return null;
                    }),
                    (a.createCaptionsTrack = function (e) {
                      this.config.renderTextTracksNatively
                        ? this.createNativeTrack(e)
                        : this.createNonNativeTrack(e);
                    }),
                    (a.createNativeTrack = function (e) {
                      if (!this.captionsTracks[e]) {
                        var t = this.captionsProperties,
                          r = this.captionsTracks,
                          i = this.media,
                          a = t[e],
                          n = a.label,
                          o = a.languageCode,
                          s = this.getExistingTrack(e);
                        if (s) (r[e] = s), Ne(r[e]), Be(r[e], i);
                        else {
                          var l = this.createTextTrack("captions", n, o);
                          l && ((l[e] = !0), (r[e] = l));
                        }
                      }
                    }),
                    (a.createNonNativeTrack = function (e) {
                      if (!this.nonNativeCaptionsTracks[e]) {
                        var t = this.captionsProperties[e];
                        if (t) {
                          var r = {
                            _id: e,
                            label: t.label,
                            kind: "captions",
                            default: !!t.media && !!t.media.default,
                            closedCaptions: t.media,
                          };
                          (this.nonNativeCaptionsTracks[e] = r),
                            this.hls.trigger(
                              d.default.NON_NATIVE_TEXT_TRACKS_FOUND,
                              {
                                tracks: [r],
                              }
                            );
                        }
                      }
                    }),
                    (a.createTextTrack = function (e, t, r) {
                      var i = this.media;
                      if (i) return i.addTextTrack(e, t, r);
                    }),
                    (a.destroy = function () {
                      e.prototype.destroy.call(this);
                    }),
                    (a.onMediaAttaching = function (e) {
                      (this.media = e.media), this._cleanTracks();
                    }),
                    (a.onMediaDetaching = function () {
                      var e = this.captionsTracks;
                      Object.keys(e).forEach(function (t) {
                        Ne(e[t]), delete e[t];
                      }),
                        (this.nonNativeCaptionsTracks = {});
                    }),
                    (a.onManifestLoading = function () {
                      (this.lastSn = -1),
                        (this.prevCC = -1),
                        (this.vttCCs = {
                          ccOffset: 0,
                          presentationOffset: 0,
                          0: {
                            start: 0,
                            prevCC: -1,
                            new: !1,
                          },
                        }),
                        this._cleanTracks(),
                        (this.tracks = []),
                        (this.captionsTracks = {}),
                        (this.nonNativeCaptionsTracks = {});
                    }),
                    (a._cleanTracks = function () {
                      var e = this.media;
                      if (e) {
                        var t = e.textTracks;
                        if (t) for (var r = 0; r < t.length; r++) Ne(t[r]);
                      }
                    }),
                    (a.onManifestLoaded = function (e) {
                      var t = this;
                      if (
                        ((this.textTracks = []),
                        (this.unparsedVttFrags = this.unparsedVttFrags || []),
                        (this.initPTS = []),
                        this.cea608Parser1 &&
                          this.cea608Parser2 &&
                          (this.cea608Parser1.reset(),
                          this.cea608Parser2.reset()),
                        this.config.enableWebVTT)
                      ) {
                        var r = e.subtitles || [],
                          i =
                            this.tracks && r && this.tracks.length === r.length;
                        if (
                          ((this.tracks = e.subtitles || []),
                          this.config.renderTextTracksNatively)
                        ) {
                          var a = this.media ? this.media.textTracks : [];
                          this.tracks.forEach(function (e, r) {
                            var i;
                            if (r < a.length) {
                              for (var n = null, o = 0; o < a.length; o++)
                                if (Bt(a[o], e)) {
                                  n = a[o];
                                  break;
                                }
                              n && (i = n);
                            }
                            i ||
                              (i = t.createTextTrack(
                                "subtitles",
                                e.name,
                                e.lang
                              )),
                              e.default
                                ? (i.mode = t.hls.subtitleDisplay
                                    ? "showing"
                                    : "hidden")
                                : (i.mode = "disabled"),
                              t.textTracks.push(i);
                          });
                        } else if (!i && this.tracks && this.tracks.length) {
                          var n = this.tracks.map(function (e) {
                            return {
                              label: e.name,
                              kind: e.type.toLowerCase(),
                              default: e.default,
                              subtitleTrack: e,
                            };
                          });
                          this.hls.trigger(
                            d.default.NON_NATIVE_TEXT_TRACKS_FOUND,
                            {
                              tracks: n,
                            }
                          );
                        }
                      }
                      this.config.enableCEA708Captions &&
                        e.captions &&
                        e.captions.forEach(function (e) {
                          var r = /(?:CC|SERVICE)([1-4])/.exec(e.instreamId);
                          if (r) {
                            var i = "textTrack" + r[1],
                              a = t.captionsProperties[i];
                            a &&
                              ((a.label = e.name),
                              e.lang && (a.languageCode = e.lang),
                              (a.media = e));
                          }
                        });
                    }),
                    (a.onFragLoaded = function (e) {
                      var t = e.frag,
                        r = e.payload,
                        i = this.cea608Parser1,
                        a = this.cea608Parser2,
                        n = this.initPTS,
                        o = this.lastSn,
                        s = this.unparsedVttFrags;
                      if ("main" === t.type) {
                        var u = t.sn;
                        t.sn !== o + 1 && i && a && (i.reset(), a.reset()),
                          (this.lastSn = u);
                      } else if ("subtitle" === t.type)
                        if (r.byteLength) {
                          if (!Object(l.isFiniteNumber)(n[t.cc]))
                            return (
                              s.push(e),
                              void (
                                n.length &&
                                this.hls.trigger(
                                  d.default.SUBTITLE_FRAG_PROCESSED,
                                  {
                                    success: !1,
                                    frag: t,
                                  }
                                )
                              )
                            );
                          var c = t.decryptdata;
                          (null != c &&
                            null != c.key &&
                            "AES-128" === c.method) ||
                            this._parseVTTs(t, r);
                        } else
                          this.hls.trigger(d.default.SUBTITLE_FRAG_PROCESSED, {
                            success: !1,
                            frag: t,
                          });
                    }),
                    (a._parseVTTs = function (e, t) {
                      var r = this,
                        i = this.hls,
                        a = this.prevCC,
                        n = this.textTracks,
                        o = this.vttCCs;
                      o[e.cc] ||
                        ((o[e.cc] = {
                          start: e.start,
                          prevCC: a,
                          new: !0,
                        }),
                        (this.prevCC = e.cc)),
                        Ft.parse(
                          t,
                          this.initPTS[e.cc],
                          o,
                          e.cc,
                          function (t) {
                            if (r.config.renderTextTracksNatively) {
                              var a = n[e.level];
                              if ("disabled" === a.mode)
                                return void i.trigger(
                                  d.default.SUBTITLE_FRAG_PROCESSED,
                                  {
                                    success: !1,
                                    frag: e,
                                  }
                                );
                              t.forEach(function (e) {
                                if (!a.cues.getCueById(e.id))
                                  try {
                                    if ((a.addCue(e), !a.cues.getCueById(e.id)))
                                      throw new Error(
                                        "addCue is failed for: " + e
                                      );
                                  } catch (r) {
                                    u.logger.debug(
                                      "Failed occurred on adding cues: " + r
                                    );
                                    var t = new window.TextTrackCue(
                                      e.startTime,
                                      e.endTime,
                                      e.text
                                    );
                                    (t.id = e.id), a.addCue(t);
                                  }
                              });
                            } else {
                              var o = r.tracks[e.level].default
                                ? "default"
                                : "subtitles" + e.level;
                              i.trigger(d.default.CUES_PARSED, {
                                type: "subtitles",
                                cues: t,
                                track: o,
                              });
                            }
                            i.trigger(d.default.SUBTITLE_FRAG_PROCESSED, {
                              success: !0,
                              frag: e,
                            });
                          },
                          function (t) {
                            u.logger.log("Failed to parse VTT cue: " + t),
                              i.trigger(d.default.SUBTITLE_FRAG_PROCESSED, {
                                success: !1,
                                frag: e,
                              });
                          }
                        );
                    }),
                    (a.onFragDecrypted = function (e) {
                      var t = e.frag,
                        r = e.payload;
                      if ("subtitle" === t.type) {
                        if (!Object(l.isFiniteNumber)(this.initPTS[t.cc]))
                          return void this.unparsedVttFrags.push(e);
                        this._parseVTTs(t, r);
                      }
                    }),
                    (a.onFragParsingUserdata = function (e) {
                      var t = this.cea608Parser1,
                        r = this.cea608Parser2;
                      if (this.enabled && t && r)
                        for (var i = 0; i < e.samples.length; i++) {
                          var a = e.samples[i].bytes;
                          if (a) {
                            var n = this.extractCea608Data(a);
                            t.addData(e.samples[i].pts, n[0]),
                              r.addData(e.samples[i].pts, n[1]);
                          }
                        }
                    }),
                    (a.extractCea608Data = function (e) {
                      for (
                        var t = 31 & e[0], r = 2, i = [[], []], a = 0;
                        a < t;
                        a++
                      ) {
                        var n = e[r++],
                          o = 127 & e[r++],
                          s = 127 & e[r++],
                          l = 3 & n;
                        (0 === o && 0 === s) ||
                          (0 != (4 & n) &&
                            ((0 !== l && 1 !== l) ||
                              (i[l].push(o), i[l].push(s))));
                      }
                      return i;
                    }),
                    i
                  );
                })(h);
                function Ut(e, t) {
                  for (var r = 0; r < t.length; r++) {
                    var i = t[r];
                    (i.enumerable = i.enumerable || !1),
                      (i.configurable = !0),
                      "value" in i && (i.writable = !0),
                      Object.defineProperty(e, i.key, i);
                  }
                }
                function Ht(e) {
                  for (var t = [], r = 0; r < e.length; r++) {
                    var i = e[r];
                    "subtitles" === i.kind && i.label && t.push(e[r]);
                  }
                  return t;
                }
                var jt,
                  Gt = (function (e) {
                    var t, r;
                    function i(t) {
                      var r;
                      return (
                        ((r =
                          e.call(
                            this,
                            t,
                            d.default.MEDIA_ATTACHED,
                            d.default.MEDIA_DETACHING,
                            d.default.MANIFEST_LOADED,
                            d.default.SUBTITLE_TRACK_LOADED
                          ) || this).tracks = []),
                        (r.trackId = -1),
                        (r.media = null),
                        (r.stopped = !0),
                        (r.subtitleDisplay = !0),
                        (r.queuedDefaultTrack = null),
                        r
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a,
                      n,
                      o,
                      s = i.prototype;
                    return (
                      (s.destroy = function () {
                        h.prototype.destroy.call(this);
                      }),
                      (s.onMediaAttached = function (e) {
                        var t = this;
                        (this.media = e.media),
                          this.media &&
                            (Object(l.isFiniteNumber)(
                              this.queuedDefaultTrack
                            ) &&
                              ((this.subtitleTrack = this.queuedDefaultTrack),
                              (this.queuedDefaultTrack = null)),
                            (this.trackChangeListener =
                              this._onTextTracksChanged.bind(this)),
                            (this.useTextTrackPolling = !(
                              this.media.textTracks &&
                              "onchange" in this.media.textTracks
                            )),
                            this.useTextTrackPolling
                              ? (this.subtitlePollingInterval = setInterval(
                                  function () {
                                    t.trackChangeListener();
                                  },
                                  500
                                ))
                              : this.media.textTracks.addEventListener(
                                  "change",
                                  this.trackChangeListener
                                ));
                      }),
                      (s.onMediaDetaching = function () {
                        this.media &&
                          (this.useTextTrackPolling
                            ? clearInterval(this.subtitlePollingInterval)
                            : this.media.textTracks.removeEventListener(
                                "change",
                                this.trackChangeListener
                              ),
                          Object(l.isFiniteNumber)(this.subtitleTrack) &&
                            (this.queuedDefaultTrack = this.subtitleTrack),
                          Ht(this.media.textTracks).forEach(function (e) {
                            Ne(e);
                          }),
                          (this.subtitleTrack = -1),
                          (this.media = null));
                      }),
                      (s.onManifestLoaded = function (e) {
                        var t = this,
                          r = e.subtitles || [];
                        (this.tracks = r),
                          this.hls.trigger(d.default.SUBTITLE_TRACKS_UPDATED, {
                            subtitleTracks: r,
                          }),
                          r.forEach(function (e) {
                            e.default &&
                              (t.media
                                ? (t.subtitleTrack = e.id)
                                : (t.queuedDefaultTrack = e.id));
                          });
                      }),
                      (s.onSubtitleTrackLoaded = function (e) {
                        var t = this,
                          r = e.id,
                          i = e.details,
                          a = this.trackId,
                          n = this.tracks,
                          o = n[a];
                        if (r >= n.length || r !== a || !o || this.stopped)
                          this._clearReloadTimer();
                        else if (
                          (u.logger.log("subtitle track " + r + " loaded"),
                          i.live)
                        ) {
                          var s = ae(o.details, i, e.stats.trequest);
                          u.logger.log(
                            "Reloading live subtitle playlist in " + s + "ms"
                          ),
                            (this.timer = setTimeout(function () {
                              t._loadCurrentTrack();
                            }, s));
                        } else this._clearReloadTimer();
                      }),
                      (s.startLoad = function () {
                        (this.stopped = !1), this._loadCurrentTrack();
                      }),
                      (s.stopLoad = function () {
                        (this.stopped = !0), this._clearReloadTimer();
                      }),
                      (s._clearReloadTimer = function () {
                        this.timer &&
                          (clearTimeout(this.timer), (this.timer = null));
                      }),
                      (s._loadCurrentTrack = function () {
                        var e = this.trackId,
                          t = this.tracks,
                          r = this.hls,
                          i = t[e];
                        e < 0 ||
                          !i ||
                          (i.details && !i.details.live) ||
                          (u.logger.log("Loading subtitle track " + e),
                          r.trigger(d.default.SUBTITLE_TRACK_LOADING, {
                            url: i.url,
                            id: e,
                          }));
                      }),
                      (s._toggleTrackModes = function (e) {
                        var t = this.media,
                          r = this.subtitleDisplay,
                          i = this.trackId;
                        if (t) {
                          var a = Ht(t.textTracks);
                          if (-1 === e)
                            [].slice.call(a).forEach(function (e) {
                              e.mode = "disabled";
                            });
                          else {
                            var n = a[i];
                            n && (n.mode = "disabled");
                          }
                          var o = a[e];
                          o && (o.mode = r ? "showing" : "hidden");
                        }
                      }),
                      (s._setSubtitleTrackInternal = function (e) {
                        var t = this.hls,
                          r = this.tracks;
                        !Object(l.isFiniteNumber)(e) ||
                          e < -1 ||
                          e >= r.length ||
                          ((this.trackId = e),
                          u.logger.log("Switching to subtitle track " + e),
                          t.trigger(d.default.SUBTITLE_TRACK_SWITCH, {
                            id: e,
                          }),
                          this._loadCurrentTrack());
                      }),
                      (s._onTextTracksChanged = function () {
                        if (
                          this.media &&
                          this.hls.config.renderTextTracksNatively
                        ) {
                          for (
                            var e = -1, t = Ht(this.media.textTracks), r = 0;
                            r < t.length;
                            r++
                          )
                            if ("hidden" === t[r].mode) e = r;
                            else if ("showing" === t[r].mode) {
                              e = r;
                              break;
                            }
                          this.subtitleTrack = e;
                        }
                      }),
                      (a = i),
                      (n = [
                        {
                          key: "subtitleTracks",
                          get: function () {
                            return this.tracks;
                          },
                        },
                        {
                          key: "subtitleTrack",
                          get: function () {
                            return this.trackId;
                          },
                          set: function (e) {
                            this.trackId !== e &&
                              (this._toggleTrackModes(e),
                              this._setSubtitleTrackInternal(e));
                          },
                        },
                      ]) && Ut(a.prototype, n),
                      o && Ut(a, o),
                      i
                    );
                  })(h),
                  zt = r("./src/crypt/decrypter.js"),
                  Yt = window.performance,
                  Kt = (function (e) {
                    var t, r;
                    function i(t, r) {
                      var i;
                      return (
                        ((i =
                          e.call(
                            this,
                            t,
                            d.default.MEDIA_ATTACHED,
                            d.default.MEDIA_DETACHING,
                            d.default.ERROR,
                            d.default.KEY_LOADED,
                            d.default.FRAG_LOADED,
                            d.default.SUBTITLE_TRACKS_UPDATED,
                            d.default.SUBTITLE_TRACK_SWITCH,
                            d.default.SUBTITLE_TRACK_LOADED,
                            d.default.SUBTITLE_FRAG_PROCESSED,
                            d.default.LEVEL_UPDATED
                          ) || this).fragmentTracker = r),
                        (i.config = t.config),
                        (i.state = ge),
                        (i.tracks = []),
                        (i.tracksBuffered = []),
                        (i.currentTrackId = -1),
                        (i.decrypter = new zt.default(t, t.config)),
                        (i.lastAVStart = 0),
                        (i._onMediaSeeking = i.onMediaSeeking.bind(
                          (function (e) {
                            if (void 0 === e)
                              throw new ReferenceError(
                                "this hasn't been initialised - super() hasn't been called"
                              );
                            return e;
                          })(i)
                        )),
                        i
                      );
                    }
                    (r = e),
                      ((t = i).prototype = Object.create(r.prototype)),
                      (t.prototype.constructor = t),
                      (t.__proto__ = r);
                    var a = i.prototype;
                    return (
                      (a.startLoad = function () {
                        this.stopLoad(), (this.state = ye);
                        var e = this.tracks[this.currentTrackId];
                        e && e.details && (this.setInterval(500), this.tick());
                      }),
                      (a.onSubtitleFragProcessed = function (e) {
                        var t = e.frag,
                          r = e.success;
                        if (((this.fragPrevious = t), (this.state = ye), r)) {
                          var i = this.tracksBuffered[this.currentTrackId];
                          if (i) {
                            for (var a, n = t.start, o = 0; o < i.length; o++)
                              if (n >= i[o].start && n <= i[o].end) {
                                a = i[o];
                                break;
                              }
                            var s = t.start + t.duration;
                            a
                              ? (a.end = s)
                              : ((a = {
                                  start: n,
                                  end: s,
                                }),
                                i.push(a));
                          }
                        }
                      }),
                      (a.onMediaAttached = function (e) {
                        var t = e.media;
                        (this.media = t),
                          t.addEventListener("seeking", this._onMediaSeeking),
                          (this.state = ye);
                      }),
                      (a.onMediaDetaching = function () {
                        var e = this;
                        this.media &&
                          (this.media.removeEventListener(
                            "seeking",
                            this._onMediaSeeking
                          ),
                          this.fragmentTracker.removeAllFragments(),
                          (this.currentTrackId = -1),
                          this.tracks.forEach(function (t) {
                            e.tracksBuffered[t.id] = [];
                          }),
                          (this.media = null),
                          (this.state = ge));
                      }),
                      (a.onError = function (e) {
                        var t = e.frag;
                        t &&
                          "subtitle" === t.type &&
                          (this.fragCurrent &&
                            this.fragCurrent.loader &&
                            this.fragCurrent.loader.abort(),
                          (this.state = ye));
                      }),
                      (a.onSubtitleTracksUpdated = function (e) {
                        var t = this;
                        u.logger.log("subtitle tracks updated"),
                          (this.tracksBuffered = []),
                          (this.tracks = e.subtitleTracks),
                          this.tracks.forEach(function (e) {
                            t.tracksBuffered[e.id] = [];
                          });
                      }),
                      (a.onSubtitleTrackSwitch = function (e) {
                        if (
                          ((this.currentTrackId = e.id),
                          this.tracks &&
                            this.tracks.length &&
                            -1 !== this.currentTrackId)
                        ) {
                          var t = this.tracks[this.currentTrackId];
                          t && t.details && this.setInterval(500);
                        } else this.clearInterval();
                      }),
                      (a.onSubtitleTrackLoaded = function (e) {
                        var t = e.id,
                          r = e.details,
                          i = this.currentTrackId,
                          a = this.tracks,
                          n = a[i];
                        t >= a.length ||
                          t !== i ||
                          !n ||
                          (r.live &&
                            (function (e, t, r) {
                              void 0 === r && (r = 0);
                              var i = -1;
                              ie(e, t, function (e, t, r) {
                                (t.start = e.start), (i = r);
                              });
                              var a = t.fragments;
                              if (i < 0)
                                a.forEach(function (e) {
                                  e.start += r;
                                });
                              else
                                for (var n = i + 1; n < a.length; n++)
                                  a[n].start =
                                    a[n - 1].start + a[n - 1].duration;
                            })(n.details, r, this.lastAVStart),
                          (n.details = r),
                          this.setInterval(500));
                      }),
                      (a.onKeyLoaded = function () {
                        this.state === be && (this.state = ye);
                      }),
                      (a.onFragLoaded = function (e) {
                        var t = this.fragCurrent,
                          r = e.frag.decryptdata,
                          i = e.frag,
                          a = this.hls;
                        if (
                          this.state === _e &&
                          t &&
                          "subtitle" === e.frag.type &&
                          t.sn === e.frag.sn &&
                          e.payload.byteLength > 0 &&
                          r &&
                          r.key &&
                          "AES-128" === r.method
                        ) {
                          var n = Yt.now();
                          this.decrypter.decrypt(
                            e.payload,
                            r.key.buffer,
                            r.iv.buffer,
                            function (e) {
                              var t = Yt.now();
                              a.trigger(d.default.FRAG_DECRYPTED, {
                                frag: i,
                                payload: e,
                                stats: {
                                  tstart: n,
                                  tdecrypt: t,
                                },
                              });
                            }
                          );
                        }
                      }),
                      (a.onLevelUpdated = function (e) {
                        var t = e.details.fragments;
                        this.lastAVStart = t.length ? t[0].start : 0;
                      }),
                      (a.doTick = function () {
                        if (this.media)
                          switch (this.state) {
                            case ye:
                              var e = this.config,
                                t = this.currentTrackId,
                                r = this.fragmentTracker,
                                i = this.media,
                                a = this.tracks;
                              if (!a || !a[t] || !a[t].details) break;
                              var n,
                                o = e.maxBufferHole,
                                s = e.maxFragLookUpTolerance,
                                l = Math.min(
                                  e.maxBufferLength,
                                  e.maxMaxBufferLength
                                ),
                                c = z.bufferedInfo(
                                  this._getBuffered(),
                                  i.currentTime,
                                  o
                                ),
                                h = c.end,
                                f = c.len,
                                p = a[t].details,
                                g = p.fragments,
                                v = g.length,
                                y = g[v - 1].start + g[v - 1].duration;
                              if (f > l) return;
                              var m = this.fragPrevious;
                              h < y
                                ? (m &&
                                    p.hasProgramDateTime &&
                                    (n = le(g, m.endProgramDateTime, s)),
                                  n || (n = de(m, g, h, s)))
                                : (n = g[v - 1]),
                                n && n.encrypted
                                  ? (u.logger.log("Loading key for " + n.sn),
                                    (this.state = be),
                                    this.hls.trigger(d.default.KEY_LOADING, {
                                      frag: n,
                                    }))
                                  : n &&
                                    r.getState(n) === B &&
                                    ((this.fragCurrent = n),
                                    (this.state = _e),
                                    this.hls.trigger(d.default.FRAG_LOADING, {
                                      frag: n,
                                    }));
                          }
                        else this.state = ye;
                      }),
                      (a.stopLoad = function () {
                        (this.lastAVStart = 0),
                          (this.fragPrevious = null),
                          e.prototype.stopLoad.call(this);
                      }),
                      (a._getBuffered = function () {
                        return this.tracksBuffered[this.currentTrackId] || [];
                      }),
                      (a.onMediaSeeking = function () {
                        if (this.fragCurrent) {
                          var e = this.media ? this.media.currentTime : 0,
                            t = this.config.maxFragLookUpTolerance,
                            r = this.fragCurrent.start - t,
                            i =
                              this.fragCurrent.start +
                              this.fragCurrent.duration +
                              t;
                          (e < r || e > i) &&
                            (this.fragCurrent.loader &&
                              this.fragCurrent.loader.abort(),
                            this.fragmentTracker.removeFragment(
                              this.fragCurrent
                            ),
                            (this.fragCurrent = null),
                            (this.fragPrevious = null),
                            (this.state = ye),
                            this.tick());
                        }
                      }),
                      i
                    );
                  })(De);
                !(function (e) {
                  (e.WIDEVINE = "com.widevine.alpha"),
                    (e.PLAYREADY = "com.microsoft.playready");
                })(jt || (jt = {}));
                var Vt =
                  "undefined" != typeof window &&
                  window.navigator &&
                  window.navigator.requestMediaKeySystemAccess
                    ? window.navigator.requestMediaKeySystemAccess.bind(
                        window.navigator
                      )
                    : null;
                function qt(e, t) {
                  for (var r = 0; r < t.length; r++) {
                    var i = t[r];
                    (i.enumerable = i.enumerable || !1),
                      (i.configurable = !0),
                      "value" in i && (i.writable = !0),
                      Object.defineProperty(e, i.key, i);
                  }
                }
                var Wt = (function (e) {
                  var t, r;
                  function i(t) {
                    var r;
                    return (
                      ((r =
                        e.call(
                          this,
                          t,
                          d.default.MEDIA_ATTACHED,
                          d.default.MEDIA_DETACHED,
                          d.default.MANIFEST_PARSED
                        ) || this)._widevineLicenseUrl = void 0),
                      (r._licenseXhrSetup = void 0),
                      (r._emeEnabled = void 0),
                      (r._requestMediaKeySystemAccess = void 0),
                      (r._drmSystemOptions = void 0),
                      (r._config = void 0),
                      (r._mediaKeysList = []),
                      (r._media = null),
                      (r._hasSetMediaKeys = !1),
                      (r._requestLicenseFailureCount = 0),
                      (r.mediaKeysPromise = null),
                      (r._onMediaEncrypted = function (e) {
                        if (
                          (u.logger.log(
                            'Media is encrypted using "' +
                              e.initDataType +
                              '" init data type'
                          ),
                          !r.mediaKeysPromise)
                        )
                          return (
                            u.logger.error(
                              "Fatal: Media is encrypted but no CDM access or no keys have been requested"
                            ),
                            void r.hls.trigger(d.default.ERROR, {
                              type: s.ErrorTypes.KEY_SYSTEM_ERROR,
                              details: s.ErrorDetails.KEY_SYSTEM_NO_KEYS,
                              fatal: !0,
                            })
                          );
                        var t = function (t) {
                          r._media &&
                            (r._attemptSetMediaKeys(t),
                            r._generateRequestWithPreferredKeySession(
                              e.initDataType,
                              e.initData
                            ));
                        };
                        r.mediaKeysPromise.then(t).catch(t);
                      }),
                      (r._config = t.config),
                      (r._widevineLicenseUrl = r._config.widevineLicenseUrl),
                      (r._licenseXhrSetup = r._config.licenseXhrSetup),
                      (r._emeEnabled = r._config.emeEnabled),
                      (r._requestMediaKeySystemAccess =
                        r._config.requestMediaKeySystemAccessFunc),
                      (r._drmSystemOptions = t.config.drmSystemOptions),
                      r
                    );
                  }
                  (r = e),
                    ((t = i).prototype = Object.create(r.prototype)),
                    (t.prototype.constructor = t),
                    (t.__proto__ = r);
                  var a,
                    n,
                    o,
                    l = i.prototype;
                  return (
                    (l.getLicenseServerUrl = function (e) {
                      switch (e) {
                        case jt.WIDEVINE:
                          if (!this._widevineLicenseUrl) break;
                          return this._widevineLicenseUrl;
                      }
                      throw new Error(
                        'no license server URL configured for key-system "' +
                          e +
                          '"'
                      );
                    }),
                    (l._attemptKeySystemAccess = function (e, t, r) {
                      var i = this,
                        a = (function (e, t, r, i) {
                          switch (e) {
                            case jt.WIDEVINE:
                              return (function (e, t, r) {
                                var i = {
                                  audioCapabilities: [],
                                  videoCapabilities: [],
                                };
                                return (
                                  e.forEach(function (e) {
                                    i.audioCapabilities.push({
                                      contentType:
                                        'audio/mp4; codecs="' + e + '"',
                                      robustness: r.audioRobustness || "",
                                    });
                                  }),
                                  t.forEach(function (e) {
                                    i.videoCapabilities.push({
                                      contentType:
                                        'video/mp4; codecs="' + e + '"',
                                      robustness: r.videoRobustness || "",
                                    });
                                  }),
                                  [i]
                                );
                              })(t, r, i);
                            default:
                              throw new Error("Unknown key-system: " + e);
                          }
                        })(e, t, r, this._drmSystemOptions);
                      u.logger.log(
                        "Requesting encrypted media key-system access"
                      );
                      var n = this.requestMediaKeySystemAccess(e, a);
                      (this.mediaKeysPromise = n.then(function (t) {
                        return i._onMediaKeySystemAccessObtained(e, t);
                      })),
                        n.catch(function (t) {
                          u.logger.error(
                            'Failed to obtain key-system "' + e + '" access:',
                            t
                          );
                        });
                    }),
                    (l._onMediaKeySystemAccessObtained = function (e, t) {
                      var r = this;
                      u.logger.log(
                        'Access for key-system "' + e + '" obtained'
                      );
                      var i = {
                        mediaKeysSessionInitialized: !1,
                        mediaKeySystemAccess: t,
                        mediaKeySystemDomain: e,
                      };
                      this._mediaKeysList.push(i);
                      var a = Promise.resolve()
                        .then(function () {
                          return t.createMediaKeys();
                        })
                        .then(function (t) {
                          return (
                            (i.mediaKeys = t),
                            u.logger.log(
                              'Media-keys created for key-system "' + e + '"'
                            ),
                            r._onMediaKeysCreated(),
                            t
                          );
                        });
                      return (
                        a.catch(function (e) {
                          u.logger.error("Failed to create media-keys:", e);
                        }),
                        a
                      );
                    }),
                    (l._onMediaKeysCreated = function () {
                      var e = this;
                      this._mediaKeysList.forEach(function (t) {
                        t.mediaKeysSession ||
                          ((t.mediaKeysSession = t.mediaKeys.createSession()),
                          e._onNewMediaKeySession(t.mediaKeysSession));
                      });
                    }),
                    (l._onNewMediaKeySession = function (e) {
                      var t = this;
                      u.logger.log("New key-system session " + e.sessionId),
                        e.addEventListener(
                          "message",
                          function (r) {
                            t._onKeySessionMessage(e, r.message);
                          },
                          !1
                        );
                    }),
                    (l._onKeySessionMessage = function (e, t) {
                      u.logger.log(
                        "Got EME message event, creating license request"
                      ),
                        this._requestLicense(t, function (t) {
                          u.logger.log(
                            "Received license data (length: " +
                              (t ? t.byteLength : t) +
                              "), updating key-session"
                          ),
                            e.update(t);
                        });
                    }),
                    (l._attemptSetMediaKeys = function (e) {
                      if (!this._media)
                        throw new Error(
                          "Attempted to set mediaKeys without first attaching a media element"
                        );
                      if (!this._hasSetMediaKeys) {
                        var t = this._mediaKeysList[0];
                        if (!t || !t.mediaKeys)
                          return (
                            u.logger.error(
                              "Fatal: Media is encrypted but no CDM access or no keys have been obtained yet"
                            ),
                            void this.hls.trigger(d.default.ERROR, {
                              type: s.ErrorTypes.KEY_SYSTEM_ERROR,
                              details: s.ErrorDetails.KEY_SYSTEM_NO_KEYS,
                              fatal: !0,
                            })
                          );
                        u.logger.log("Setting keys for encrypted media"),
                          this._media.setMediaKeys(t.mediaKeys),
                          (this._hasSetMediaKeys = !0);
                      }
                    }),
                    (l._generateRequestWithPreferredKeySession = function (
                      e,
                      t
                    ) {
                      var r = this,
                        i = this._mediaKeysList[0];
                      if (!i)
                        return (
                          u.logger.error(
                            "Fatal: Media is encrypted but not any key-system access has been obtained yet"
                          ),
                          void this.hls.trigger(d.default.ERROR, {
                            type: s.ErrorTypes.KEY_SYSTEM_ERROR,
                            details: s.ErrorDetails.KEY_SYSTEM_NO_ACCESS,
                            fatal: !0,
                          })
                        );
                      if (i.mediaKeysSessionInitialized)
                        u.logger.warn(
                          "Key-Session already initialized but requested again"
                        );
                      else {
                        var a = i.mediaKeysSession;
                        if (!a)
                          return (
                            u.logger.error(
                              "Fatal: Media is encrypted but no key-session existing"
                            ),
                            void this.hls.trigger(d.default.ERROR, {
                              type: s.ErrorTypes.KEY_SYSTEM_ERROR,
                              details: s.ErrorDetails.KEY_SYSTEM_NO_SESSION,
                              fatal: !0,
                            })
                          );
                        if (!t)
                          return (
                            u.logger.warn(
                              "Fatal: initData required for generating a key session is null"
                            ),
                            void this.hls.trigger(d.default.ERROR, {
                              type: s.ErrorTypes.KEY_SYSTEM_ERROR,
                              details: s.ErrorDetails.KEY_SYSTEM_NO_INIT_DATA,
                              fatal: !0,
                            })
                          );
                        u.logger.log(
                          'Generating key-session request for "' +
                            e +
                            '" init data type'
                        ),
                          (i.mediaKeysSessionInitialized = !0),
                          a
                            .generateRequest(e, t)
                            .then(function () {
                              u.logger.debug(
                                "Key-session generation succeeded"
                              );
                            })
                            .catch(function (e) {
                              u.logger.error(
                                "Error generating key-session request:",
                                e
                              ),
                                r.hls.trigger(d.default.ERROR, {
                                  type: s.ErrorTypes.KEY_SYSTEM_ERROR,
                                  details: s.ErrorDetails.KEY_SYSTEM_NO_SESSION,
                                  fatal: !1,
                                });
                            });
                      }
                    }),
                    (l._createLicenseXhr = function (e, t, r) {
                      var i = new XMLHttpRequest(),
                        a = this._licenseXhrSetup;
                      try {
                        if (a)
                          try {
                            a(i, e);
                          } catch (t) {
                            i.open("POST", e, !0), a(i, e);
                          }
                        i.readyState || i.open("POST", e, !0);
                      } catch (e) {
                        throw new Error(
                          "issue setting up KeySystem license XHR " + e
                        );
                      }
                      return (
                        (i.responseType = "arraybuffer"),
                        (i.onreadystatechange =
                          this._onLicenseRequestReadyStageChange.bind(
                            this,
                            i,
                            e,
                            t,
                            r
                          )),
                        i
                      );
                    }),
                    (l._onLicenseRequestReadyStageChange = function (
                      e,
                      t,
                      r,
                      i
                    ) {
                      switch (e.readyState) {
                        case 4:
                          if (200 === e.status)
                            (this._requestLicenseFailureCount = 0),
                              u.logger.log("License request succeeded"),
                              "arraybuffer" !== e.responseType &&
                                u.logger.warn(
                                  "xhr response type was not set to the expected arraybuffer for license request"
                                ),
                              i(e.response);
                          else {
                            if (
                              (u.logger.error(
                                "License Request XHR failed (" +
                                  t +
                                  "). Status: " +
                                  e.status +
                                  " (" +
                                  e.statusText +
                                  ")"
                              ),
                              this._requestLicenseFailureCount++,
                              this._requestLicenseFailureCount > 3)
                            )
                              return void this.hls.trigger(d.default.ERROR, {
                                type: s.ErrorTypes.KEY_SYSTEM_ERROR,
                                details:
                                  s.ErrorDetails
                                    .KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                                fatal: !0,
                              });
                            var a = 3 - this._requestLicenseFailureCount + 1;
                            u.logger.warn(
                              "Retrying license request, " +
                                a +
                                " attempts left"
                            ),
                              this._requestLicense(r, i);
                          }
                      }
                    }),
                    (l._generateLicenseRequestChallenge = function (e, t) {
                      switch (e.mediaKeySystemDomain) {
                        case jt.WIDEVINE:
                          return t;
                      }
                      throw new Error(
                        "unsupported key-system: " + e.mediaKeySystemDomain
                      );
                    }),
                    (l._requestLicense = function (e, t) {
                      u.logger.log("Requesting content license for key-system");
                      var r = this._mediaKeysList[0];
                      if (!r)
                        return (
                          u.logger.error(
                            "Fatal error: Media is encrypted but no key-system access has been obtained yet"
                          ),
                          void this.hls.trigger(d.default.ERROR, {
                            type: s.ErrorTypes.KEY_SYSTEM_ERROR,
                            details: s.ErrorDetails.KEY_SYSTEM_NO_ACCESS,
                            fatal: !0,
                          })
                        );
                      try {
                        var i = this.getLicenseServerUrl(
                            r.mediaKeySystemDomain
                          ),
                          a = this._createLicenseXhr(i, e, t);
                        u.logger.log("Sending license request to URL: " + i);
                        var n = this._generateLicenseRequestChallenge(r, e);
                        a.send(n);
                      } catch (e) {
                        u.logger.error("Failure requesting DRM license: " + e),
                          this.hls.trigger(d.default.ERROR, {
                            type: s.ErrorTypes.KEY_SYSTEM_ERROR,
                            details:
                              s.ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                            fatal: !0,
                          });
                      }
                    }),
                    (l.onMediaAttached = function (e) {
                      if (this._emeEnabled) {
                        var t = e.media;
                        (this._media = t),
                          t.addEventListener(
                            "encrypted",
                            this._onMediaEncrypted
                          );
                      }
                    }),
                    (l.onMediaDetached = function () {
                      var e = this._media,
                        t = this._mediaKeysList;
                      e &&
                        (e.removeEventListener(
                          "encrypted",
                          this._onMediaEncrypted
                        ),
                        (this._media = null),
                        (this._mediaKeysList = []),
                        Promise.all(
                          t.map(function (e) {
                            if (e.mediaKeysSession)
                              return e.mediaKeysSession
                                .close()
                                .catch(function () {});
                          })
                        )
                          .then(function () {
                            return e.setMediaKeys(null);
                          })
                          .catch(function () {}));
                    }),
                    (l.onManifestParsed = function (e) {
                      if (this._emeEnabled) {
                        var t = e.levels.map(function (e) {
                            return e.audioCodec;
                          }),
                          r = e.levels.map(function (e) {
                            return e.videoCodec;
                          });
                        this._attemptKeySystemAccess(jt.WIDEVINE, t, r);
                      }
                    }),
                    (a = i),
                    (n = [
                      {
                        key: "requestMediaKeySystemAccess",
                        get: function () {
                          if (!this._requestMediaKeySystemAccess)
                            throw new Error(
                              "No requestMediaKeySystemAccess function configured"
                            );
                          return this._requestMediaKeySystemAccess;
                        },
                      },
                    ]) && qt(a.prototype, n),
                    o && qt(a, o),
                    i
                  );
                })(h);
                function Xt(e, t) {
                  var r = Object.keys(e);
                  if (Object.getOwnPropertySymbols) {
                    var i = Object.getOwnPropertySymbols(e);
                    t &&
                      (i = i.filter(function (t) {
                        return Object.getOwnPropertyDescriptor(e, t).enumerable;
                      })),
                      r.push.apply(r, i);
                  }
                  return r;
                }
                function Qt(e) {
                  for (var t = 1; t < arguments.length; t++) {
                    var r = null != arguments[t] ? arguments[t] : {};
                    t % 2
                      ? Xt(Object(r), !0).forEach(function (t) {
                          Zt(e, t, r[t]);
                        })
                      : Object.getOwnPropertyDescriptors
                      ? Object.defineProperties(
                          e,
                          Object.getOwnPropertyDescriptors(r)
                        )
                      : Xt(Object(r)).forEach(function (t) {
                          Object.defineProperty(
                            e,
                            t,
                            Object.getOwnPropertyDescriptor(r, t)
                          );
                        });
                  }
                  return e;
                }
                function Zt(e, t, r) {
                  return (
                    t in e
                      ? Object.defineProperty(e, t, {
                          value: r,
                          enumerable: !0,
                          configurable: !0,
                          writable: !0,
                        })
                      : (e[t] = r),
                    e
                  );
                }
                var Jt = Qt(
                  Qt(
                    {
                      autoStartLoad: !0,
                      startPosition: -1,
                      defaultAudioCodec: void 0,
                      debug: !1,
                      capLevelOnFPSDrop: !1,
                      capLevelToPlayerSize: !1,
                      initialLiveManifestSize: 1,
                      maxBufferLength: 30,
                      maxBufferSize: 6e7,
                      maxBufferHole: 0.5,
                      lowBufferWatchdogPeriod: 0.5,
                      highBufferWatchdogPeriod: 3,
                      nudgeOffset: 0.1,
                      nudgeMaxRetry: 3,
                      maxFragLookUpTolerance: 0.25,
                      liveSyncDurationCount: 3,
                      liveMaxLatencyDurationCount: 1 / 0,
                      liveSyncDuration: void 0,
                      liveMaxLatencyDuration: void 0,
                      liveDurationInfinity: !1,
                      liveBackBufferLength: 1 / 0,
                      maxMaxBufferLength: 600,
                      enableWorker: !0,
                      enableSoftwareAES: !0,
                      manifestLoadingTimeOut: 1e4,
                      manifestLoadingMaxRetry: 1,
                      manifestLoadingRetryDelay: 1e3,
                      manifestLoadingMaxRetryTimeout: 64e3,
                      startLevel: void 0,
                      levelLoadingTimeOut: 1e4,
                      levelLoadingMaxRetry: 4,
                      levelLoadingRetryDelay: 1e3,
                      levelLoadingMaxRetryTimeout: 64e3,
                      fragLoadingTimeOut: 2e4,
                      fragLoadingMaxRetry: 6,
                      fragLoadingRetryDelay: 1e3,
                      fragLoadingMaxRetryTimeout: 64e3,
                      startFragPrefetch: !1,
                      fpsDroppedMonitoringPeriod: 5e3,
                      fpsDroppedMonitoringThreshold: 0.2,
                      appendErrorMaxRetry: 3,
                      loader: Ze,
                      fLoader: void 0,
                      pLoader: void 0,
                      xhrSetup: void 0,
                      licenseXhrSetup: void 0,
                      abrController: Ye,
                      bufferController: Ve,
                      capLevelController: We,
                      fpsController: Qe,
                      stretchShortVideoTrack: !1,
                      maxAudioFramesDrift: 1,
                      forceKeyFrameOnDiscontinuity: !0,
                      abrEwmaFastLive: 3,
                      abrEwmaSlowLive: 9,
                      abrEwmaFastVoD: 3,
                      abrEwmaSlowVoD: 9,
                      abrEwmaDefaultEstimate: 5e5,
                      abrBandWidthFactor: 0.95,
                      abrBandWidthUpFactor: 0.7,
                      abrMaxWithRealBitrate: !1,
                      maxStarvationDelay: 4,
                      maxLoadingDelay: 4,
                      minAutoBitrate: 0,
                      emeEnabled: !1,
                      widevineLicenseUrl: void 0,
                      drmSystemOptions: {},
                      requestMediaKeySystemAccessFunc: Vt,
                      testBandwidth: !0,
                    },
                    {
                      cueHandler: i,
                      enableCEA708Captions: !0,
                      enableWebVTT: !0,
                      captionsTextTrack1Label: "English",
                      captionsTextTrack1LanguageCode: "en",
                      captionsTextTrack2Label: "Spanish",
                      captionsTextTrack2LanguageCode: "es",
                      captionsTextTrack3Label: "Unknown CC",
                      captionsTextTrack3LanguageCode: "",
                      captionsTextTrack4Label: "Unknown CC",
                      captionsTextTrack4LanguageCode: "",
                      renderTextTracksNatively: !0,
                    }
                  ),
                  {},
                  {
                    subtitleStreamController: Kt,
                    subtitleTrackController: Gt,
                    timelineController: Nt,
                    audioStreamController: rt,
                    audioTrackController: $e,
                    emeController: Wt,
                  }
                );
                function $t(e, t) {
                  var r = Object.keys(e);
                  if (Object.getOwnPropertySymbols) {
                    var i = Object.getOwnPropertySymbols(e);
                    t &&
                      (i = i.filter(function (t) {
                        return Object.getOwnPropertyDescriptor(e, t).enumerable;
                      })),
                      r.push.apply(r, i);
                  }
                  return r;
                }
                function er(e) {
                  for (var t = 1; t < arguments.length; t++) {
                    var r = null != arguments[t] ? arguments[t] : {};
                    t % 2
                      ? $t(Object(r), !0).forEach(function (t) {
                          tr(e, t, r[t]);
                        })
                      : Object.getOwnPropertyDescriptors
                      ? Object.defineProperties(
                          e,
                          Object.getOwnPropertyDescriptors(r)
                        )
                      : $t(Object(r)).forEach(function (t) {
                          Object.defineProperty(
                            e,
                            t,
                            Object.getOwnPropertyDescriptor(r, t)
                          );
                        });
                  }
                  return e;
                }
                function tr(e, t, r) {
                  return (
                    t in e
                      ? Object.defineProperty(e, t, {
                          value: r,
                          enumerable: !0,
                          configurable: !0,
                          writable: !0,
                        })
                      : (e[t] = r),
                    e
                  );
                }
                function rr(e) {
                  if (void 0 === e)
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    );
                  return e;
                }
                function ir(e, t) {
                  for (var r = 0; r < t.length; r++) {
                    var i = t[r];
                    (i.enumerable = i.enumerable || !1),
                      (i.configurable = !0),
                      "value" in i && (i.writable = !0),
                      Object.defineProperty(e, i.key, i);
                  }
                }
                function ar(e, t, r) {
                  return t && ir(e.prototype, t), r && ir(e, r), e;
                }
                var nr = (function (e) {
                  var t, r;
                  function i(t) {
                    var r;
                    void 0 === t && (t = {}),
                      ((r = e.call(this) || this).config = void 0),
                      (r._autoLevelCapping = void 0),
                      (r.abrController = void 0),
                      (r.capLevelController = void 0),
                      (r.levelController = void 0),
                      (r.streamController = void 0),
                      (r.networkControllers = void 0),
                      (r.audioTrackController = void 0),
                      (r.subtitleTrackController = void 0),
                      (r.emeController = void 0),
                      (r.coreComponents = void 0),
                      (r.media = null),
                      (r.url = null);
                    var a = i.DefaultConfig;
                    if (
                      (t.liveSyncDurationCount ||
                        t.liveMaxLatencyDurationCount) &&
                      (t.liveSyncDuration || t.liveMaxLatencyDuration)
                    )
                      throw new Error(
                        "Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration"
                      );
                    r.config = er(er({}, a), t);
                    var n = rr(r).config;
                    if (
                      void 0 !== n.liveMaxLatencyDurationCount &&
                      n.liveMaxLatencyDurationCount <= n.liveSyncDurationCount
                    )
                      throw new Error(
                        'Illegal hls.js config: "liveMaxLatencyDurationCount" must be gt "liveSyncDurationCount"'
                      );
                    if (
                      void 0 !== n.liveMaxLatencyDuration &&
                      (void 0 === n.liveSyncDuration ||
                        n.liveMaxLatencyDuration <= n.liveSyncDuration)
                    )
                      throw new Error(
                        'Illegal hls.js config: "liveMaxLatencyDuration" must be gt "liveSyncDuration"'
                      );
                    Object(u.enableLogs)(n.debug), (r._autoLevelCapping = -1);
                    var o = (r.abrController = new n.abrController(rr(r))),
                      s = new n.bufferController(rr(r)),
                      l = (r.capLevelController = new n.capLevelController(
                        rr(r)
                      )),
                      d = new n.fpsController(rr(r)),
                      c = new P(rr(r)),
                      h = new F(rr(r)),
                      f = new M(rr(r)),
                      p = new Ue(rr(r)),
                      g = (r.levelController = new Fe(rr(r))),
                      v = new j(rr(r)),
                      y = [g, (r.streamController = new Ie(rr(r), v))],
                      m = n.audioStreamController;
                    m && y.push(new m(rr(r), v)), (r.networkControllers = y);
                    var b = [c, h, f, o, s, l, d, p, v];
                    if ((m = n.audioTrackController)) {
                      var _ = new m(rr(r));
                      (r.audioTrackController = _), b.push(_);
                    }
                    if ((m = n.subtitleTrackController)) {
                      var w = new m(rr(r));
                      (r.subtitleTrackController = w), y.push(w);
                    }
                    if ((m = n.emeController)) {
                      var T = new m(rr(r));
                      (r.emeController = T), b.push(T);
                    }
                    return (
                      (m = n.subtitleStreamController) &&
                        y.push(new m(rr(r), v)),
                      (m = n.timelineController) && b.push(new m(rr(r))),
                      (r.coreComponents = b),
                      r
                    );
                  }
                  (r = e),
                    ((t = i).prototype = Object.create(r.prototype)),
                    (t.prototype.constructor = t),
                    (t.__proto__ = r),
                    (i.isSupported = function () {
                      return (function () {
                        var e = q();
                        if (!e) return !1;
                        var t = self.SourceBuffer || self.WebKitSourceBuffer,
                          r =
                            e &&
                            "function" == typeof e.isTypeSupported &&
                            e.isTypeSupported(
                              'video/mp4; codecs="avc1.42E01E,mp4a.40.2"'
                            ),
                          i =
                            !t ||
                            (t.prototype &&
                              "function" == typeof t.prototype.appendBuffer &&
                              "function" == typeof t.prototype.remove);
                        return !!r && !!i;
                      })();
                    }),
                    ar(i, null, [
                      {
                        key: "version",
                        get: function () {
                          return "0.14.17";
                        },
                      },
                      {
                        key: "Events",
                        get: function () {
                          return d.default;
                        },
                      },
                      {
                        key: "ErrorTypes",
                        get: function () {
                          return s.ErrorTypes;
                        },
                      },
                      {
                        key: "ErrorDetails",
                        get: function () {
                          return s.ErrorDetails;
                        },
                      },
                      {
                        key: "DefaultConfig",
                        get: function () {
                          return i.defaultConfig ? i.defaultConfig : Jt;
                        },
                        set: function (e) {
                          i.defaultConfig = e;
                        },
                      },
                    ]);
                  var a = i.prototype;
                  return (
                    (a.destroy = function () {
                      u.logger.log("destroy"),
                        this.trigger(d.default.DESTROYING),
                        this.detachMedia(),
                        this.coreComponents
                          .concat(this.networkControllers)
                          .forEach(function (e) {
                            e.destroy();
                          }),
                        (this.url = null),
                        this.removeAllListeners(),
                        (this._autoLevelCapping = -1);
                    }),
                    (a.attachMedia = function (e) {
                      u.logger.log("attachMedia"),
                        (this.media = e),
                        this.trigger(d.default.MEDIA_ATTACHING, {
                          media: e,
                        });
                    }),
                    (a.detachMedia = function () {
                      u.logger.log("detachMedia"),
                        this.trigger(d.default.MEDIA_DETACHING),
                        (this.media = null);
                    }),
                    (a.loadSource = function (e) {
                      (e = o.buildAbsoluteURL(window.location.href, e, {
                        alwaysNormalize: !0,
                      })),
                        u.logger.log("loadSource:" + e),
                        (this.url = e),
                        this.trigger(d.default.MANIFEST_LOADING, {
                          url: e,
                        });
                    }),
                    (a.startLoad = function (e) {
                      void 0 === e && (e = -1),
                        u.logger.log("startLoad(" + e + ")"),
                        this.networkControllers.forEach(function (t) {
                          t.startLoad(e);
                        });
                    }),
                    (a.stopLoad = function () {
                      u.logger.log("stopLoad"),
                        this.networkControllers.forEach(function (e) {
                          e.stopLoad();
                        });
                    }),
                    (a.swapAudioCodec = function () {
                      u.logger.log("swapAudioCodec"),
                        this.streamController.swapAudioCodec();
                    }),
                    (a.recoverMediaError = function () {
                      u.logger.log("recoverMediaError");
                      var e = this.media;
                      this.detachMedia(), e && this.attachMedia(e);
                    }),
                    (a.removeLevel = function (e, t) {
                      void 0 === t && (t = 0),
                        this.levelController.removeLevel(e, t);
                    }),
                    ar(i, [
                      {
                        key: "levels",
                        get: function () {
                          return this.levelController.levels;
                        },
                      },
                      {
                        key: "currentLevel",
                        get: function () {
                          return this.streamController.currentLevel;
                        },
                        set: function (e) {
                          u.logger.log("set currentLevel:" + e),
                            (this.loadLevel = e),
                            this.streamController.immediateLevelSwitch();
                        },
                      },
                      {
                        key: "nextLevel",
                        get: function () {
                          return this.streamController.nextLevel;
                        },
                        set: function (e) {
                          u.logger.log("set nextLevel:" + e),
                            (this.levelController.manualLevel = e),
                            this.streamController.nextLevelSwitch();
                        },
                      },
                      {
                        key: "loadLevel",
                        get: function () {
                          return this.levelController.level;
                        },
                        set: function (e) {
                          u.logger.log("set loadLevel:" + e),
                            (this.levelController.manualLevel = e);
                        },
                      },
                      {
                        key: "nextLoadLevel",
                        get: function () {
                          return this.levelController.nextLoadLevel;
                        },
                        set: function (e) {
                          this.levelController.nextLoadLevel = e;
                        },
                      },
                      {
                        key: "firstLevel",
                        get: function () {
                          return Math.max(
                            this.levelController.firstLevel,
                            this.minAutoLevel
                          );
                        },
                        set: function (e) {
                          u.logger.log("set firstLevel:" + e),
                            (this.levelController.firstLevel = e);
                        },
                      },
                      {
                        key: "startLevel",
                        get: function () {
                          return this.levelController.startLevel;
                        },
                        set: function (e) {
                          u.logger.log("set startLevel:" + e),
                            -1 !== e && (e = Math.max(e, this.minAutoLevel)),
                            (this.levelController.startLevel = e);
                        },
                      },
                      {
                        key: "capLevelToPlayerSize",
                        set: function (e) {
                          var t = !!e;
                          t !== this.config.capLevelToPlayerSize &&
                            (t
                              ? this.capLevelController.startCapping()
                              : (this.capLevelController.stopCapping(),
                                (this.autoLevelCapping = -1),
                                this.streamController.nextLevelSwitch()),
                            (this.config.capLevelToPlayerSize = t));
                        },
                      },
                      {
                        key: "autoLevelCapping",
                        get: function () {
                          return this._autoLevelCapping;
                        },
                        set: function (e) {
                          u.logger.log("set autoLevelCapping:" + e),
                            (this._autoLevelCapping = e);
                        },
                      },
                      {
                        key: "bandwidthEstimate",
                        get: function () {
                          var e = this.abrController._bwEstimator;
                          return e ? e.getEstimate() : NaN;
                        },
                      },
                      {
                        key: "autoLevelEnabled",
                        get: function () {
                          return -1 === this.levelController.manualLevel;
                        },
                      },
                      {
                        key: "manualLevel",
                        get: function () {
                          return this.levelController.manualLevel;
                        },
                      },
                      {
                        key: "minAutoLevel",
                        get: function () {
                          for (
                            var e = this.levels,
                              t = this.config.minAutoBitrate,
                              r = e ? e.length : 0,
                              i = 0;
                            i < r;
                            i++
                          )
                            if (
                              (e[i].realBitrate
                                ? Math.max(e[i].realBitrate, e[i].bitrate)
                                : e[i].bitrate) > t
                            )
                              return i;
                          return 0;
                        },
                      },
                      {
                        key: "maxAutoLevel",
                        get: function () {
                          var e = this.levels,
                            t = this.autoLevelCapping;
                          return -1 === t && e && e.length ? e.length - 1 : t;
                        },
                      },
                      {
                        key: "nextAutoLevel",
                        get: function () {
                          return Math.min(
                            Math.max(
                              this.abrController.nextAutoLevel,
                              this.minAutoLevel
                            ),
                            this.maxAutoLevel
                          );
                        },
                        set: function (e) {
                          this.abrController.nextAutoLevel = Math.max(
                            this.minAutoLevel,
                            e
                          );
                        },
                      },
                      {
                        key: "audioTracks",
                        get: function () {
                          var e = this.audioTrackController;
                          return e ? e.audioTracks : [];
                        },
                      },
                      {
                        key: "audioTrack",
                        get: function () {
                          var e = this.audioTrackController;
                          return e ? e.audioTrack : -1;
                        },
                        set: function (e) {
                          var t = this.audioTrackController;
                          t && (t.audioTrack = e);
                        },
                      },
                      {
                        key: "liveSyncPosition",
                        get: function () {
                          return this.streamController.liveSyncPosition;
                        },
                      },
                      {
                        key: "subtitleTracks",
                        get: function () {
                          var e = this.subtitleTrackController;
                          return e ? e.subtitleTracks : [];
                        },
                      },
                      {
                        key: "subtitleTrack",
                        get: function () {
                          var e = this.subtitleTrackController;
                          return e ? e.subtitleTrack : -1;
                        },
                        set: function (e) {
                          var t = this.subtitleTrackController;
                          t && (t.subtitleTrack = e);
                        },
                      },
                      {
                        key: "subtitleDisplay",
                        get: function () {
                          var e = this.subtitleTrackController;
                          return !!e && e.subtitleDisplay;
                        },
                        set: function (e) {
                          var t = this.subtitleTrackController;
                          t && (t.subtitleDisplay = e);
                        },
                      },
                    ]),
                    i
                  );
                })(X);
                nr.defaultConfig = void 0;
              },
            /*!*********************************!*\
  !*** ./src/polyfills/number.js ***!
  \*********************************/
            "./src/polyfills/number.js":
              /*! exports provided: isFiniteNumber, MAX_SAFE_INTEGER */
              function (e, t, r) {
                "use strict";
                r.r(t),
                  r.d(t, "isFiniteNumber", function () {
                    return i;
                  }),
                  r.d(t, "MAX_SAFE_INTEGER", function () {
                    return a;
                  });
                var i =
                    Number.isFinite ||
                    function (e) {
                      return "number" == typeof e && isFinite(e);
                    },
                  a = Number.MAX_SAFE_INTEGER || 9007199254740991;
              },
            /*!*************************************!*\
  !*** ./src/utils/get-self-scope.js ***!
  \*************************************/
            "./src/utils/get-self-scope.js":
              /*! exports provided: getSelfScope */
              function (e, t, r) {
                "use strict";
                function i() {
                  return "undefined" == typeof window ? self : window;
                }
                r.r(t),
                  r.d(t, "getSelfScope", function () {
                    return i;
                  });
              },
            /*!*****************************!*\
  !*** ./src/utils/logger.js ***!
  \*****************************/
            "./src/utils/logger.js":
              /*! exports provided: enableLogs, logger */
              function (e, t, r) {
                "use strict";
                r.r(t),
                  r.d(t, "enableLogs", function () {
                    return u;
                  }),
                  r.d(t, "logger", function () {
                    return c;
                  });
                var i = r(
                  /*! ./get-self-scope */
                  "./src/utils/get-self-scope.js"
                );
                function a() {}
                var n = {
                    trace: a,
                    debug: a,
                    log: a,
                    warn: a,
                    info: a,
                    error: a,
                  },
                  o = n;
                function s(e, t) {
                  return (t = "[" + e + "] > " + t);
                }
                var l = Object(i.getSelfScope)();
                function d(e) {
                  var t = l.console[e];
                  return t
                    ? function () {
                        for (
                          var r = arguments.length, i = new Array(r), a = 0;
                          a < r;
                          a++
                        )
                          i[a] = arguments[a];
                        i[0] && (i[0] = s(e, i[0])), t.apply(l.console, i);
                      }
                    : a;
                }
                var u = function (e) {
                    if ((l.console && !0 === e) || "object" == typeof e) {
                      !(function (e) {
                        for (
                          var t = arguments.length,
                            r = new Array(t > 1 ? t - 1 : 0),
                            i = 1;
                          i < t;
                          i++
                        )
                          r[i - 1] = arguments[i];
                        r.forEach(function (t) {
                          o[t] = e[t] ? e[t].bind(e) : d(t);
                        });
                      })(e, "debug", "log", "info", "warn", "error");
                      try {
                        o.log();
                      } catch (e) {
                        o = n;
                      }
                    } else o = n;
                  },
                  c = o;
              },
          }).default;
        }),
        (e.exports = i()));
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        (function (e) {
          var t = i,
            r = t.lib,
            a = r.WordArray,
            n = r.Hasher,
            o = t.algo,
            s = [],
            l = [];
          !(function () {
            function t(t) {
              for (var r = e.sqrt(t), i = 2; i <= r; i++)
                if (!(t % i)) return !1;
              return !0;
            }
            function r(e) {
              return (4294967296 * (e - (0 | e))) | 0;
            }
            for (var i = 2, a = 0; a < 64; )
              t(i) &&
                (a < 8 && (s[a] = r(e.pow(i, 0.5))),
                (l[a] = r(e.pow(i, 1 / 3))),
                a++),
                i++;
          })();
          var d = [],
            u = (o.SHA256 = n.extend({
              _doReset: function () {
                this._hash = new a.init(s.slice(0));
              },
              _doProcessBlock: function (e, t) {
                for (
                  var r = this._hash.words,
                    i = r[0],
                    a = r[1],
                    n = r[2],
                    o = r[3],
                    s = r[4],
                    u = r[5],
                    c = r[6],
                    h = r[7],
                    f = 0;
                  f < 64;
                  f++
                ) {
                  if (f < 16) d[f] = 0 | e[t + f];
                  else {
                    var p = d[f - 15],
                      g =
                        ((p << 25) | (p >>> 7)) ^
                        ((p << 14) | (p >>> 18)) ^
                        (p >>> 3),
                      v = d[f - 2],
                      y =
                        ((v << 15) | (v >>> 17)) ^
                        ((v << 13) | (v >>> 19)) ^
                        (v >>> 10);
                    d[f] = g + d[f - 7] + y + d[f - 16];
                  }
                  var m = (i & a) ^ (i & n) ^ (a & n),
                    b =
                      ((i << 30) | (i >>> 2)) ^
                      ((i << 19) | (i >>> 13)) ^
                      ((i << 10) | (i >>> 22)),
                    _ =
                      h +
                      (((s << 26) | (s >>> 6)) ^
                        ((s << 21) | (s >>> 11)) ^
                        ((s << 7) | (s >>> 25))) +
                      ((s & u) ^ (~s & c)) +
                      l[f] +
                      d[f];
                  (h = c),
                    (c = u),
                    (u = s),
                    (s = (o + _) | 0),
                    (o = n),
                    (n = a),
                    (a = i),
                    (i = (_ + (b + m)) | 0);
                }
                (r[0] = (r[0] + i) | 0),
                  (r[1] = (r[1] + a) | 0),
                  (r[2] = (r[2] + n) | 0),
                  (r[3] = (r[3] + o) | 0),
                  (r[4] = (r[4] + s) | 0),
                  (r[5] = (r[5] + u) | 0),
                  (r[6] = (r[6] + c) | 0),
                  (r[7] = (r[7] + h) | 0);
              },
              _doFinalize: function () {
                var t = this._data,
                  r = t.words,
                  i = 8 * this._nDataBytes,
                  a = 8 * t.sigBytes;
                return (
                  (r[a >>> 5] |= 128 << (24 - (a % 32))),
                  (r[14 + (((a + 64) >>> 9) << 4)] = e.floor(i / 4294967296)),
                  (r[15 + (((a + 64) >>> 9) << 4)] = i),
                  (t.sigBytes = 4 * r.length),
                  this._process(),
                  this._hash
                );
              },
              clone: function () {
                var e = n.clone.call(this);
                return (e._hash = this._hash.clone()), e;
              },
            }));
          (t.SHA256 = n._createHelper(u)),
            (t.HmacSHA256 = n._createHmacHelper(u));
        })(Math),
        i.SHA256);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(5),
        (function () {
          var e = i,
            t = e.lib.Hasher,
            r = e.x64,
            a = r.Word,
            n = r.WordArray,
            o = e.algo;
          function s() {
            return a.create.apply(a, arguments);
          }
          var l = [
              s(1116352408, 3609767458),
              s(1899447441, 602891725),
              s(3049323471, 3964484399),
              s(3921009573, 2173295548),
              s(961987163, 4081628472),
              s(1508970993, 3053834265),
              s(2453635748, 2937671579),
              s(2870763221, 3664609560),
              s(3624381080, 2734883394),
              s(310598401, 1164996542),
              s(607225278, 1323610764),
              s(1426881987, 3590304994),
              s(1925078388, 4068182383),
              s(2162078206, 991336113),
              s(2614888103, 633803317),
              s(3248222580, 3479774868),
              s(3835390401, 2666613458),
              s(4022224774, 944711139),
              s(264347078, 2341262773),
              s(604807628, 2007800933),
              s(770255983, 1495990901),
              s(1249150122, 1856431235),
              s(1555081692, 3175218132),
              s(1996064986, 2198950837),
              s(2554220882, 3999719339),
              s(2821834349, 766784016),
              s(2952996808, 2566594879),
              s(3210313671, 3203337956),
              s(3336571891, 1034457026),
              s(3584528711, 2466948901),
              s(113926993, 3758326383),
              s(338241895, 168717936),
              s(666307205, 1188179964),
              s(773529912, 1546045734),
              s(1294757372, 1522805485),
              s(1396182291, 2643833823),
              s(1695183700, 2343527390),
              s(1986661051, 1014477480),
              s(2177026350, 1206759142),
              s(2456956037, 344077627),
              s(2730485921, 1290863460),
              s(2820302411, 3158454273),
              s(3259730800, 3505952657),
              s(3345764771, 106217008),
              s(3516065817, 3606008344),
              s(3600352804, 1432725776),
              s(4094571909, 1467031594),
              s(275423344, 851169720),
              s(430227734, 3100823752),
              s(506948616, 1363258195),
              s(659060556, 3750685593),
              s(883997877, 3785050280),
              s(958139571, 3318307427),
              s(1322822218, 3812723403),
              s(1537002063, 2003034995),
              s(1747873779, 3602036899),
              s(1955562222, 1575990012),
              s(2024104815, 1125592928),
              s(2227730452, 2716904306),
              s(2361852424, 442776044),
              s(2428436474, 593698344),
              s(2756734187, 3733110249),
              s(3204031479, 2999351573),
              s(3329325298, 3815920427),
              s(3391569614, 3928383900),
              s(3515267271, 566280711),
              s(3940187606, 3454069534),
              s(4118630271, 4000239992),
              s(116418474, 1914138554),
              s(174292421, 2731055270),
              s(289380356, 3203993006),
              s(460393269, 320620315),
              s(685471733, 587496836),
              s(852142971, 1086792851),
              s(1017036298, 365543100),
              s(1126000580, 2618297676),
              s(1288033470, 3409855158),
              s(1501505948, 4234509866),
              s(1607167915, 987167468),
              s(1816402316, 1246189591),
            ],
            d = [];
          !(function () {
            for (var e = 0; e < 80; e++) d[e] = s();
          })();
          var u = (o.SHA512 = t.extend({
            _doReset: function () {
              this._hash = new n.init([
                new a.init(1779033703, 4089235720),
                new a.init(3144134277, 2227873595),
                new a.init(1013904242, 4271175723),
                new a.init(2773480762, 1595750129),
                new a.init(1359893119, 2917565137),
                new a.init(2600822924, 725511199),
                new a.init(528734635, 4215389547),
                new a.init(1541459225, 327033209),
              ]);
            },
            _doProcessBlock: function (e, t) {
              for (
                var r = this._hash.words,
                  i = r[0],
                  a = r[1],
                  n = r[2],
                  o = r[3],
                  s = r[4],
                  u = r[5],
                  c = r[6],
                  h = r[7],
                  f = i.high,
                  p = i.low,
                  g = a.high,
                  v = a.low,
                  y = n.high,
                  m = n.low,
                  b = o.high,
                  _ = o.low,
                  w = s.high,
                  T = s.low,
                  E = u.high,
                  S = u.low,
                  k = c.high,
                  x = c.low,
                  A = h.high,
                  R = h.low,
                  L = f,
                  D = p,
                  C = g,
                  O = v,
                  I = y,
                  P = m,
                  F = b,
                  M = _,
                  B = w,
                  N = T,
                  U = E,
                  H = S,
                  j = k,
                  G = x,
                  z = A,
                  Y = R,
                  K = 0;
                K < 80;
                K++
              ) {
                var V,
                  q,
                  W = d[K];
                if (K < 16)
                  (q = W.high = 0 | e[t + 2 * K]),
                    (V = W.low = 0 | e[t + 2 * K + 1]);
                else {
                  var X = d[K - 15],
                    Q = X.high,
                    Z = X.low,
                    J =
                      ((Q >>> 1) | (Z << 31)) ^
                      ((Q >>> 8) | (Z << 24)) ^
                      (Q >>> 7),
                    $ =
                      ((Z >>> 1) | (Q << 31)) ^
                      ((Z >>> 8) | (Q << 24)) ^
                      ((Z >>> 7) | (Q << 25)),
                    ee = d[K - 2],
                    te = ee.high,
                    re = ee.low,
                    ie =
                      ((te >>> 19) | (re << 13)) ^
                      ((te << 3) | (re >>> 29)) ^
                      (te >>> 6),
                    ae =
                      ((re >>> 19) | (te << 13)) ^
                      ((re << 3) | (te >>> 29)) ^
                      ((re >>> 6) | (te << 26)),
                    ne = d[K - 7],
                    oe = ne.high,
                    se = ne.low,
                    le = d[K - 16],
                    de = le.high,
                    ue = le.low;
                  (q =
                    (q =
                      (q = J + oe + ((V = $ + se) >>> 0 < $ >>> 0 ? 1 : 0)) +
                      ie +
                      ((V += ae) >>> 0 < ae >>> 0 ? 1 : 0)) +
                    de +
                    ((V += ue) >>> 0 < ue >>> 0 ? 1 : 0)),
                    (W.high = q),
                    (W.low = V);
                }
                var ce,
                  he = (B & U) ^ (~B & j),
                  fe = (N & H) ^ (~N & G),
                  pe = (L & C) ^ (L & I) ^ (C & I),
                  ge = (D & O) ^ (D & P) ^ (O & P),
                  ve =
                    ((L >>> 28) | (D << 4)) ^
                    ((L << 30) | (D >>> 2)) ^
                    ((L << 25) | (D >>> 7)),
                  ye =
                    ((D >>> 28) | (L << 4)) ^
                    ((D << 30) | (L >>> 2)) ^
                    ((D << 25) | (L >>> 7)),
                  me =
                    ((B >>> 14) | (N << 18)) ^
                    ((B >>> 18) | (N << 14)) ^
                    ((B << 23) | (N >>> 9)),
                  be =
                    ((N >>> 14) | (B << 18)) ^
                    ((N >>> 18) | (B << 14)) ^
                    ((N << 23) | (B >>> 9)),
                  _e = l[K],
                  we = _e.high,
                  Te = _e.low,
                  Ee = z + me + ((ce = Y + be) >>> 0 < Y >>> 0 ? 1 : 0),
                  Se = ye + ge;
                (z = j),
                  (Y = G),
                  (j = U),
                  (G = H),
                  (U = B),
                  (H = N),
                  (B =
                    (F +
                      (Ee =
                        (Ee =
                          (Ee =
                            Ee + he + ((ce += fe) >>> 0 < fe >>> 0 ? 1 : 0)) +
                          we +
                          ((ce += Te) >>> 0 < Te >>> 0 ? 1 : 0)) +
                        q +
                        ((ce += V) >>> 0 < V >>> 0 ? 1 : 0)) +
                      ((N = (M + ce) | 0) >>> 0 < M >>> 0 ? 1 : 0)) |
                    0),
                  (F = I),
                  (M = P),
                  (I = C),
                  (P = O),
                  (C = L),
                  (O = D),
                  (L =
                    (Ee +
                      (ve + pe + (Se >>> 0 < ye >>> 0 ? 1 : 0)) +
                      ((D = (ce + Se) | 0) >>> 0 < ce >>> 0 ? 1 : 0)) |
                    0);
              }
              (p = i.low = p + D),
                (i.high = f + L + (p >>> 0 < D >>> 0 ? 1 : 0)),
                (v = a.low = v + O),
                (a.high = g + C + (v >>> 0 < O >>> 0 ? 1 : 0)),
                (m = n.low = m + P),
                (n.high = y + I + (m >>> 0 < P >>> 0 ? 1 : 0)),
                (_ = o.low = _ + M),
                (o.high = b + F + (_ >>> 0 < M >>> 0 ? 1 : 0)),
                (T = s.low = T + N),
                (s.high = w + B + (T >>> 0 < N >>> 0 ? 1 : 0)),
                (S = u.low = S + H),
                (u.high = E + U + (S >>> 0 < H >>> 0 ? 1 : 0)),
                (x = c.low = x + G),
                (c.high = k + j + (x >>> 0 < G >>> 0 ? 1 : 0)),
                (R = h.low = R + Y),
                (h.high = A + z + (R >>> 0 < Y >>> 0 ? 1 : 0));
            },
            _doFinalize: function () {
              var e = this._data,
                t = e.words,
                r = 8 * this._nDataBytes,
                i = 8 * e.sigBytes;
              return (
                (t[i >>> 5] |= 128 << (24 - (i % 32))),
                (t[30 + (((i + 128) >>> 10) << 5)] = Math.floor(
                  r / 4294967296
                )),
                (t[31 + (((i + 128) >>> 10) << 5)] = r),
                (e.sigBytes = 4 * t.length),
                this._process(),
                this._hash.toX32()
              );
            },
            clone: function () {
              var e = t.clone.call(this);
              return (e._hash = this._hash.clone()), e;
            },
            blockSize: 32,
          }));
          (e.SHA512 = t._createHelper(u)),
            (e.HmacSHA512 = t._createHmacHelper(u));
        })(),
        i.SHA512);
    },
    function (e, t, r) {
      "use strict";
      var i,
        a = function () {
          return (
            void 0 === i &&
              (i = Boolean(window && document && document.all && !window.atob)),
            i
          );
        },
        n = (function () {
          var e = {};
          return function (t) {
            if (void 0 === e[t]) {
              var r = document.querySelector(t);
              if (
                window.HTMLIFrameElement &&
                r instanceof window.HTMLIFrameElement
              )
                try {
                  r = r.contentDocument.head;
                } catch (e) {
                  r = null;
                }
              e[t] = r;
            }
            return e[t];
          };
        })(),
        o = [];
      function s(e) {
        for (var t = -1, r = 0; r < o.length; r++)
          if (o[r].identifier === e) {
            t = r;
            break;
          }
        return t;
      }
      function l(e, t) {
        for (var r = {}, i = [], a = 0; a < e.length; a++) {
          var n = e[a],
            l = t.base ? n[0] + t.base : n[0],
            d = r[l] || 0,
            u = "".concat(l, " ").concat(d);
          r[l] = d + 1;
          var c = s(u),
            h = {
              css: n[1],
              media: n[2],
              sourceMap: n[3],
            };
          -1 !== c
            ? (o[c].references++, o[c].updater(h))
            : o.push({
                identifier: u,
                updater: v(h, t),
                references: 1,
              }),
            i.push(u);
        }
        return i;
      }
      function d(e) {
        var t = document.createElement("style"),
          i = e.attributes || {};
        if (void 0 === i.nonce) {
          var a = r.nc;
          a && (i.nonce = a);
        }
        if (
          (Object.keys(i).forEach(function (e) {
            t.setAttribute(e, i[e]);
          }),
          "function" == typeof e.insert)
        )
          e.insert(t);
        else {
          var o = n(e.insert || "head");
          if (!o)
            throw new Error(
              "Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid."
            );
          o.appendChild(t);
        }
        return t;
      }
      var u,
        c =
          ((u = []),
          function (e, t) {
            return (u[e] = t), u.filter(Boolean).join("\n");
          });
      function h(e, t, r, i) {
        var a = r
          ? ""
          : i.media
          ? "@media ".concat(i.media, " {").concat(i.css, "}")
          : i.css;
        if (e.styleSheet) e.styleSheet.cssText = c(t, a);
        else {
          var n = document.createTextNode(a),
            o = e.childNodes;
          o[t] && e.removeChild(o[t]),
            o.length ? e.insertBefore(n, o[t]) : e.appendChild(n);
        }
      }
      function f(e, t, r) {
        var i = r.css,
          a = r.media,
          n = r.sourceMap;
        if (
          (a ? e.setAttribute("media", a) : e.removeAttribute("media"),
          n &&
            "undefined" != typeof btoa &&
            (i += "\n/*# sourceMappingURL=data:application/json;base64,".concat(
              btoa(unescape(encodeURIComponent(JSON.stringify(n)))),
              " */"
            )),
          e.styleSheet)
        )
          e.styleSheet.cssText = i;
        else {
          for (; e.firstChild; ) e.removeChild(e.firstChild);
          e.appendChild(document.createTextNode(i));
        }
      }
      var p = null,
        g = 0;
      function v(e, t) {
        var r, i, a;
        if (t.singleton) {
          var n = g++;
          (r = p || (p = d(t))),
            (i = h.bind(null, r, n, !1)),
            (a = h.bind(null, r, n, !0));
        } else
          (r = d(t)),
            (i = f.bind(null, r, t)),
            (a = function () {
              !(function (e) {
                if (null === e.parentNode) return !1;
                e.parentNode.removeChild(e);
              })(r);
            });
        return (
          i(e),
          function (t) {
            if (t) {
              if (
                t.css === e.css &&
                t.media === e.media &&
                t.sourceMap === e.sourceMap
              )
                return;
              i((e = t));
            } else a();
          }
        );
      }
      e.exports = function (e, t) {
        (t = t || {}).singleton ||
          "boolean" == typeof t.singleton ||
          (t.singleton = a());
        var r = l((e = e || []), t);
        return function (e) {
          if (
            ((e = e || []),
            "[object Array]" === Object.prototype.toString.call(e))
          ) {
            for (var i = 0; i < r.length; i++) {
              var a = s(r[i]);
              o[a].references--;
            }
            for (var n = l(e, t), d = 0; d < r.length; d++) {
              var u = s(r[d]);
              0 === o[u].references && (o[u].updater(), o.splice(u, 1));
            }
            r = n;
          }
        };
      };
    },
    function (e, t, r) {
      "use strict";
      e.exports = function (e) {
        var t = [];
        return (
          (t.toString = function () {
            return this.map(function (t) {
              var r = e(t);
              return t[2] ? "@media ".concat(t[2], " {").concat(r, "}") : r;
            }).join("");
          }),
          (t.i = function (e, r, i) {
            "string" == typeof e && (e = [[null, e, ""]]);
            var a = {};
            if (i)
              for (var n = 0; n < this.length; n++) {
                var o = this[n][0];
                null != o && (a[o] = !0);
              }
            for (var s = 0; s < e.length; s++) {
              var l = [].concat(e[s]);
              (i && a[l[0]]) ||
                (r &&
                  (l[2]
                    ? (l[2] = "".concat(r, " and ").concat(l[2]))
                    : (l[2] = r)),
                t.push(l));
            }
          }),
          t
        );
      };
    },
    function (e, t) {
      e.exports =
        '<svg viewBox="0 0 23 28" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="play-svg" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><path d="M14.1800788,4.60141227 L26.0075713,22.9149491 C26.6068284,23.842831 26.3404253,25.0808217 25.4125434,25.6800788 C25.0891834,25.8889154 24.7124269,26 24.3274926,26 L0.672507438,26 C-0.432062062,26 -1.32749256,25.1045695 -1.32749256,24 C-1.32749256,23.6150656 -1.21640801,23.2383092 -1.00757132,22.9149491 L10.8199212,4.60141227 C11.4191783,3.67353039 12.657169,3.40712733 13.5850509,4.00638437 C13.8233474,4.16028419 14.0261789,4.36311577 14.1800788,4.60141227 Z" fill="#D8D8D8" transform="translate(12.500000, 14.000000) rotate(90.000000) translate(-12.500000, -14.000000) "></path></g></svg>';
    },
    function (e, t) {
      e.exports =
        '<svg viewBox="0 0 26 28" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="pause-svg" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><rect fill="#D8D8D8" x="0" y="1" width="4" height="26" rx="2"></rect><rect fill="#D8D8D8" x="20" y="1" width="4" height="26" rx="2"></rect></g></svg>';
    },
    function (e, t) {
      e.exports =
        '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 34 24"><defs><style> .cls-1 { opacity: 0.9; } </style></defs><image class="cls-1" width="34" height="24" xlink:href="data:img/png;base64,iVBORw0KGgoAAAANSUhEUgAAACIAAAAYCAYAAACfpi8JAAACwklEQVRIibXXz4uVVRgH8M+9DBIz42z6oTG5C20hljhTOU6UlG40E2cRKqQu/JEphEMLp8W0UJD8kaBto18KLcZUJohpEUGKUwOVWfoHDGUUL6SOC9Fs8ZzLvF7fe+fe4n7h5dz3eZ5zzvc9z3l+3FKWZZrAs3gbS9L7hziAa80sUoRyE7YDOIUFGMFX2IzP0FVn3gPoTeP/JrITx/ArVmE3NmEfnsQbdeYuxBl8gb14pMio1IBr3sE2jKfNq93wc5ItqzH/YWzEeszDjURoJG9U70TKOJxIjOG1AhJwE+111vkTR/EcXk+yY9ieN2rL/e7C86b9vQIr8Wn6gjt1CN+uks3Fi/gFPybZLeGi8/gIw/gDp5l2TZ/w9xNVCx7FuzUIVPB9GntzspUiouBrvIeJnL5D3JnH8AImS1mWvYTj4iQGcTkZ38alGUjUItIhQnwNNiTZJhFpFSwV9+Qs9pSyLPsSi0Qk3HOBGkQRkTx60rp/i5O6mtONYjE2lxMJiVkrMCGi5iFsqdKdRAnryribhKUWEYFvcUEkwM6cfDyNS/JEmsmy/wXfYXZ6KvgtjY+2evM86u5VNu2Sf1pM5GmREK/nZN1p/D1P5K7WoT8R+Vik+Ar60jhRxsX08nKLSPSI7PwXPqjSvSoO4PM2HBIJ7Thm4UoyajShFaFT5IdXTCe0QffmkP5kcxbnWpXiV4h6At+I4plP8V2JQDeWY7JS9M5jrfuL3pt4EENqF70iXMRbon/5oUo3FycwH7swSf1+pIyDoo8YS5NuFNiNC5cunoHcLKwWJ9yO/Xi/omyrMYkI58G0+VZ8orgxai+Q5TFH3JP1otpeww5VJaWRhDYs7s8zomd9PKfbKVw3Wmf+fOGmKRwRndx9da2RVrGCAdFZXReu6hL36CcRhrVOpQNPiQZpqtbizRAheoghLfg78S+pj6krIGav1wAAAABJRU5ErkJggg=="></image></svg>';
    },
    function (e, t) {
      e.exports =
        '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 33 24"><defs><style> .cls-1 { opacity: 0.9; } </style></defs><image class="cls-1" width="33" height="24" xlink:href="data:img/png;base64,iVBORw0KGgoAAAANSUhEUgAAACEAAAAYCAYAAAB0kZQKAAACFUlEQVRIibXWXYjMYRTH8c+Mobgg2ZJNsaXEhWjLhVwpSVqbl1qvFyuyIZuwUriS5OUGrfVSFLVKSqTURuHKhbjZpLyHvNQWG6IsF8/zrzF2Zs38Z079m/7znJ7z/T/POb9zMn19fcqwBdiJ6fH9DI7iSzmbFFq2DN92nEMdLuM2NqAbo2sNkcUB7MI9LIpAa3AEs7A1DURmiOsYg2OYjyvYjp8FPr34jDmVQuRKrNUJx9+Is9hXxO8bRlYKUAgxFTMxLL5vRgP2o7PEHlkMVANik3DUhV/UhmtpAvwvxHLswSMhAZNy68eLlPs3Yy068HyQ9aVYlYsO79GKDymDFlpOSNjzWIm3eWuLcQL9WUzE/RoAECqqA1NwCfXx/yZ0xZhNpaqjWnYRvwRlvYCr2I3XaMGrBCJTY5BufBW+fhpeYol4+uXIdlorWsYJxO8aA7TgNB7jICYLpT+J0opZLVuNw3gmlOs74Tq6hPxoyeINZmN8DQCaI8BTrIgAhFNoizFvZnEIE4Q+MRcz4tNQBYgfuIt1/taIBGQLepMuWky2N+L6EIEexN/GSkmTnOjELf82sFOCmJ2sNEA5EPAkPon1CFe0V7iuYq18AMPTQJTSiU9CZvdgPY5jxCB+o/C9VhCEialVaEDLBNmtz1vfhrG4kQZiqPEu39qFOfMj7mAc5uGh0CErnrjLgYCF2CHoP1Ua+f8AgRx3377twAYAAAAASUVORK5CYII="></image></svg>';
    },
    function (e, t) {
      e.exports =
        '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><defs><style> .cls-1 { opacity: 0.9; } </style></defs><image class="cls-1" width="24" height="24" xlink:href="data:img/png;base64,iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAABb0lEQVRIie3WQUsVURjG8d8cL9yrWKvbUvsGQuVH0LZtArfJVdxkIFRCC8VNmxY3qE30CSIIImiTK5daLVoLRUQb5YDoIpVrLs5cHOFeLZjBjQ8cmDPnnf8zc+ac9z1ZjFGuW5jHJDIneoqXeus+nhT6f/EJL/AFavnAFNr59Tr+FB760QcO37FW6DdwO28LeJPFGG/iPbbxCKtnAP9FE3iGa7gT8AADWCwBLmc8RsB8FmPcxC5ulAAv6iuuBmne9kuGwwEaQfqUegUGdYRQAfiUaph1elmWpYcYzAobrRJVPkWXBhdvUMOSlCra58T+rxZwJYsx/pYy6VjJBt/QDFKRqCIX7ZP+QYZOBQYddAK2MKTchFfHILYDPqCJVokGLamifcxijKN4ixE8x2vsFYI7OOoDClI17GoYM9IK+oW73WQ3Lp0ErveArOBVH4M5LPe4/1M6oWx0N9pnTOMddnBYaP3eXj5WjN3JGfewAceofFf/DV7fOQAAAABJRU5ErkJggg=="></image></svg>';
    },
    function (e, t) {
      e.exports =
        '<svg t="1619607363614" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="691" id="mx_n_1619607363631" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><style type="text/css"></style></defs><path d="M766.2 920.6H257.7c-85.3 0-154.7-69.4-154.7-154.7V299.2c0-85.3 69.4-154.7 154.7-154.7h509.4c41.4 0 80.3 16.1 109.5 45.4s45.3 68.2 45.2 109.6l-1 466.7c-0.1 85.2-69.5 154.4-154.6 154.4zM257.7 194.5c-57.7 0-104.7 47-104.7 104.7v466.7c0 57.7 47 104.7 104.7 104.7h508.5c57.6 0 104.6-46.9 104.7-104.5l1-466.7c0.1-28-10.8-54.4-30.6-74.2-19.8-19.8-46.1-30.7-74.1-30.7H257.7z" p-id="692"></path><path d="M766.2 446.5c-13.8 0-25-11.2-25-25v-81.4c0-32.6-26.5-59.2-59.2-59.2h-88.5c-13.8 0-25-11.2-25-25s11.2-25 25-25H682c60.2 0 109.2 49 109.2 109.2v81.4c0 13.8-11.1 25-25 25zM424.9 792.8h-0.3l-85.6-0.9c-28.5-0.3-55.3-11.5-75.4-31.7-20.1-20.1-31.4-46.9-31.7-75.4l-1-90.7c-0.1-13.8 10.9-25.1 24.7-25.3 13.8-0.2 25.1 10.9 25.3 24.7l1 90.7c0.3 31.4 26.2 57.3 57.6 57.6l85.6 0.9c13.8 0.1 24.9 11.4 24.7 25.3 0 13.8-11.2 24.8-24.9 24.8z" p-id="693"></path></svg>';
    },
    function (e, t) {
      e.exports =
        '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 32 32"><path d="M16 23c-3.309 0-6-2.691-6-6s2.691-6 6-6 6 2.691 6 6-2.691 6-6 6zM16 13c-2.206 0-4 1.794-4 4s1.794 4 4 4c2.206 0 4-1.794 4-4s-1.794-4-4-4zM27 28h-22c-1.654 0-3-1.346-3-3v-16c0-1.654 1.346-3 3-3h3c0.552 0 1 0.448 1 1s-0.448 1-1 1h-3c-0.551 0-1 0.449-1 1v16c0 0.552 0.449 1 1 1h22c0.552 0 1-0.448 1-1v-16c0-0.551-0.448-1-1-1h-11c-0.552 0-1-0.448-1-1s0.448-1 1-1h11c1.654 0 3 1.346 3 3v16c0 1.654-1.346 3-3 3zM24 10.5c0 0.828 0.672 1.5 1.5 1.5s1.5-0.672 1.5-1.5c0-0.828-0.672-1.5-1.5-1.5s-1.5 0.672-1.5 1.5zM15 4c0 0.552-0.448 1-1 1h-4c-0.552 0-1-0.448-1-1v0c0-0.552 0.448-1 1-1h4c0.552 0 1 0.448 1 1v0z"></path></svg>';
    },
    function (e, t) {
      e.exports =
        '<svg t="1615273007402" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1165" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><style type="text/css"></style></defs><path d="M512 0a512 512 0 1 0 512 512 511.926857 511.926857 0 0 0-512-512z m216.649143 529.334857L444.708571 757.833143a22.162286 22.162286 0 0 1-35.986285-17.261714V283.574857c0-18.578286 21.504-28.964571 35.986285-17.261714l283.940572 228.571428a22.016 22.016 0 0 1 0 34.523429z" p-id="1166"></path></svg>';
    },
    function (e, t) {
      e.exports =
        '<svg t="1615273011296" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1310" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><style type="text/css"></style></defs><path d="M512 0a512 512 0 0 1 512 512 512 512 0 1 1-512-512z m-64 320h-128v384h128v-384z m256 0h-128v384h128v-384z" p-id="1311"></path></svg>';
    },
    function (e, t) {
      e.exports =
        '<svg viewBox="0 0 23 28" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="next-play-svg" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><path d="M9.9819739,7.63528155 L19.970371,18.6569612 C20.7121109,19.4754327 20.6499076,20.740234 19.831436,21.4819739 C19.4635674,21.8153548 18.9848547,22 18.4883971,22 L-1.48839714,22 C-2.59296664,22 -3.48839714,21.1045695 -3.48839714,20 C-3.48839714,19.5035424 -3.30375196,19.0248298 -2.97037104,18.6569612 L7.0180261,7.63528155 C7.75976597,6.81680996 9.02456726,6.75460662 9.84303885,7.49634649 C9.89159881,7.54035396 9.93796644,7.58672159 9.9819739,7.63528155 Z" fill="#D8D8D8" transform="translate(8.500000, 14.000000) rotate(90.000000) translate(-8.500000, -14.000000) "></path><rect fill="#D8D8D8" x="18" y="2" width="4" height="24" rx="2"></rect></g></svg>';
    },
    function (e, t) {
      e.exports =
        '<svg viewBox="0 0 22 22" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="skip-ff-svg" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><path d="M1.5,11 C1.5,16.2467051 5.75329488,20.5 11,20.5 C16.2467051,20.5 20.5,16.2467051 20.5,11 C20.5,5.75329488 16.2467051,1.5 11,1.5 C8.3291082,1.5 5.91565158,2.60221108 4.18967243,4.37659095 C4.88044064,5.02888307 5.45272872,5.56929446 5.90653667,5.99782511 C6.00128065,6.08729181 6.09086041,6.17188194 6.17527596,6.2515955" stroke="#D8D8D8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" transform="translate(11.000000, 11.000000) scale(-1, 1) translate(-11.000000, -11.000000) "></path><text id="10" font-family="SourceHanSansCN-Medium, Source Han Sans CN" font-size="11" font-weight="400" letter-spacing="-0.6875" fill="#D8D8D8"><tspan x="5" y="15">10</tspan></text></g></svg>';
    },
    function (e, t) {
      e.exports =
        '<svg viewBox="0 0 22 22" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="skip-rew-svg" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><path d="M1.5,11 C1.5,16.2467051 5.75329488,20.5 11,20.5 C16.2467051,20.5 20.5,16.2467051 20.5,11 C20.5,5.75329488 16.2467051,1.5 11,1.5 C8.3291082,1.5 5.91565158,2.60221108 4.18967243,4.37659095 C5.19650944,5.32734671 5.9516372,6.04041352 6.45505571,6.5157914" stroke="#D8D8D8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><text id="10" font-family="SourceHanSansCN-Medium, Source Han Sans CN" font-size="11" font-weight="400" letter-spacing="-0.6875" fill="#D8D8D8"><tspan x="6" y="15">10</tspan></text></g></svg>';
    },
    function (e, t) {
      e.exports =
        '<svg viewBox="0 0 26 26" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="play-thumb-svg" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><circle fill-opacity="0.3" fill="#FF5593" cx="13" cy="13" r="13"></circle><circle stroke="#FF5593" stroke-width="4" fill="#FFFFFF" cx="13" cy="13" r="8"></circle></g></svg>';
    },
    function (e, t, r) {
      var i = {
        "./ar-AE.ts": 29,
        "./en-US.ts": 30,
        "./es-ES.ts": 31,
        "./id-ID.ts": 32,
        "./index.ts": 6,
        "./th-TH.ts": 33,
        "./vi-VN.ts": 34,
        "./zh-CN.ts": 35,
      };
      function a(e) {
        var t = n(e);
        return r(t);
      }
      function n(e) {
        if (!r.o(i, e)) {
          var t = new Error("Cannot find module '" + e + "'");
          throw ((t.code = "MODULE_NOT_FOUND"), t);
        }
        return i[e];
      }
      (a.keys = function () {
        return Object.keys(i);
      }),
        (a.resolve = n),
        (e.exports = a),
        (a.id = 28);
    },
    function (e, t, r) {
      "use strict";
      r.r(t),
        (t.default = {
          FF: "FF",
          REW: "REW",
          s: "s",
          "Switching to": "تبديل الى",
          "Switched to": "تبديل الى",
          Live: "Live",
          Subtitles: "الترجمة",
          NoSubtitle: "لا توجد ترجمة",
          AutoTranslate: "ترجمة الآلية",
        });
    },
    function (e, t, r) {
      "use strict";
      r.r(t),
        (t.default = {
          FF: "FF",
          REW: "REW",
          s: "s",
          "Switching to": "Switch to",
          "Switched to": "Switch to",
          Live: "Live",
          Subtitles: "Subtitles",
          NoSubtitle: "No subtitle",
          AutoTranslate: "Auto-translate",
        });
    },
    function (e, t, r) {
      "use strict";
      r.r(t),
        (t.default = {
          FF: "FF",
          REW: "REW",
          s: "s",
          "Switching to": "Cambiar a",
          "Switched to": "Cambiar a",
          Live: "Live",
          Subtitles: "Subtítulos",
          NoSubtitle: "Sin subtítulos",
          AutoTranslate: "Auto-traducción",
        });
    },
    function (e, t, r) {
      "use strict";
      r.r(t),
        (t.default = {
          FF: "FF",
          REW: "REW",
          s: "s",
          "Switching to": "Beralih ke",
          "Switched to": "Beralih ke",
          Live: "Live",
          Subtitles: "Subtitle",
          NoSubtitle: "Matikan Subtitle",
          AutoTranslate: "Auto-translate",
        });
    },
    function (e, t, r) {
      "use strict";
      r.r(t),
        (t.default = {
          FF: "FF",
          REW: "REW",
          s: "s",
          "Switching to": "เปลี่ยนเป็น",
          "Switched to": "เปลี่ยนเป็น",
          Live: "Live",
          Subtitles: "คำบรรยาย",
          NoSubtitle: "ไม่มีคำบรรยาย",
          AutoTranslate: "Auto-translate",
        });
    },
    function (e, t, r) {
      "use strict";
      r.r(t),
        (t.default = {
          FF: "FF",
          REW: "REW",
          s: "s",
          "Switching to": "Đã chuyển sang",
          "Switched to": "Đã chuyển sang",
          Live: "Live",
          Subtitles: "Phụ đề",
          NoSubtitle: "Đã tắt phụ đề",
          AutoTranslate: "Dịch tự động",
        });
    },
    function (e, t, r) {
      "use strict";
      r.r(t),
        (t.default = {
          FF: "快进",
          REW: "快退",
          s: "秒",
          "Switching to": "正在切换至",
          "Switched to": "已经切换至",
          Live: "直播",
          Subtitles: "字幕",
          NoSubtitle: "关闭字幕",
          AutoTranslate: "机翻",
        });
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(5),
        r(39),
        r(40),
        r(3),
        r(41),
        r(4),
        r(7),
        r(11),
        r(42),
        r(12),
        r(43),
        r(44),
        r(45),
        r(8),
        r(46),
        r(2),
        r(1),
        r(47),
        r(48),
        r(49),
        r(50),
        r(51),
        r(52),
        r(53),
        r(54),
        r(55),
        r(56),
        r(57),
        r(58),
        r(59),
        r(60),
        r(61),
        r(62),
        i);
    },
    function (e, t) {
      var r;
      r = (function () {
        return this;
      })();
      try {
        r = r || new Function("return this")();
      } catch (e) {
        "object" == typeof window && (r = window);
      }
      e.exports = r;
    },
    function (e, t) {},
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        (function () {
          if ("function" == typeof ArrayBuffer) {
            var e = i.lib.WordArray,
              t = e.init;
            (e.init = function (e) {
              if (
                (e instanceof ArrayBuffer && (e = new Uint8Array(e)),
                (e instanceof Int8Array ||
                  ("undefined" != typeof Uint8ClampedArray &&
                    e instanceof Uint8ClampedArray) ||
                  e instanceof Int16Array ||
                  e instanceof Uint16Array ||
                  e instanceof Int32Array ||
                  e instanceof Uint32Array ||
                  e instanceof Float32Array ||
                  e instanceof Float64Array) &&
                  (e = new Uint8Array(e.buffer, e.byteOffset, e.byteLength)),
                e instanceof Uint8Array)
              ) {
                for (var r = e.byteLength, i = [], a = 0; a < r; a++)
                  i[a >>> 2] |= e[a] << (24 - (a % 4) * 8);
                t.call(this, i, r);
              } else t.apply(this, arguments);
            }).prototype = e;
          }
        })(),
        i.lib.WordArray);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        (function () {
          var e = i,
            t = e.lib.WordArray,
            r = e.enc;
          function a(e) {
            return ((e << 8) & 4278255360) | ((e >>> 8) & 16711935);
          }
          (r.Utf16 = r.Utf16BE =
            {
              stringify: function (e) {
                for (
                  var t = e.words, r = e.sigBytes, i = [], a = 0;
                  a < r;
                  a += 2
                ) {
                  var n = (t[a >>> 2] >>> (16 - (a % 4) * 8)) & 65535;
                  i.push(String.fromCharCode(n));
                }
                return i.join("");
              },
              parse: function (e) {
                for (var r = e.length, i = [], a = 0; a < r; a++)
                  i[a >>> 1] |= e.charCodeAt(a) << (16 - (a % 2) * 16);
                return t.create(i, 2 * r);
              },
            }),
            (r.Utf16LE = {
              stringify: function (e) {
                for (
                  var t = e.words, r = e.sigBytes, i = [], n = 0;
                  n < r;
                  n += 2
                ) {
                  var o = a((t[n >>> 2] >>> (16 - (n % 4) * 8)) & 65535);
                  i.push(String.fromCharCode(o));
                }
                return i.join("");
              },
              parse: function (e) {
                for (var r = e.length, i = [], n = 0; n < r; n++)
                  i[n >>> 1] |= a(e.charCodeAt(n) << (16 - (n % 2) * 16));
                return t.create(i, 2 * r);
              },
            });
        })(),
        i.enc.Utf16);
    },
    function (e, t, r) {
      var i, a, n;
      e.exports =
        ((n = r(0)),
        (a = (i = n).lib.WordArray),
        (i.enc.Base64url = {
          stringify: function (e, t = !0) {
            var r = e.words,
              i = e.sigBytes,
              a = t ? this._safe_map : this._map;
            e.clamp();
            for (var n = [], o = 0; o < i; o += 3)
              for (
                var s =
                    (((r[o >>> 2] >>> (24 - (o % 4) * 8)) & 255) << 16) |
                    (((r[(o + 1) >>> 2] >>> (24 - ((o + 1) % 4) * 8)) & 255) <<
                      8) |
                    ((r[(o + 2) >>> 2] >>> (24 - ((o + 2) % 4) * 8)) & 255),
                  l = 0;
                l < 4 && o + 0.75 * l < i;
                l++
              )
                n.push(a.charAt((s >>> (6 * (3 - l))) & 63));
            var d = a.charAt(64);
            if (d) for (; n.length % 4; ) n.push(d);
            return n.join("");
          },
          parse: function (e, t = !0) {
            var r = e.length,
              i = t ? this._safe_map : this._map,
              n = this._reverseMap;
            if (!n) {
              n = this._reverseMap = [];
              for (var o = 0; o < i.length; o++) n[i.charCodeAt(o)] = o;
            }
            var s = i.charAt(64);
            if (s) {
              var l = e.indexOf(s);
              -1 !== l && (r = l);
            }
            return (function (e, t, r) {
              for (var i = [], n = 0, o = 0; o < t; o++)
                if (o % 4) {
                  var s = r[e.charCodeAt(o - 1)] << ((o % 4) * 2),
                    l = r[e.charCodeAt(o)] >>> (6 - (o % 4) * 2),
                    d = s | l;
                  (i[n >>> 2] |= d << (24 - (n % 4) * 8)), n++;
                }
              return a.create(i, n);
            })(e, r, n);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map:
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
        }),
        n.enc.Base64url);
    },
    function (e, t, r) {
      var i, a, n, o, s, l;
      e.exports =
        ((l = r(0)),
        r(11),
        (a = (i = l).lib.WordArray),
        (n = i.algo),
        (o = n.SHA256),
        (s = n.SHA224 =
          o.extend({
            _doReset: function () {
              this._hash = new a.init([
                3238371032, 914150663, 812702999, 4144912697, 4290775857,
                1750603025, 1694076839, 3204075428,
              ]);
            },
            _doFinalize: function () {
              var e = o._doFinalize.call(this);
              return (e.sigBytes -= 4), e;
            },
          })),
        (i.SHA224 = o._createHelper(s)),
        (i.HmacSHA224 = o._createHmacHelper(s)),
        l.SHA224);
    },
    function (e, t, r) {
      var i, a, n, o, s, l, d, u;
      e.exports =
        ((u = r(0)),
        r(5),
        r(12),
        (a = (i = u).x64),
        (n = a.Word),
        (o = a.WordArray),
        (s = i.algo),
        (l = s.SHA512),
        (d = s.SHA384 =
          l.extend({
            _doReset: function () {
              this._hash = new o.init([
                new n.init(3418070365, 3238371032),
                new n.init(1654270250, 914150663),
                new n.init(2438529370, 812702999),
                new n.init(355462360, 4144912697),
                new n.init(1731405415, 4290775857),
                new n.init(2394180231, 1750603025),
                new n.init(3675008525, 1694076839),
                new n.init(1203062813, 3204075428),
              ]);
            },
            _doFinalize: function () {
              var e = l._doFinalize.call(this);
              return (e.sigBytes -= 16), e;
            },
          })),
        (i.SHA384 = l._createHelper(d)),
        (i.HmacSHA384 = l._createHmacHelper(d)),
        u.SHA384);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(5),
        (function (e) {
          var t = i,
            r = t.lib,
            a = r.WordArray,
            n = r.Hasher,
            o = t.x64.Word,
            s = t.algo,
            l = [],
            d = [],
            u = [];
          !(function () {
            for (var e = 1, t = 0, r = 0; r < 24; r++) {
              l[e + 5 * t] = (((r + 1) * (r + 2)) / 2) % 64;
              var i = (2 * e + 3 * t) % 5;
              (e = t % 5), (t = i);
            }
            for (e = 0; e < 5; e++)
              for (t = 0; t < 5; t++)
                d[e + 5 * t] = t + ((2 * e + 3 * t) % 5) * 5;
            for (var a = 1, n = 0; n < 24; n++) {
              for (var s = 0, c = 0, h = 0; h < 7; h++) {
                if (1 & a) {
                  var f = (1 << h) - 1;
                  f < 32 ? (c ^= 1 << f) : (s ^= 1 << (f - 32));
                }
                128 & a ? (a = (a << 1) ^ 113) : (a <<= 1);
              }
              u[n] = o.create(s, c);
            }
          })();
          var c = [];
          !(function () {
            for (var e = 0; e < 25; e++) c[e] = o.create();
          })();
          var h = (s.SHA3 = n.extend({
            cfg: n.cfg.extend({
              outputLength: 512,
            }),
            _doReset: function () {
              for (var e = (this._state = []), t = 0; t < 25; t++)
                e[t] = new o.init();
              this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
            },
            _doProcessBlock: function (e, t) {
              for (
                var r = this._state, i = this.blockSize / 2, a = 0;
                a < i;
                a++
              ) {
                var n = e[t + 2 * a],
                  o = e[t + 2 * a + 1];
                (n =
                  (16711935 & ((n << 8) | (n >>> 24))) |
                  (4278255360 & ((n << 24) | (n >>> 8)))),
                  (o =
                    (16711935 & ((o << 8) | (o >>> 24))) |
                    (4278255360 & ((o << 24) | (o >>> 8)))),
                  ((R = r[a]).high ^= o),
                  (R.low ^= n);
              }
              for (var s = 0; s < 24; s++) {
                for (var h = 0; h < 5; h++) {
                  for (var f = 0, p = 0, g = 0; g < 5; g++)
                    (f ^= (R = r[h + 5 * g]).high), (p ^= R.low);
                  var v = c[h];
                  (v.high = f), (v.low = p);
                }
                for (h = 0; h < 5; h++) {
                  var y = c[(h + 4) % 5],
                    m = c[(h + 1) % 5],
                    b = m.high,
                    _ = m.low;
                  for (
                    f = y.high ^ ((b << 1) | (_ >>> 31)),
                      p = y.low ^ ((_ << 1) | (b >>> 31)),
                      g = 0;
                    g < 5;
                    g++
                  )
                    ((R = r[h + 5 * g]).high ^= f), (R.low ^= p);
                }
                for (var w = 1; w < 25; w++) {
                  var T = (R = r[w]).high,
                    E = R.low,
                    S = l[w];
                  S < 32
                    ? ((f = (T << S) | (E >>> (32 - S))),
                      (p = (E << S) | (T >>> (32 - S))))
                    : ((f = (E << (S - 32)) | (T >>> (64 - S))),
                      (p = (T << (S - 32)) | (E >>> (64 - S))));
                  var k = c[d[w]];
                  (k.high = f), (k.low = p);
                }
                var x = c[0],
                  A = r[0];
                for (x.high = A.high, x.low = A.low, h = 0; h < 5; h++)
                  for (g = 0; g < 5; g++) {
                    var R = r[(w = h + 5 * g)],
                      L = c[w],
                      D = c[((h + 1) % 5) + 5 * g],
                      C = c[((h + 2) % 5) + 5 * g];
                    (R.high = L.high ^ (~D.high & C.high)),
                      (R.low = L.low ^ (~D.low & C.low));
                  }
                R = r[0];
                var O = u[s];
                (R.high ^= O.high), (R.low ^= O.low);
              }
            },
            _doFinalize: function () {
              var t = this._data,
                r = t.words,
                i = (this._nDataBytes, 8 * t.sigBytes),
                n = 32 * this.blockSize;
              (r[i >>> 5] |= 1 << (24 - (i % 32))),
                (r[((e.ceil((i + 1) / n) * n) >>> 5) - 1] |= 128),
                (t.sigBytes = 4 * r.length),
                this._process();
              for (
                var o = this._state,
                  s = this.cfg.outputLength / 8,
                  l = s / 8,
                  d = [],
                  u = 0;
                u < l;
                u++
              ) {
                var c = o[u],
                  h = c.high,
                  f = c.low;
                (h =
                  (16711935 & ((h << 8) | (h >>> 24))) |
                  (4278255360 & ((h << 24) | (h >>> 8)))),
                  (f =
                    (16711935 & ((f << 8) | (f >>> 24))) |
                    (4278255360 & ((f << 24) | (f >>> 8)))),
                  d.push(f),
                  d.push(h);
              }
              return new a.init(d, s);
            },
            clone: function () {
              for (
                var e = n.clone.call(this),
                  t = (e._state = this._state.slice(0)),
                  r = 0;
                r < 25;
                r++
              )
                t[r] = t[r].clone();
              return e;
            },
          }));
          (t.SHA3 = n._createHelper(h)), (t.HmacSHA3 = n._createHmacHelper(h));
        })(Math),
        i.SHA3);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        /** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
        (function (e) {
          var t = i,
            r = t.lib,
            a = r.WordArray,
            n = r.Hasher,
            o = t.algo,
            s = a.create([
              0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1,
              10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8,
              1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7,
              15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15,
              13,
            ]),
            l = a.create([
              5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7,
              0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9,
              11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2,
              13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3,
              9, 11,
            ]),
            d = a.create([
              11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8,
              13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14,
              9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9,
              8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12,
              13, 14, 11, 8, 5, 6,
            ]),
            u = a.create([
              8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15,
              7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6,
              6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14,
              6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5,
              15, 13, 11, 11,
            ]),
            c = a.create([0, 1518500249, 1859775393, 2400959708, 2840853838]),
            h = a.create([1352829926, 1548603684, 1836072691, 2053994217, 0]),
            f = (o.RIPEMD160 = n.extend({
              _doReset: function () {
                this._hash = a.create([
                  1732584193, 4023233417, 2562383102, 271733878, 3285377520,
                ]);
              },
              _doProcessBlock: function (e, t) {
                for (var r = 0; r < 16; r++) {
                  var i = t + r,
                    a = e[i];
                  e[i] =
                    (16711935 & ((a << 8) | (a >>> 24))) |
                    (4278255360 & ((a << 24) | (a >>> 8)));
                }
                var n,
                  o,
                  f,
                  _,
                  w,
                  T,
                  E,
                  S,
                  k,
                  x,
                  A,
                  R = this._hash.words,
                  L = c.words,
                  D = h.words,
                  C = s.words,
                  O = l.words,
                  I = d.words,
                  P = u.words;
                for (
                  T = n = R[0],
                    E = o = R[1],
                    S = f = R[2],
                    k = _ = R[3],
                    x = w = R[4],
                    r = 0;
                  r < 80;
                  r += 1
                )
                  (A = (n + e[t + C[r]]) | 0),
                    (A +=
                      r < 16
                        ? p(o, f, _) + L[0]
                        : r < 32
                        ? g(o, f, _) + L[1]
                        : r < 48
                        ? v(o, f, _) + L[2]
                        : r < 64
                        ? y(o, f, _) + L[3]
                        : m(o, f, _) + L[4]),
                    (A = ((A = b((A |= 0), I[r])) + w) | 0),
                    (n = w),
                    (w = _),
                    (_ = b(f, 10)),
                    (f = o),
                    (o = A),
                    (A = (T + e[t + O[r]]) | 0),
                    (A +=
                      r < 16
                        ? m(E, S, k) + D[0]
                        : r < 32
                        ? y(E, S, k) + D[1]
                        : r < 48
                        ? v(E, S, k) + D[2]
                        : r < 64
                        ? g(E, S, k) + D[3]
                        : p(E, S, k) + D[4]),
                    (A = ((A = b((A |= 0), P[r])) + x) | 0),
                    (T = x),
                    (x = k),
                    (k = b(S, 10)),
                    (S = E),
                    (E = A);
                (A = (R[1] + f + k) | 0),
                  (R[1] = (R[2] + _ + x) | 0),
                  (R[2] = (R[3] + w + T) | 0),
                  (R[3] = (R[4] + n + E) | 0),
                  (R[4] = (R[0] + o + S) | 0),
                  (R[0] = A);
              },
              _doFinalize: function () {
                var e = this._data,
                  t = e.words,
                  r = 8 * this._nDataBytes,
                  i = 8 * e.sigBytes;
                (t[i >>> 5] |= 128 << (24 - (i % 32))),
                  (t[14 + (((i + 64) >>> 9) << 4)] =
                    (16711935 & ((r << 8) | (r >>> 24))) |
                    (4278255360 & ((r << 24) | (r >>> 8)))),
                  (e.sigBytes = 4 * (t.length + 1)),
                  this._process();
                for (var a = this._hash, n = a.words, o = 0; o < 5; o++) {
                  var s = n[o];
                  n[o] =
                    (16711935 & ((s << 8) | (s >>> 24))) |
                    (4278255360 & ((s << 24) | (s >>> 8)));
                }
                return a;
              },
              clone: function () {
                var e = n.clone.call(this);
                return (e._hash = this._hash.clone()), e;
              },
            }));
          function p(e, t, r) {
            return e ^ t ^ r;
          }
          function g(e, t, r) {
            return (e & t) | (~e & r);
          }
          function v(e, t, r) {
            return (e | ~t) ^ r;
          }
          function y(e, t, r) {
            return (e & r) | (t & ~r);
          }
          function m(e, t, r) {
            return e ^ (t | ~r);
          }
          function b(e, t) {
            return (e << t) | (e >>> (32 - t));
          }
          (t.RIPEMD160 = n._createHelper(f)),
            (t.HmacRIPEMD160 = n._createHmacHelper(f));
        })(Math),
        i.RIPEMD160);
    },
    function (e, t, r) {
      var i, a, n, o, s, l, d, u, c;
      e.exports =
        ((c = r(0)),
        r(7),
        r(8),
        (a = (i = c).lib),
        (n = a.Base),
        (o = a.WordArray),
        (s = i.algo),
        (l = s.SHA1),
        (d = s.HMAC),
        (u = s.PBKDF2 =
          n.extend({
            cfg: n.extend({
              keySize: 4,
              hasher: l,
              iterations: 1,
            }),
            init: function (e) {
              this.cfg = this.cfg.extend(e);
            },
            compute: function (e, t) {
              for (
                var r = this.cfg,
                  i = d.create(r.hasher, e),
                  a = o.create(),
                  n = o.create([1]),
                  s = a.words,
                  l = n.words,
                  u = r.keySize,
                  c = r.iterations;
                s.length < u;

              ) {
                var h = i.update(t).finalize(n);
                i.reset();
                for (var f = h.words, p = f.length, g = h, v = 1; v < c; v++) {
                  (g = i.finalize(g)), i.reset();
                  for (var y = g.words, m = 0; m < p; m++) f[m] ^= y[m];
                }
                a.concat(h), l[0]++;
              }
              return (a.sigBytes = 4 * u), a;
            },
          })),
        (i.PBKDF2 = function (e, t, r) {
          return u.create(r).compute(e, t);
        }),
        c.PBKDF2);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(1),
        (i.mode.CFB = (function () {
          var e = i.lib.BlockCipherMode.extend();
          function t(e, t, r, i) {
            var a,
              n = this._iv;
            n ? ((a = n.slice(0)), (this._iv = void 0)) : (a = this._prevBlock),
              i.encryptBlock(a, 0);
            for (var o = 0; o < r; o++) e[t + o] ^= a[o];
          }
          return (
            (e.Encryptor = e.extend({
              processBlock: function (e, r) {
                var i = this._cipher,
                  a = i.blockSize;
                t.call(this, e, r, a, i), (this._prevBlock = e.slice(r, r + a));
              },
            })),
            (e.Decryptor = e.extend({
              processBlock: function (e, r) {
                var i = this._cipher,
                  a = i.blockSize,
                  n = e.slice(r, r + a);
                t.call(this, e, r, a, i), (this._prevBlock = n);
              },
            })),
            e
          );
        })()),
        i.mode.CFB);
    },
    function (e, t, r) {
      var i, a, n;
      e.exports =
        ((n = r(0)),
        r(1),
        (n.mode.CTR =
          ((i = n.lib.BlockCipherMode.extend()),
          (a = i.Encryptor =
            i.extend({
              processBlock: function (e, t) {
                var r = this._cipher,
                  i = r.blockSize,
                  a = this._iv,
                  n = this._counter;
                a && ((n = this._counter = a.slice(0)), (this._iv = void 0));
                var o = n.slice(0);
                r.encryptBlock(o, 0), (n[i - 1] = (n[i - 1] + 1) | 0);
                for (var s = 0; s < i; s++) e[t + s] ^= o[s];
              },
            })),
          (i.Decryptor = a),
          i)),
        n.mode.CTR);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(1),
        /** @preserve
         * Counter block mode compatible with  Dr Brian Gladman fileenc.c
         * derived from CryptoJS.mode.CTR
         * Jan Hruby jhruby.web@gmail.com
         */
        (i.mode.CTRGladman = (function () {
          var e = i.lib.BlockCipherMode.extend();
          function t(e) {
            if (255 == ((e >> 24) & 255)) {
              var t = (e >> 16) & 255,
                r = (e >> 8) & 255,
                i = 255 & e;
              255 === t
                ? ((t = 0),
                  255 === r ? ((r = 0), 255 === i ? (i = 0) : ++i) : ++r)
                : ++t,
                (e = 0),
                (e += t << 16),
                (e += r << 8),
                (e += i);
            } else e += 1 << 24;
            return e;
          }
          var r = (e.Encryptor = e.extend({
            processBlock: function (e, r) {
              var i = this._cipher,
                a = i.blockSize,
                n = this._iv,
                o = this._counter;
              n && ((o = this._counter = n.slice(0)), (this._iv = void 0)),
                (function (e) {
                  0 === (e[0] = t(e[0])) && (e[1] = t(e[1]));
                })(o);
              var s = o.slice(0);
              i.encryptBlock(s, 0);
              for (var l = 0; l < a; l++) e[r + l] ^= s[l];
            },
          }));
          return (e.Decryptor = r), e;
        })()),
        i.mode.CTRGladman);
    },
    function (e, t, r) {
      var i, a, n;
      e.exports =
        ((n = r(0)),
        r(1),
        (n.mode.OFB =
          ((i = n.lib.BlockCipherMode.extend()),
          (a = i.Encryptor =
            i.extend({
              processBlock: function (e, t) {
                var r = this._cipher,
                  i = r.blockSize,
                  a = this._iv,
                  n = this._keystream;
                a && ((n = this._keystream = a.slice(0)), (this._iv = void 0)),
                  r.encryptBlock(n, 0);
                for (var o = 0; o < i; o++) e[t + o] ^= n[o];
              },
            })),
          (i.Decryptor = a),
          i)),
        n.mode.OFB);
    },
    function (e, t, r) {
      var i, a;
      e.exports =
        ((a = r(0)),
        r(1),
        (a.mode.ECB =
          (((i = a.lib.BlockCipherMode.extend()).Encryptor = i.extend({
            processBlock: function (e, t) {
              this._cipher.encryptBlock(e, t);
            },
          })),
          (i.Decryptor = i.extend({
            processBlock: function (e, t) {
              this._cipher.decryptBlock(e, t);
            },
          })),
          i)),
        a.mode.ECB);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(1),
        (i.pad.AnsiX923 = {
          pad: function (e, t) {
            var r = e.sigBytes,
              i = 4 * t,
              a = i - (r % i),
              n = r + a - 1;
            e.clamp(),
              (e.words[n >>> 2] |= a << (24 - (n % 4) * 8)),
              (e.sigBytes += a);
          },
          unpad: function (e) {
            var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
            e.sigBytes -= t;
          },
        }),
        i.pad.Ansix923);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(1),
        (i.pad.Iso10126 = {
          pad: function (e, t) {
            var r = 4 * t,
              a = r - (e.sigBytes % r);
            e.concat(i.lib.WordArray.random(a - 1)).concat(
              i.lib.WordArray.create([a << 24], 1)
            );
          },
          unpad: function (e) {
            var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
            e.sigBytes -= t;
          },
        }),
        i.pad.Iso10126);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(1),
        (i.pad.Iso97971 = {
          pad: function (e, t) {
            e.concat(i.lib.WordArray.create([2147483648], 1)),
              i.pad.ZeroPadding.pad(e, t);
          },
          unpad: function (e) {
            i.pad.ZeroPadding.unpad(e), e.sigBytes--;
          },
        }),
        i.pad.Iso97971);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(1),
        (i.pad.ZeroPadding = {
          pad: function (e, t) {
            var r = 4 * t;
            e.clamp(), (e.sigBytes += r - (e.sigBytes % r || r));
          },
          unpad: function (e) {
            var t = e.words,
              r = e.sigBytes - 1;
            for (r = e.sigBytes - 1; r >= 0; r--)
              if ((t[r >>> 2] >>> (24 - (r % 4) * 8)) & 255) {
                e.sigBytes = r + 1;
                break;
              }
          },
        }),
        i.pad.ZeroPadding);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(1),
        (i.pad.NoPadding = {
          pad: function () {},
          unpad: function () {},
        }),
        i.pad.NoPadding);
    },
    function (e, t, r) {
      var i, a, n, o;
      e.exports =
        ((o = r(0)),
        r(1),
        (a = (i = o).lib.CipherParams),
        (n = i.enc.Hex),
        (i.format.Hex = {
          stringify: function (e) {
            return e.ciphertext.toString(n);
          },
          parse: function (e) {
            var t = n.parse(e);
            return a.create({
              ciphertext: t,
            });
          },
        }),
        o.format.Hex);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(3),
        r(4),
        r(2),
        r(1),
        (function () {
          var e = i,
            t = e.lib.BlockCipher,
            r = e.algo,
            a = [],
            n = [],
            o = [],
            s = [],
            l = [],
            d = [],
            u = [],
            c = [],
            h = [],
            f = [];
          !(function () {
            for (var e = [], t = 0; t < 256; t++)
              e[t] = t < 128 ? t << 1 : (t << 1) ^ 283;
            var r = 0,
              i = 0;
            for (t = 0; t < 256; t++) {
              var p = i ^ (i << 1) ^ (i << 2) ^ (i << 3) ^ (i << 4);
              (p = (p >>> 8) ^ (255 & p) ^ 99), (a[r] = p), (n[p] = r);
              var g = e[r],
                v = e[g],
                y = e[v],
                m = (257 * e[p]) ^ (16843008 * p);
              (o[r] = (m << 24) | (m >>> 8)),
                (s[r] = (m << 16) | (m >>> 16)),
                (l[r] = (m << 8) | (m >>> 24)),
                (d[r] = m),
                (m = (16843009 * y) ^ (65537 * v) ^ (257 * g) ^ (16843008 * r)),
                (u[p] = (m << 24) | (m >>> 8)),
                (c[p] = (m << 16) | (m >>> 16)),
                (h[p] = (m << 8) | (m >>> 24)),
                (f[p] = m),
                r ? ((r = g ^ e[e[e[y ^ g]]]), (i ^= e[e[i]])) : (r = i = 1);
            }
          })();
          var p = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
            g = (r.AES = t.extend({
              _doReset: function () {
                if (!this._nRounds || this._keyPriorReset !== this._key) {
                  for (
                    var e = (this._keyPriorReset = this._key),
                      t = e.words,
                      r = e.sigBytes / 4,
                      i = 4 * ((this._nRounds = r + 6) + 1),
                      n = (this._keySchedule = []),
                      o = 0;
                    o < i;
                    o++
                  )
                    o < r
                      ? (n[o] = t[o])
                      : ((d = n[o - 1]),
                        o % r
                          ? r > 6 &&
                            o % r == 4 &&
                            (d =
                              (a[d >>> 24] << 24) |
                              (a[(d >>> 16) & 255] << 16) |
                              (a[(d >>> 8) & 255] << 8) |
                              a[255 & d])
                          : ((d =
                              (a[(d = (d << 8) | (d >>> 24)) >>> 24] << 24) |
                              (a[(d >>> 16) & 255] << 16) |
                              (a[(d >>> 8) & 255] << 8) |
                              a[255 & d]),
                            (d ^= p[(o / r) | 0] << 24)),
                        (n[o] = n[o - r] ^ d));
                  for (var s = (this._invKeySchedule = []), l = 0; l < i; l++) {
                    if (((o = i - l), l % 4)) var d = n[o];
                    else d = n[o - 4];
                    s[l] =
                      l < 4 || o <= 4
                        ? d
                        : u[a[d >>> 24]] ^
                          c[a[(d >>> 16) & 255]] ^
                          h[a[(d >>> 8) & 255]] ^
                          f[a[255 & d]];
                  }
                }
              },
              encryptBlock: function (e, t) {
                this._doCryptBlock(e, t, this._keySchedule, o, s, l, d, a);
              },
              decryptBlock: function (e, t) {
                var r = e[t + 1];
                (e[t + 1] = e[t + 3]),
                  (e[t + 3] = r),
                  this._doCryptBlock(e, t, this._invKeySchedule, u, c, h, f, n),
                  (r = e[t + 1]),
                  (e[t + 1] = e[t + 3]),
                  (e[t + 3] = r);
              },
              _doCryptBlock: function (e, t, r, i, a, n, o, s) {
                for (
                  var l = this._nRounds,
                    d = e[t] ^ r[0],
                    u = e[t + 1] ^ r[1],
                    c = e[t + 2] ^ r[2],
                    h = e[t + 3] ^ r[3],
                    f = 4,
                    p = 1;
                  p < l;
                  p++
                ) {
                  var g =
                      i[d >>> 24] ^
                      a[(u >>> 16) & 255] ^
                      n[(c >>> 8) & 255] ^
                      o[255 & h] ^
                      r[f++],
                    v =
                      i[u >>> 24] ^
                      a[(c >>> 16) & 255] ^
                      n[(h >>> 8) & 255] ^
                      o[255 & d] ^
                      r[f++],
                    y =
                      i[c >>> 24] ^
                      a[(h >>> 16) & 255] ^
                      n[(d >>> 8) & 255] ^
                      o[255 & u] ^
                      r[f++],
                    m =
                      i[h >>> 24] ^
                      a[(d >>> 16) & 255] ^
                      n[(u >>> 8) & 255] ^
                      o[255 & c] ^
                      r[f++];
                  (d = g), (u = v), (c = y), (h = m);
                }
                (g =
                  ((s[d >>> 24] << 24) |
                    (s[(u >>> 16) & 255] << 16) |
                    (s[(c >>> 8) & 255] << 8) |
                    s[255 & h]) ^
                  r[f++]),
                  (v =
                    ((s[u >>> 24] << 24) |
                      (s[(c >>> 16) & 255] << 16) |
                      (s[(h >>> 8) & 255] << 8) |
                      s[255 & d]) ^
                    r[f++]),
                  (y =
                    ((s[c >>> 24] << 24) |
                      (s[(h >>> 16) & 255] << 16) |
                      (s[(d >>> 8) & 255] << 8) |
                      s[255 & u]) ^
                    r[f++]),
                  (m =
                    ((s[h >>> 24] << 24) |
                      (s[(d >>> 16) & 255] << 16) |
                      (s[(u >>> 8) & 255] << 8) |
                      s[255 & c]) ^
                    r[f++]),
                  (e[t] = g),
                  (e[t + 1] = v),
                  (e[t + 2] = y),
                  (e[t + 3] = m);
              },
              keySize: 8,
            }));
          e.AES = t._createHelper(g);
        })(),
        i.AES);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(3),
        r(4),
        r(2),
        r(1),
        (function () {
          var e = i,
            t = e.lib,
            r = t.WordArray,
            a = t.BlockCipher,
            n = e.algo,
            o = [
              57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59,
              51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23,
              15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13,
              5, 28, 20, 12, 4,
            ],
            s = [
              14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8,
              16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33,
              48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32,
            ],
            l = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28],
            d = [
              {
                0: 8421888,
                268435456: 32768,
                536870912: 8421378,
                805306368: 2,
                1073741824: 512,
                1342177280: 8421890,
                1610612736: 8389122,
                1879048192: 8388608,
                2147483648: 514,
                2415919104: 8389120,
                2684354560: 33280,
                2952790016: 8421376,
                3221225472: 32770,
                3489660928: 8388610,
                3758096384: 0,
                4026531840: 33282,
                134217728: 0,
                402653184: 8421890,
                671088640: 33282,
                939524096: 32768,
                1207959552: 8421888,
                1476395008: 512,
                1744830464: 8421378,
                2013265920: 2,
                2281701376: 8389120,
                2550136832: 33280,
                2818572288: 8421376,
                3087007744: 8389122,
                3355443200: 8388610,
                3623878656: 32770,
                3892314112: 514,
                4160749568: 8388608,
                1: 32768,
                268435457: 2,
                536870913: 8421888,
                805306369: 8388608,
                1073741825: 8421378,
                1342177281: 33280,
                1610612737: 512,
                1879048193: 8389122,
                2147483649: 8421890,
                2415919105: 8421376,
                2684354561: 8388610,
                2952790017: 33282,
                3221225473: 514,
                3489660929: 8389120,
                3758096385: 32770,
                4026531841: 0,
                134217729: 8421890,
                402653185: 8421376,
                671088641: 8388608,
                939524097: 512,
                1207959553: 32768,
                1476395009: 8388610,
                1744830465: 2,
                2013265921: 33282,
                2281701377: 32770,
                2550136833: 8389122,
                2818572289: 514,
                3087007745: 8421888,
                3355443201: 8389120,
                3623878657: 0,
                3892314113: 33280,
                4160749569: 8421378,
              },
              {
                0: 1074282512,
                16777216: 16384,
                33554432: 524288,
                50331648: 1074266128,
                67108864: 1073741840,
                83886080: 1074282496,
                100663296: 1073758208,
                117440512: 16,
                134217728: 540672,
                150994944: 1073758224,
                167772160: 1073741824,
                184549376: 540688,
                201326592: 524304,
                218103808: 0,
                234881024: 16400,
                251658240: 1074266112,
                8388608: 1073758208,
                25165824: 540688,
                41943040: 16,
                58720256: 1073758224,
                75497472: 1074282512,
                92274688: 1073741824,
                109051904: 524288,
                125829120: 1074266128,
                142606336: 524304,
                159383552: 0,
                176160768: 16384,
                192937984: 1074266112,
                209715200: 1073741840,
                226492416: 540672,
                243269632: 1074282496,
                260046848: 16400,
                268435456: 0,
                285212672: 1074266128,
                301989888: 1073758224,
                318767104: 1074282496,
                335544320: 1074266112,
                352321536: 16,
                369098752: 540688,
                385875968: 16384,
                402653184: 16400,
                419430400: 524288,
                436207616: 524304,
                452984832: 1073741840,
                469762048: 540672,
                486539264: 1073758208,
                503316480: 1073741824,
                520093696: 1074282512,
                276824064: 540688,
                293601280: 524288,
                310378496: 1074266112,
                327155712: 16384,
                343932928: 1073758208,
                360710144: 1074282512,
                377487360: 16,
                394264576: 1073741824,
                411041792: 1074282496,
                427819008: 1073741840,
                444596224: 1073758224,
                461373440: 524304,
                478150656: 0,
                494927872: 16400,
                511705088: 1074266128,
                528482304: 540672,
              },
              {
                0: 260,
                1048576: 0,
                2097152: 67109120,
                3145728: 65796,
                4194304: 65540,
                5242880: 67108868,
                6291456: 67174660,
                7340032: 67174400,
                8388608: 67108864,
                9437184: 67174656,
                10485760: 65792,
                11534336: 67174404,
                12582912: 67109124,
                13631488: 65536,
                14680064: 4,
                15728640: 256,
                524288: 67174656,
                1572864: 67174404,
                2621440: 0,
                3670016: 67109120,
                4718592: 67108868,
                5767168: 65536,
                6815744: 65540,
                7864320: 260,
                8912896: 4,
                9961472: 256,
                11010048: 67174400,
                12058624: 65796,
                13107200: 65792,
                14155776: 67109124,
                15204352: 67174660,
                16252928: 67108864,
                16777216: 67174656,
                17825792: 65540,
                18874368: 65536,
                19922944: 67109120,
                20971520: 256,
                22020096: 67174660,
                23068672: 67108868,
                24117248: 0,
                25165824: 67109124,
                26214400: 67108864,
                27262976: 4,
                28311552: 65792,
                29360128: 67174400,
                30408704: 260,
                31457280: 65796,
                32505856: 67174404,
                17301504: 67108864,
                18350080: 260,
                19398656: 67174656,
                20447232: 0,
                21495808: 65540,
                22544384: 67109120,
                23592960: 256,
                24641536: 67174404,
                25690112: 65536,
                26738688: 67174660,
                27787264: 65796,
                28835840: 67108868,
                29884416: 67109124,
                30932992: 67174400,
                31981568: 4,
                33030144: 65792,
              },
              {
                0: 2151682048,
                65536: 2147487808,
                131072: 4198464,
                196608: 2151677952,
                262144: 0,
                327680: 4198400,
                393216: 2147483712,
                458752: 4194368,
                524288: 2147483648,
                589824: 4194304,
                655360: 64,
                720896: 2147487744,
                786432: 2151678016,
                851968: 4160,
                917504: 4096,
                983040: 2151682112,
                32768: 2147487808,
                98304: 64,
                163840: 2151678016,
                229376: 2147487744,
                294912: 4198400,
                360448: 2151682112,
                425984: 0,
                491520: 2151677952,
                557056: 4096,
                622592: 2151682048,
                688128: 4194304,
                753664: 4160,
                819200: 2147483648,
                884736: 4194368,
                950272: 4198464,
                1015808: 2147483712,
                1048576: 4194368,
                1114112: 4198400,
                1179648: 2147483712,
                1245184: 0,
                1310720: 4160,
                1376256: 2151678016,
                1441792: 2151682048,
                1507328: 2147487808,
                1572864: 2151682112,
                1638400: 2147483648,
                1703936: 2151677952,
                1769472: 4198464,
                1835008: 2147487744,
                1900544: 4194304,
                1966080: 64,
                2031616: 4096,
                1081344: 2151677952,
                1146880: 2151682112,
                1212416: 0,
                1277952: 4198400,
                1343488: 4194368,
                1409024: 2147483648,
                1474560: 2147487808,
                1540096: 64,
                1605632: 2147483712,
                1671168: 4096,
                1736704: 2147487744,
                1802240: 2151678016,
                1867776: 4160,
                1933312: 2151682048,
                1998848: 4194304,
                2064384: 4198464,
              },
              {
                0: 128,
                4096: 17039360,
                8192: 262144,
                12288: 536870912,
                16384: 537133184,
                20480: 16777344,
                24576: 553648256,
                28672: 262272,
                32768: 16777216,
                36864: 537133056,
                40960: 536871040,
                45056: 553910400,
                49152: 553910272,
                53248: 0,
                57344: 17039488,
                61440: 553648128,
                2048: 17039488,
                6144: 553648256,
                10240: 128,
                14336: 17039360,
                18432: 262144,
                22528: 537133184,
                26624: 553910272,
                30720: 536870912,
                34816: 537133056,
                38912: 0,
                43008: 553910400,
                47104: 16777344,
                51200: 536871040,
                55296: 553648128,
                59392: 16777216,
                63488: 262272,
                65536: 262144,
                69632: 128,
                73728: 536870912,
                77824: 553648256,
                81920: 16777344,
                86016: 553910272,
                90112: 537133184,
                94208: 16777216,
                98304: 553910400,
                102400: 553648128,
                106496: 17039360,
                110592: 537133056,
                114688: 262272,
                118784: 536871040,
                122880: 0,
                126976: 17039488,
                67584: 553648256,
                71680: 16777216,
                75776: 17039360,
                79872: 537133184,
                83968: 536870912,
                88064: 17039488,
                92160: 128,
                96256: 553910272,
                100352: 262272,
                104448: 553910400,
                108544: 0,
                112640: 553648128,
                116736: 16777344,
                120832: 262144,
                124928: 537133056,
                129024: 536871040,
              },
              {
                0: 268435464,
                256: 8192,
                512: 270532608,
                768: 270540808,
                1024: 268443648,
                1280: 2097152,
                1536: 2097160,
                1792: 268435456,
                2048: 0,
                2304: 268443656,
                2560: 2105344,
                2816: 8,
                3072: 270532616,
                3328: 2105352,
                3584: 8200,
                3840: 270540800,
                128: 270532608,
                384: 270540808,
                640: 8,
                896: 2097152,
                1152: 2105352,
                1408: 268435464,
                1664: 268443648,
                1920: 8200,
                2176: 2097160,
                2432: 8192,
                2688: 268443656,
                2944: 270532616,
                3200: 0,
                3456: 270540800,
                3712: 2105344,
                3968: 268435456,
                4096: 268443648,
                4352: 270532616,
                4608: 270540808,
                4864: 8200,
                5120: 2097152,
                5376: 268435456,
                5632: 268435464,
                5888: 2105344,
                6144: 2105352,
                6400: 0,
                6656: 8,
                6912: 270532608,
                7168: 8192,
                7424: 268443656,
                7680: 270540800,
                7936: 2097160,
                4224: 8,
                4480: 2105344,
                4736: 2097152,
                4992: 268435464,
                5248: 268443648,
                5504: 8200,
                5760: 270540808,
                6016: 270532608,
                6272: 270540800,
                6528: 270532616,
                6784: 8192,
                7040: 2105352,
                7296: 2097160,
                7552: 0,
                7808: 268435456,
                8064: 268443656,
              },
              {
                0: 1048576,
                16: 33555457,
                32: 1024,
                48: 1049601,
                64: 34604033,
                80: 0,
                96: 1,
                112: 34603009,
                128: 33555456,
                144: 1048577,
                160: 33554433,
                176: 34604032,
                192: 34603008,
                208: 1025,
                224: 1049600,
                240: 33554432,
                8: 34603009,
                24: 0,
                40: 33555457,
                56: 34604032,
                72: 1048576,
                88: 33554433,
                104: 33554432,
                120: 1025,
                136: 1049601,
                152: 33555456,
                168: 34603008,
                184: 1048577,
                200: 1024,
                216: 34604033,
                232: 1,
                248: 1049600,
                256: 33554432,
                272: 1048576,
                288: 33555457,
                304: 34603009,
                320: 1048577,
                336: 33555456,
                352: 34604032,
                368: 1049601,
                384: 1025,
                400: 34604033,
                416: 1049600,
                432: 1,
                448: 0,
                464: 34603008,
                480: 33554433,
                496: 1024,
                264: 1049600,
                280: 33555457,
                296: 34603009,
                312: 1,
                328: 33554432,
                344: 1048576,
                360: 1025,
                376: 34604032,
                392: 33554433,
                408: 34603008,
                424: 0,
                440: 34604033,
                456: 1049601,
                472: 1024,
                488: 33555456,
                504: 1048577,
              },
              {
                0: 134219808,
                1: 131072,
                2: 134217728,
                3: 32,
                4: 131104,
                5: 134350880,
                6: 134350848,
                7: 2048,
                8: 134348800,
                9: 134219776,
                10: 133120,
                11: 134348832,
                12: 2080,
                13: 0,
                14: 134217760,
                15: 133152,
                2147483648: 2048,
                2147483649: 134350880,
                2147483650: 134219808,
                2147483651: 134217728,
                2147483652: 134348800,
                2147483653: 133120,
                2147483654: 133152,
                2147483655: 32,
                2147483656: 134217760,
                2147483657: 2080,
                2147483658: 131104,
                2147483659: 134350848,
                2147483660: 0,
                2147483661: 134348832,
                2147483662: 134219776,
                2147483663: 131072,
                16: 133152,
                17: 134350848,
                18: 32,
                19: 2048,
                20: 134219776,
                21: 134217760,
                22: 134348832,
                23: 131072,
                24: 0,
                25: 131104,
                26: 134348800,
                27: 134219808,
                28: 134350880,
                29: 133120,
                30: 2080,
                31: 134217728,
                2147483664: 131072,
                2147483665: 2048,
                2147483666: 134348832,
                2147483667: 133152,
                2147483668: 32,
                2147483669: 134348800,
                2147483670: 134217728,
                2147483671: 134219808,
                2147483672: 134350880,
                2147483673: 134217760,
                2147483674: 134219776,
                2147483675: 0,
                2147483676: 133120,
                2147483677: 2080,
                2147483678: 131104,
                2147483679: 134350848,
              },
            ],
            u = [
              4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504,
              2147483679,
            ],
            c = (n.DES = a.extend({
              _doReset: function () {
                for (var e = this._key.words, t = [], r = 0; r < 56; r++) {
                  var i = o[r] - 1;
                  t[r] = (e[i >>> 5] >>> (31 - (i % 32))) & 1;
                }
                for (var a = (this._subKeys = []), n = 0; n < 16; n++) {
                  var d = (a[n] = []),
                    u = l[n];
                  for (r = 0; r < 24; r++)
                    (d[(r / 6) | 0] |=
                      t[(s[r] - 1 + u) % 28] << (31 - (r % 6))),
                      (d[4 + ((r / 6) | 0)] |=
                        t[28 + ((s[r + 24] - 1 + u) % 28)] << (31 - (r % 6)));
                  for (d[0] = (d[0] << 1) | (d[0] >>> 31), r = 1; r < 7; r++)
                    d[r] = d[r] >>> (4 * (r - 1) + 3);
                  d[7] = (d[7] << 5) | (d[7] >>> 27);
                }
                var c = (this._invSubKeys = []);
                for (r = 0; r < 16; r++) c[r] = a[15 - r];
              },
              encryptBlock: function (e, t) {
                this._doCryptBlock(e, t, this._subKeys);
              },
              decryptBlock: function (e, t) {
                this._doCryptBlock(e, t, this._invSubKeys);
              },
              _doCryptBlock: function (e, t, r) {
                (this._lBlock = e[t]),
                  (this._rBlock = e[t + 1]),
                  h.call(this, 4, 252645135),
                  h.call(this, 16, 65535),
                  f.call(this, 2, 858993459),
                  f.call(this, 8, 16711935),
                  h.call(this, 1, 1431655765);
                for (var i = 0; i < 16; i++) {
                  for (
                    var a = r[i],
                      n = this._lBlock,
                      o = this._rBlock,
                      s = 0,
                      l = 0;
                    l < 8;
                    l++
                  )
                    s |= d[l][((o ^ a[l]) & u[l]) >>> 0];
                  (this._lBlock = o), (this._rBlock = n ^ s);
                }
                var c = this._lBlock;
                (this._lBlock = this._rBlock),
                  (this._rBlock = c),
                  h.call(this, 1, 1431655765),
                  f.call(this, 8, 16711935),
                  f.call(this, 2, 858993459),
                  h.call(this, 16, 65535),
                  h.call(this, 4, 252645135),
                  (e[t] = this._lBlock),
                  (e[t + 1] = this._rBlock);
              },
              keySize: 2,
              ivSize: 2,
              blockSize: 2,
            }));
          function h(e, t) {
            var r = ((this._lBlock >>> e) ^ this._rBlock) & t;
            (this._rBlock ^= r), (this._lBlock ^= r << e);
          }
          function f(e, t) {
            var r = ((this._rBlock >>> e) ^ this._lBlock) & t;
            (this._lBlock ^= r), (this._rBlock ^= r << e);
          }
          e.DES = a._createHelper(c);
          var p = (n.TripleDES = a.extend({
            _doReset: function () {
              var e = this._key.words;
              if (2 !== e.length && 4 !== e.length && e.length < 6)
                throw new Error(
                  "Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192."
                );
              var t = e.slice(0, 2),
                i = e.length < 4 ? e.slice(0, 2) : e.slice(2, 4),
                a = e.length < 6 ? e.slice(0, 2) : e.slice(4, 6);
              (this._des1 = c.createEncryptor(r.create(t))),
                (this._des2 = c.createEncryptor(r.create(i))),
                (this._des3 = c.createEncryptor(r.create(a)));
            },
            encryptBlock: function (e, t) {
              this._des1.encryptBlock(e, t),
                this._des2.decryptBlock(e, t),
                this._des3.encryptBlock(e, t);
            },
            decryptBlock: function (e, t) {
              this._des3.decryptBlock(e, t),
                this._des2.encryptBlock(e, t),
                this._des1.decryptBlock(e, t);
            },
            keySize: 6,
            ivSize: 2,
            blockSize: 2,
          }));
          e.TripleDES = a._createHelper(p);
        })(),
        i.TripleDES);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(3),
        r(4),
        r(2),
        r(1),
        (function () {
          var e = i,
            t = e.lib.StreamCipher,
            r = e.algo,
            a = (r.RC4 = t.extend({
              _doReset: function () {
                for (
                  var e = this._key,
                    t = e.words,
                    r = e.sigBytes,
                    i = (this._S = []),
                    a = 0;
                  a < 256;
                  a++
                )
                  i[a] = a;
                a = 0;
                for (var n = 0; a < 256; a++) {
                  var o = a % r,
                    s = (t[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                  n = (n + i[a] + s) % 256;
                  var l = i[a];
                  (i[a] = i[n]), (i[n] = l);
                }
                this._i = this._j = 0;
              },
              _doProcessBlock: function (e, t) {
                e[t] ^= n.call(this);
              },
              keySize: 8,
              ivSize: 0,
            }));
          function n() {
            for (
              var e = this._S, t = this._i, r = this._j, i = 0, a = 0;
              a < 4;
              a++
            ) {
              r = (r + e[(t = (t + 1) % 256)]) % 256;
              var n = e[t];
              (e[t] = e[r]),
                (e[r] = n),
                (i |= e[(e[t] + e[r]) % 256] << (24 - 8 * a));
            }
            return (this._i = t), (this._j = r), i;
          }
          e.RC4 = t._createHelper(a);
          var o = (r.RC4Drop = a.extend({
            cfg: a.cfg.extend({
              drop: 192,
            }),
            _doReset: function () {
              a._doReset.call(this);
              for (var e = this.cfg.drop; e > 0; e--) n.call(this);
            },
          }));
          e.RC4Drop = t._createHelper(o);
        })(),
        i.RC4);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(3),
        r(4),
        r(2),
        r(1),
        (function () {
          var e = i,
            t = e.lib.StreamCipher,
            r = e.algo,
            a = [],
            n = [],
            o = [],
            s = (r.Rabbit = t.extend({
              _doReset: function () {
                for (
                  var e = this._key.words, t = this.cfg.iv, r = 0;
                  r < 4;
                  r++
                )
                  e[r] =
                    (16711935 & ((e[r] << 8) | (e[r] >>> 24))) |
                    (4278255360 & ((e[r] << 24) | (e[r] >>> 8)));
                var i = (this._X = [
                    e[0],
                    (e[3] << 16) | (e[2] >>> 16),
                    e[1],
                    (e[0] << 16) | (e[3] >>> 16),
                    e[2],
                    (e[1] << 16) | (e[0] >>> 16),
                    e[3],
                    (e[2] << 16) | (e[1] >>> 16),
                  ]),
                  a = (this._C = [
                    (e[2] << 16) | (e[2] >>> 16),
                    (4294901760 & e[0]) | (65535 & e[1]),
                    (e[3] << 16) | (e[3] >>> 16),
                    (4294901760 & e[1]) | (65535 & e[2]),
                    (e[0] << 16) | (e[0] >>> 16),
                    (4294901760 & e[2]) | (65535 & e[3]),
                    (e[1] << 16) | (e[1] >>> 16),
                    (4294901760 & e[3]) | (65535 & e[0]),
                  ]);
                for (this._b = 0, r = 0; r < 4; r++) l.call(this);
                for (r = 0; r < 8; r++) a[r] ^= i[(r + 4) & 7];
                if (t) {
                  var n = t.words,
                    o = n[0],
                    s = n[1],
                    d =
                      (16711935 & ((o << 8) | (o >>> 24))) |
                      (4278255360 & ((o << 24) | (o >>> 8))),
                    u =
                      (16711935 & ((s << 8) | (s >>> 24))) |
                      (4278255360 & ((s << 24) | (s >>> 8))),
                    c = (d >>> 16) | (4294901760 & u),
                    h = (u << 16) | (65535 & d);
                  for (
                    a[0] ^= d,
                      a[1] ^= c,
                      a[2] ^= u,
                      a[3] ^= h,
                      a[4] ^= d,
                      a[5] ^= c,
                      a[6] ^= u,
                      a[7] ^= h,
                      r = 0;
                    r < 4;
                    r++
                  )
                    l.call(this);
                }
              },
              _doProcessBlock: function (e, t) {
                var r = this._X;
                l.call(this),
                  (a[0] = r[0] ^ (r[5] >>> 16) ^ (r[3] << 16)),
                  (a[1] = r[2] ^ (r[7] >>> 16) ^ (r[5] << 16)),
                  (a[2] = r[4] ^ (r[1] >>> 16) ^ (r[7] << 16)),
                  (a[3] = r[6] ^ (r[3] >>> 16) ^ (r[1] << 16));
                for (var i = 0; i < 4; i++)
                  (a[i] =
                    (16711935 & ((a[i] << 8) | (a[i] >>> 24))) |
                    (4278255360 & ((a[i] << 24) | (a[i] >>> 8)))),
                    (e[t + i] ^= a[i]);
              },
              blockSize: 4,
              ivSize: 2,
            }));
          function l() {
            for (var e = this._X, t = this._C, r = 0; r < 8; r++) n[r] = t[r];
            for (
              t[0] = (t[0] + 1295307597 + this._b) | 0,
                t[1] =
                  (t[1] + 3545052371 + (t[0] >>> 0 < n[0] >>> 0 ? 1 : 0)) | 0,
                t[2] =
                  (t[2] + 886263092 + (t[1] >>> 0 < n[1] >>> 0 ? 1 : 0)) | 0,
                t[3] =
                  (t[3] + 1295307597 + (t[2] >>> 0 < n[2] >>> 0 ? 1 : 0)) | 0,
                t[4] =
                  (t[4] + 3545052371 + (t[3] >>> 0 < n[3] >>> 0 ? 1 : 0)) | 0,
                t[5] =
                  (t[5] + 886263092 + (t[4] >>> 0 < n[4] >>> 0 ? 1 : 0)) | 0,
                t[6] =
                  (t[6] + 1295307597 + (t[5] >>> 0 < n[5] >>> 0 ? 1 : 0)) | 0,
                t[7] =
                  (t[7] + 3545052371 + (t[6] >>> 0 < n[6] >>> 0 ? 1 : 0)) | 0,
                this._b = t[7] >>> 0 < n[7] >>> 0 ? 1 : 0,
                r = 0;
              r < 8;
              r++
            ) {
              var i = e[r] + t[r],
                a = 65535 & i,
                s = i >>> 16,
                l = ((((a * a) >>> 17) + a * s) >>> 15) + s * s,
                d = (((4294901760 & i) * i) | 0) + (((65535 & i) * i) | 0);
              o[r] = l ^ d;
            }
            (e[0] =
              (o[0] +
                ((o[7] << 16) | (o[7] >>> 16)) +
                ((o[6] << 16) | (o[6] >>> 16))) |
              0),
              (e[1] = (o[1] + ((o[0] << 8) | (o[0] >>> 24)) + o[7]) | 0),
              (e[2] =
                (o[2] +
                  ((o[1] << 16) | (o[1] >>> 16)) +
                  ((o[0] << 16) | (o[0] >>> 16))) |
                0),
              (e[3] = (o[3] + ((o[2] << 8) | (o[2] >>> 24)) + o[1]) | 0),
              (e[4] =
                (o[4] +
                  ((o[3] << 16) | (o[3] >>> 16)) +
                  ((o[2] << 16) | (o[2] >>> 16))) |
                0),
              (e[5] = (o[5] + ((o[4] << 8) | (o[4] >>> 24)) + o[3]) | 0),
              (e[6] =
                (o[6] +
                  ((o[5] << 16) | (o[5] >>> 16)) +
                  ((o[4] << 16) | (o[4] >>> 16))) |
                0),
              (e[7] = (o[7] + ((o[6] << 8) | (o[6] >>> 24)) + o[5]) | 0);
          }
          e.Rabbit = t._createHelper(s);
        })(),
        i.Rabbit);
    },
    function (e, t, r) {
      var i;
      e.exports =
        ((i = r(0)),
        r(3),
        r(4),
        r(2),
        r(1),
        (function () {
          var e = i,
            t = e.lib.StreamCipher,
            r = e.algo,
            a = [],
            n = [],
            o = [],
            s = (r.RabbitLegacy = t.extend({
              _doReset: function () {
                var e = this._key.words,
                  t = this.cfg.iv,
                  r = (this._X = [
                    e[0],
                    (e[3] << 16) | (e[2] >>> 16),
                    e[1],
                    (e[0] << 16) | (e[3] >>> 16),
                    e[2],
                    (e[1] << 16) | (e[0] >>> 16),
                    e[3],
                    (e[2] << 16) | (e[1] >>> 16),
                  ]),
                  i = (this._C = [
                    (e[2] << 16) | (e[2] >>> 16),
                    (4294901760 & e[0]) | (65535 & e[1]),
                    (e[3] << 16) | (e[3] >>> 16),
                    (4294901760 & e[1]) | (65535 & e[2]),
                    (e[0] << 16) | (e[0] >>> 16),
                    (4294901760 & e[2]) | (65535 & e[3]),
                    (e[1] << 16) | (e[1] >>> 16),
                    (4294901760 & e[3]) | (65535 & e[0]),
                  ]);
                this._b = 0;
                for (var a = 0; a < 4; a++) l.call(this);
                for (a = 0; a < 8; a++) i[a] ^= r[(a + 4) & 7];
                if (t) {
                  var n = t.words,
                    o = n[0],
                    s = n[1],
                    d =
                      (16711935 & ((o << 8) | (o >>> 24))) |
                      (4278255360 & ((o << 24) | (o >>> 8))),
                    u =
                      (16711935 & ((s << 8) | (s >>> 24))) |
                      (4278255360 & ((s << 24) | (s >>> 8))),
                    c = (d >>> 16) | (4294901760 & u),
                    h = (u << 16) | (65535 & d);
                  for (
                    i[0] ^= d,
                      i[1] ^= c,
                      i[2] ^= u,
                      i[3] ^= h,
                      i[4] ^= d,
                      i[5] ^= c,
                      i[6] ^= u,
                      i[7] ^= h,
                      a = 0;
                    a < 4;
                    a++
                  )
                    l.call(this);
                }
              },
              _doProcessBlock: function (e, t) {
                var r = this._X;
                l.call(this),
                  (a[0] = r[0] ^ (r[5] >>> 16) ^ (r[3] << 16)),
                  (a[1] = r[2] ^ (r[7] >>> 16) ^ (r[5] << 16)),
                  (a[2] = r[4] ^ (r[1] >>> 16) ^ (r[7] << 16)),
                  (a[3] = r[6] ^ (r[3] >>> 16) ^ (r[1] << 16));
                for (var i = 0; i < 4; i++)
                  (a[i] =
                    (16711935 & ((a[i] << 8) | (a[i] >>> 24))) |
                    (4278255360 & ((a[i] << 24) | (a[i] >>> 8)))),
                    (e[t + i] ^= a[i]);
              },
              blockSize: 4,
              ivSize: 2,
            }));
          function l() {
            for (var e = this._X, t = this._C, r = 0; r < 8; r++) n[r] = t[r];
            for (
              t[0] = (t[0] + 1295307597 + this._b) | 0,
                t[1] =
                  (t[1] + 3545052371 + (t[0] >>> 0 < n[0] >>> 0 ? 1 : 0)) | 0,
                t[2] =
                  (t[2] + 886263092 + (t[1] >>> 0 < n[1] >>> 0 ? 1 : 0)) | 0,
                t[3] =
                  (t[3] + 1295307597 + (t[2] >>> 0 < n[2] >>> 0 ? 1 : 0)) | 0,
                t[4] =
                  (t[4] + 3545052371 + (t[3] >>> 0 < n[3] >>> 0 ? 1 : 0)) | 0,
                t[5] =
                  (t[5] + 886263092 + (t[4] >>> 0 < n[4] >>> 0 ? 1 : 0)) | 0,
                t[6] =
                  (t[6] + 1295307597 + (t[5] >>> 0 < n[5] >>> 0 ? 1 : 0)) | 0,
                t[7] =
                  (t[7] + 3545052371 + (t[6] >>> 0 < n[6] >>> 0 ? 1 : 0)) | 0,
                this._b = t[7] >>> 0 < n[7] >>> 0 ? 1 : 0,
                r = 0;
              r < 8;
              r++
            ) {
              var i = e[r] + t[r],
                a = 65535 & i,
                s = i >>> 16,
                l = ((((a * a) >>> 17) + a * s) >>> 15) + s * s,
                d = (((4294901760 & i) * i) | 0) + (((65535 & i) * i) | 0);
              o[r] = l ^ d;
            }
            (e[0] =
              (o[0] +
                ((o[7] << 16) | (o[7] >>> 16)) +
                ((o[6] << 16) | (o[6] >>> 16))) |
              0),
              (e[1] = (o[1] + ((o[0] << 8) | (o[0] >>> 24)) + o[7]) | 0),
              (e[2] =
                (o[2] +
                  ((o[1] << 16) | (o[1] >>> 16)) +
                  ((o[0] << 16) | (o[0] >>> 16))) |
                0),
              (e[3] = (o[3] + ((o[2] << 8) | (o[2] >>> 24)) + o[1]) | 0),
              (e[4] =
                (o[4] +
                  ((o[3] << 16) | (o[3] >>> 16)) +
                  ((o[2] << 16) | (o[2] >>> 16))) |
                0),
              (e[5] = (o[5] + ((o[4] << 8) | (o[4] >>> 24)) + o[3]) | 0),
              (e[6] =
                (o[6] +
                  ((o[5] << 16) | (o[5] >>> 16)) +
                  ((o[4] << 16) | (o[4] >>> 16))) |
                0),
              (e[7] = (o[7] + ((o[6] << 8) | (o[6] >>> 24)) + o[5]) | 0);
          }
          e.RabbitLegacy = t._createHelper(s);
        })(),
        i.RabbitLegacy);
    },
    function (e, t, r) {
      "use strict";
      r.r(t);
      var i = r(13),
        a = r.n(i),
        n = r(9),
        o = {
          insert: "head",
          singleton: !1,
        },
        s =
          (a()(n.a, o), n.a.locals, /mobile/i.test(window.navigator.userAgent)),
        l = {
          secondToTime: function (e) {
            if (0 === (e = e || 0) || e === 1 / 0 || "NaN" === e.toString())
              return "00:00";
            var t = Math.floor(e / 3600),
              r = Math.floor((e - 3600 * t) / 60),
              i = Math.floor(e - 3600 * t - 60 * r);
            return (t > 0 ? [t, r, i] : [r, i])
              .map(function (e) {
                return e < 10 ? "0" + e : "" + e;
              })
              .join(":");
          },
          timeToSecond: function (e) {
            var t = e.split(":")[0],
              r = e.split(":")[1],
              i = e.split(":")[2];
            return Number(3600 * t) + Number(60 * r) + Number(i);
          },
          getElementViewLeft: function (e) {
            var t = e.offsetLeft,
              r = e.offsetParent,
              i =
                document.body.scrollLeft + document.documentElement.scrollLeft;
            if (
              document.fullscreenElement ||
              document.mozFullScreenElement ||
              document.webkitFullscreenElement
            )
              for (; null !== r && r !== e; )
                (t += r.offsetLeft), (r = r.offsetParent);
            else for (; null !== r; ) (t += r.offsetLeft), (r = r.offsetParent);
            return t - i;
          },
          getBoundingClientRectViewLeft: function (e) {
            var t =
              window.scrollY ||
              window.pageYOffset ||
              document.body.scrollTop +
                ((document.documentElement &&
                  document.documentElement.scrollTop) ||
                  0);
            if (e.getBoundingClientRect) {
              if (
                "number" != typeof this.getBoundingClientRectViewLeft.offset
              ) {
                var r = document.createElement("div");
                (r.style.cssText = "position:absolute;top:0;left:0;"),
                  document.body.appendChild(r),
                  (this.getBoundingClientRectViewLeft.offset =
                    -r.getBoundingClientRect().top - t),
                  document.body.removeChild(r),
                  (r = null);
              }
              var i = e.getBoundingClientRect(),
                a = this.getBoundingClientRectViewLeft.offset;
              return i.left + a;
            }
            return this.getElementViewLeft(e);
          },
          getBoundingClientRectViewTop: function (e) {
            var t =
              window.scrollY ||
              window.pageYOffset ||
              document.body.scrollTop +
                ((document.documentElement &&
                  document.documentElement.scrollTop) ||
                  0);
            if (e.getBoundingClientRect) {
              if ("number" != typeof this.getBoundingClientRectViewTop.offset) {
                var r = document.createElement("div");
                (r.style.cssText = "position:absolute;top:0;left:0;"),
                  document.body.appendChild(r),
                  (this.getBoundingClientRectViewTop.offset =
                    -r.getBoundingClientRect().top - t),
                  document.body.removeChild(r),
                  (r = null);
              }
              var i = e.getBoundingClientRect(),
                a = this.getBoundingClientRectViewTop.offset;
              return i.top + a;
            }
            return this.getElementViewLeft(e);
          },
          getScrollPosition: function () {
            return {
              left:
                window.pageXOffset ||
                document.documentElement.scrollLeft ||
                document.body.scrollLeft ||
                0,
              top:
                window.pageYOffset ||
                document.documentElement.scrollTop ||
                document.body.scrollTop ||
                0,
            };
          },
          setScrollPosition: function (e) {
            var t = e.left,
              r = void 0 === t ? 0 : t,
              i = e.top,
              a = void 0 === i ? 0 : i;
            this.isFirefox
              ? ((document.documentElement.scrollLeft = r),
                (document.documentElement.scrollTop = a))
              : window.scrollTo(r, a);
          },
          isMobile: s,
          isFirefox: /firefox/i.test(window.navigator.userAgent),
          isChrome: /chrome/i.test(window.navigator.userAgent),
          storage: {
            set: function (e, t) {
              localStorage.setItem(e, t);
            },
            get: function (e) {
              return localStorage.getItem(e);
            },
          },
          nameMap: {
            dragStart: s ? "touchstart" : "mousedown",
            dragMove: s ? "touchmove" : "mousemove",
            dragEnd: s ? "touchend" : "mouseup",
          },
          color2Number: function (e) {
            return (
              "#" === e[0] && (e = e.substr(1)),
              3 === e.length &&
                (e = "" + e[0] + e[0] + e[1] + e[1] + e[2] + e[2]),
              (parseInt(e, 16) + 0) & 16777215
            );
          },
          number2Color: function (e) {
            return "#" + ("00000" + e.toString(16)).slice(-6);
          },
          number2Type: function (e) {
            switch (e) {
              case 0:
                return "right";
              case 1:
                return "top";
              case 2:
                return "bottom";
              default:
                return "right";
            }
          },
          addStyle: function (e) {
            var t = document.createElement("style");
            (t.innerHTML = e), document.head.appendChild(t);
          },
          transSubtitleXml: function (e) {
            var t = e.getElementsByTagName("sub");
            if (t && 0 !== t.length) {
              var r = {},
                i = t[0],
                a = i.getElementsByTagName("note");
              if (a && a.length > 0) {
                var n = a[0],
                  o = {
                    width: n.getAttribute("width")
                      ? parseInt(n.getAttribute("width"))
                      : void 0,
                    height: n.getAttribute("height")
                      ? parseInt(n.getAttribute("height"))
                      : void 0,
                  };
                r.note = o;
              }
              for (
                var s = [], l = i.getElementsByTagName("dia"), d = 0;
                d < l.length;
                d++
              ) {
                var u = l[d],
                  c = {
                    st: 0,
                    et: 0,
                    con: "",
                  },
                  h = u.getElementsByTagName("st");
                if (h && h.length > 0) {
                  var f = h[0];
                  c.st = this.timeToSecond(f.innerHTML);
                }
                var p = u.getElementsByTagName("et");
                if (p && p.length > 0) {
                  var g = p[0];
                  c.et = this.timeToSecond(g.innerHTML);
                }
                var v = u.getElementsByTagName("con");
                if (v && v.length > 0) {
                  var y = v[0].innerHTML;
                  c.con += y;
                }
                var m = u.getElementsByTagName("style");
                if (m && m.length > 0) {
                  var b = m[0],
                    _ = {
                      font: {},
                      color: {},
                      scale: {},
                      border: {},
                      position: {},
                    },
                    w = b.getElementsByTagName("font");
                  if (w && w.length > 0) {
                    var T = w[0],
                      E = {
                        name: T.getAttribute("name"),
                        size: T.getAttribute("size")
                          ? 0.85 * parseFloat(T.getAttribute("size"))
                          : void 0,
                        bold:
                          !!T.getAttribute("bold") &&
                          !!parseInt(T.getAttribute("bold")),
                        italic:
                          !!T.getAttribute("italic") &&
                          !!parseInt(T.getAttribute("italic")),
                        underline:
                          !!T.getAttribute("underline") &&
                          !!parseInt(T.getAttribute("underline")),
                        strikeout:
                          !!T.getAttribute("strikeout") &&
                          !!parseInt(T.getAttribute("strikeout")),
                        spacing: T.getAttribute("spacing")
                          ? parseFloat(T.getAttribute("spacing"))
                          : void 0,
                        angle: T.getAttribute("angle")
                          ? parseFloat(T.getAttribute("angle"))
                          : void 0,
                      };
                    _.font = E;
                  }
                  var S = b.getElementsByTagName("color");
                  if (S && S.length > 0) {
                    var k = S[0],
                      x = {
                        primary: k.getAttribute("primary")
                          ? this.colorHex(k.getAttribute("primary"))
                          : "",
                        secondary: k.getAttribute("secondary")
                          ? this.colorHex(k.getAttribute("secondary"))
                          : "",
                        back: k.getAttribute("back")
                          ? this.colorHex(k.getAttribute("back"))
                          : "",
                        outline: k.getAttribute("outline")
                          ? this.colorHex(k.getAttribute("outline"))
                          : "",
                      };
                    _.color = x;
                  }
                  var A = b.getElementsByTagName("scale");
                  if (A && A.length > 0) {
                    var R = A[0],
                      L = {
                        x: R.getAttribute("x")
                          ? parseFloat(R.getAttribute("x"))
                          : void 0,
                        y: R.getAttribute("y")
                          ? parseFloat(R.getAttribute("y"))
                          : void 0,
                      };
                    _.scale = L;
                  }
                  var D = b.getElementsByTagName("border");
                  if (D && D.length > 0) {
                    var C = D[0],
                      O = {
                        style: C.getAttribute("style")
                          ? parseInt(C.getAttribute("style"))
                          : void 0,
                        outline: C.getAttribute("outline")
                          ? parseFloat(C.getAttribute("outline"))
                          : void 0,
                        shadow: C.getAttribute("shadow")
                          ? parseFloat(C.getAttribute("shadow"))
                          : void 0,
                      };
                    _.border = O;
                  }
                  var I = b.getElementsByTagName("position");
                  if (I && I.length > 0) {
                    var P = I[0],
                      F = {
                        type: P.getAttribute("type")
                          ? parseInt(P.getAttribute("type"))
                          : 1,
                        alignment: P.getAttribute("alignment")
                          ? parseInt(P.getAttribute("alignment"))
                          : 2,
                        ml: P.getAttribute("ml")
                          ? parseFloat(P.getAttribute("ml"))
                          : 0,
                        mr: P.getAttribute("mr")
                          ? parseFloat(P.getAttribute("mr"))
                          : 0,
                        mv: P.getAttribute("mv")
                          ? parseFloat(P.getAttribute("mv"))
                          : 0,
                      };
                    _.position = F;
                  }
                  c.style = _;
                }
                s.push(c);
              }
              return (r.dias = s), r;
            }
          },
          colorHex: function (e) {
            if (!e) return "";
            if (e.startsWith("&H")) {
              var t = e.substr(2),
                r = t.length;
              if (r < 6 || r > 8) return;
              var i = 0;
              8 === r &&
                ((i = parseInt(t.substr(0, 2), 16)), (t = t.substring(2)));
              var a = parseInt(t.substr(0, 2), 16),
                n = parseInt(t.substr(2, 2), 16);
              return (
                "rgba(" +
                parseInt(t.substr(4, 2), 16) +
                ", " +
                n +
                ", " +
                a +
                ", " +
                (1 - i / 255) +
                ")"
              );
            }
            return "";
          },
        },
        d = r(6),
        u = r(15),
        c = r.n(u),
        h = r(16),
        f = r.n(h),
        p = r(17),
        g = r.n(p),
        v = r(18),
        y = r.n(v),
        m = r(19),
        b = r.n(m),
        _ = r(20),
        w = r.n(_),
        T = r(21),
        E = r.n(T),
        S = r(22),
        k = r.n(S),
        x = r(23),
        A = r.n(x),
        R = r(24),
        L = r.n(R),
        D = r(25),
        C = r.n(D),
        O = r(26),
        I = r.n(O),
        P = r(27),
        F = r.n(P),
        M = {
          play: c.a,
          pause: f.a,
          volumeUp: g.a,
          volumeOff: y.a,
          full: b.a,
          fullWeb: w.a,
          camera: E.a,
          bigPlay: k.a,
          bigPause: A.a,
          nextPlay: L.a,
          skipFF: C.a,
          skipREW: I.a,
          playThumb: F.a,
        };
      function B(e, t) {
        var r,
          i = document.createElement(e);
        return t && t.length > 0 && (r = i.classList).add.apply(r, t), i;
      }
      function N(e, t) {
        var r =
          ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
          e["@@iterator"];
        if (r) return (r = r.call(e)).next.bind(r);
        if (
          Array.isArray(e) ||
          (r = (function (e, t) {
            if (!e) return;
            if ("string" == typeof e) return U(e, t);
            var r = Object.prototype.toString.call(e).slice(8, -1);
            "Object" === r && e.constructor && (r = e.constructor.name);
            if ("Map" === r || "Set" === r) return Array.from(e);
            if (
              "Arguments" === r ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
            )
              return U(e, t);
          })(e)) ||
          (t && e && "number" == typeof e.length)
        ) {
          r && (e = r);
          var i = 0;
          return function () {
            return i >= e.length
              ? {
                  done: !0,
                }
              : {
                  done: !1,
                  value: e[i++],
                };
          };
        }
        throw new TypeError(
          "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
        );
      }
      function U(e, t) {
        (null == t || t > e.length) && (t = e.length);
        for (var r = 0, i = new Array(t); r < t; r++) i[r] = e[r];
        return i;
      }
      function H(e) {
        var t = e.tran,
          r = (e.index, e.options),
          i = B("div", ["hiplayer-controller"]),
          a = (function (e) {
            var t = e.theme,
              r = e.live,
              i = e.nextPlayIcon,
              a = e.tran,
              n = B("div", ["hiplayer-icons", "hiplayer-icons-left"]),
              o =
                '\n  <div class="hiplayer-icon hiplayer-play-icon">\n      <span class="hiplayer-icon-content">' +
                M.play +
                "</span>\n  </div>\n  ";
            i &&
              (o +=
                '\n    <div class="hiplayer-icon hiplayer-next-play-icon">\n      <span class="hiplayer-icon-content">' +
                M.nextPlay +
                "</span>\n    </div>\n    ");
            (o +=
              '\n    <div class="hiplayer-seek">\n      <div class="hiplayer-icon hiplayer-seek-rew-icon">\n        <span class="hiplayer-icon-content">' +
              M.skipREW +
              '</span>\n      </div>\n      <div class="hiplayer-icon hiplayer-seek-ff-icon">\n        <span class="hiplayer-icon-content">' +
              M.skipFF +
              "</span>\n      </div>\n    </div>\n    "),
              (o +=
                '\n  <div class="hiplayer-text hiplayer-time">\n      <span class="hiplayer-ptime">00:00</span>/<span class="hiplayer-dtime">00:00</span>\n  </div>\n  '),
              r &&
                (o +=
                  '<span class="hiplayer-live-badge"><span class="hiplayer-live-dot" style="background: ' +
                  t +
                  ';"></span>' +
                  a("Live") +
                  "</span>");
            return (n.innerHTML = o), n;
          })({
            theme: r.theme,
            live: r.live,
            nextPlayIcon: r.nextPlayIcon,
            tran: t,
          });
        i.appendChild(a);
        var n = (function (e) {
          var t = e.options,
            r = t.video,
            i = r.qualities,
            a = r.defaultQuality,
            n = r.subtitles,
            o = r.defaultSubtitle,
            s = t.volume,
            l = t.screenshot,
            d = t.theme,
            u = t.playbackSpeed,
            c = t.webfullscreen,
            h = t.fullscreen,
            f = e.tran,
            p = B("div", ["hiplayer-icons", "hiplayer-icons-right"]),
            g = "";
          if (n && n.length > 0) {
            var v =
              '<div class="hiplayer-pop-item hiplayer-subtitle-item" data-id="off">' +
              f("NoSubtitle") +
              "</div>";
            "off" === o &&
              (v =
                '<div class="hiplayer-pop-item hiplayer-pop-item-std hiplayer-subtitle-item" data-id="off">' +
                f("NoSubtitle") +
                "</div>");
            for (var y, m = N(n); !(y = m()).done; ) {
              var b = y.value,
                _ =
                  '<div class="hiplayer-subtitle-translate-type">(' +
                  f("AutoTranslate") +
                  ")</div>";
              b.id === o
                ? 102 === b.translationType
                  ? (v +=
                      '<div class="hiplayer-pop-item hiplayer-pop-item-std hiplayer-subtitle-item hiplayer-subtitle-item-auto" data-id="' +
                      b.id +
                      '">' +
                      b.name +
                      _ +
                      "</div>")
                  : (v +=
                      '<div class="hiplayer-pop-item hiplayer-pop-item-std hiplayer-subtitle-item" data-id="' +
                      b.id +
                      '">' +
                      b.name +
                      "</div>")
                : 102 === b.translationType
                ? (v +=
                    '<div class="hiplayer-pop-item hiplayer-subtitle-item hiplayer-subtitle-item-auto" data-id="' +
                    b.id +
                    '">' +
                    b.name +
                    _ +
                    "</div>")
                : (v +=
                    '<div class="hiplayer-pop-item hiplayer-subtitle-item" data-id="' +
                    b.id +
                    '">' +
                    b.name +
                    "</div>");
            }
            n.length > 0
              ? (g +=
                  '\n      <div class="hiplayer-subtitle">\n        <div class="hiplayer-text hiplayer-subtitle-icon">' +
                  f("Subtitles") +
                  '</div>\n        <div class="hiplayer-pop-mask hiplayer-subtitle-mask">\n            <div class="hiplayer-pop-list hiplayer-subtitle-list">\n            ' +
                  v +
                  "\n            </div>\n        </div>\n      </div>\n      ")
              : (g +=
                  '\n      <div class="hiplayer-subtitle">\n        <div class="hiplayer-text hiplayer-subtitle-icon">' +
                  f("Subtitles") +
                  "</div>\n      </div>\n      ");
          }
          if (u) {
            for (var w, T = "", E = N(u); !(w = E()).done; ) {
              var S = w.value,
                k = S % 1 == 0 ? "" + S.toFixed(1) : S;
              T +=
                "1.0" === k
                  ? '\n        <div class="hiplayer-pop-item hiplayer-pop-item-std hiplayer-speed-item" data-speed="' +
                    k +
                    '">\n          ' +
                    k +
                    "x\n        </div>\n        "
                  : '\n        <div class="hiplayer-pop-item hiplayer-speed-item" data-speed="' +
                    k +
                    '">\n          ' +
                    k +
                    "x\n        </div>\n        ";
            }
            g +=
              '\n    <div class="hiplayer-speed">\n        <div class="hiplayer-text hiplayer-speed-text">1.0x</div>\n        <div class="hiplayer-pop-mask hiplayer-speed-mask">\n            <div class="hiplayer-pop-list hiplayer-speed-list">\n            ' +
              T +
              "\n            </div>\n        </div>\n    </div>\n    ";
          }
          if (i && i.length > 0) {
            for (var x, A = "", R = "", L = N(i); !(x = L()).done; ) {
              var D = x.value;
              D.id === a
                ? ((R = D.name),
                  (A +=
                    '<div class="hiplayer-pop-item hiplayer-pop-item-std hiplayer-quality-item" data-id="' +
                    D.id +
                    '">' +
                    D.name +
                    "</div>"))
                : (A +=
                    '<div class="hiplayer-pop-item hiplayer-quality-item" data-id="' +
                    D.id +
                    '">' +
                    D.name +
                    "</div>");
            }
            i.length > 1
              ? (g +=
                  '\n      <div class="hiplayer-quality">\n        <div class="hiplayer-text hiplayer-quality-icon">' +
                  R +
                  '</div>\n        <div class="hiplayer-pop-mask hiplayer-quality-mask">\n            <div class="hiplayer-pop-list hiplayer-quality-list">\n            ' +
                  A +
                  "\n            </div>\n        </div>\n      </div>\n      ")
              : (g +=
                  '\n      <div class="hiplayer-quality">\n        <div class="hiplayer-text hiplayer-quality-icon">' +
                  R +
                  "</div>\n      </div>\n      ");
          }
          l &&
            (g +=
              '\n    <div class="hiplayer-icon hiplayer-camera-icon" aria-label="' +
              f("Screenshot") +
              '" data-balloon-pos="up">\n        <span class="hiplayer-icon-content">' +
              M.camera +
              "</span>\n    </div>\n    ");
          if (
            ((g +=
              '\n  <div class="hiplayer-volume">\n      <div class="hiplayer-icon hiplayer-volume-icon">\n          <span class="hiplayer-icon-content">' +
              M.volumeUp +
              '</span>\n      </div>\n      <div class="hiplayer-pop-mask hiplayer-volume-mask">\n        <div class="hiplayer-volume-setting">\n          <span class="hiplayer-volume-text">' +
              (100 * s).toFixed(0) +
              '%</span>\n          <div class="hiplayer-volume-bar-wrap">\n            <div class="hiplayer-volume-bar">\n              <div class="hiplayer-volume-bar-inner" style="background: ' +
              d +
              ';">\n                <span class="hiplayer-thumb" style="background: ' +
              d +
              '"></span>\n              </div>\n          </div>\n        </div>\n      </div>\n      </div>\n  </div>\n  '),
            c || h)
          ) {
            var C =
                '<div class="hiplayer-icon hiplayer-full-in-icon">\n        <span class="hiplayer-icon-content">' +
                M.fullWeb +
                "</span>\n    </div>",
              O =
                '<div class="hiplayer-icon hiplayer-full-icon">\n        <span class="hiplayer-icon-content">' +
                M.full +
                "</span>\n    </div>";
            g +=
              '\n    <div class="hiplayer-full">\n        ' +
              (c ? C : "") +
              "\n        " +
              (h ? O : "") +
              "\n    </div>\n    ";
          }
          return (p.innerHTML = g), p;
        })({
          options: r,
          tran: t,
        });
        i.appendChild(n);
        var o = (function (e) {
          var t = B("div", ["hiplayer-bar-wrap"]);
          return (
            (t.innerHTML =
              '\n  <div class="hiplayer-bar-preview"></div>\n  <div class="hiplayer-bar-bg">\n    <div class="hiplayer-loaded" style="width: 0;"></div>\n  </div>\n  <div class="hiplayer-bar">\n    <div class="hiplayer-played" style="width: 0; background: ' +
              e +
              '">\n      <div class="hiplayer-thumb">' +
              M.playThumb +
              "</div>\n    </div>\n  </div>\n  "),
            t
          );
        })(r.theme);
        return i.appendChild(o), i;
      }
      function j(e) {
        e.tran, e.index;
        var t = e.options,
          r = B("div", ["hiplayer-mobile-controller"]),
          i = B("div", ["hiplayer-icon", "hiplayer-play-icon"]);
        (i.innerHTML =
          '<span class="hiplayer-icon-content">' + M.play + "</span>"),
          r.appendChild(i);
        var a = B("div", ["hiplayer-time"]);
        (a.innerHTML = '<span class="hiplayer-ptime">00:00</span>'),
          r.appendChild(a);
        var n = (function (e) {
          var t = B("div", ["hiplayer-bar-wrap"]);
          return (
            (t.innerHTML =
              '\n  <div class="hiplayer-bar-preview"></div>\n  <div class="hiplayer-bar">\n      <div class="hiplayer-loaded" style="width: 0;"></div>\n      <div class="hiplayer-played" style="width: 0; background: ' +
              e +
              '">\n          <span class="hiplayer-thumb"></span>\n      </div>\n  </div>\n  '),
            t
          );
        })(t.theme);
        r.appendChild(n);
        var o = B("div", ["hiplayer-time"]);
        (o.innerHTML = '<span class="hiplayer-dtime">00:00</span>'),
          r.appendChild(o);
        var s = B("div", ["hiplayer-icon", "hiplayer-full-icon"]);
        return (
          (s.innerHTML =
            '<span class="hiplayer-icon-content">' + M.full + "</span>"),
          r.appendChild(s),
          r
        );
      }
      function G(e) {
        var t = e.current,
          r = void 0 !== t && t,
          i = e.screenshot,
          a = void 0 !== i && i,
          n = e.preload,
          o = void 0 === n ? "auto" : n,
          s = e.poster,
          l = void 0 === s ? "" : s,
          d = e.url,
          u = void 0 === d ? "" : d,
          c =
            (e.subtitle,
            B(
              "video",
              r
                ? ["hiplayer-video", "hiplayer-video-current"]
                : ["hiplayer-video"]
            ));
        return (
          c.setAttribute("webkit-playsinline", ""),
          c.setAttribute("playsinline", ""),
          a && c.setAttribute("crossorigin", "anonymous"),
          o && c.setAttribute("preload", o),
          l && c.setAttribute("poster", l),
          u && c.setAttribute("src", u),
          c
        );
      }
      function z(e) {
        var t = e.tran,
          r = e.index,
          i = e.options,
          a = B("div"),
          n = B("div", ["hiplayer-mask"]);
        a.appendChild(n);
        var o = (function (e) {
          var t = e.screenshot,
            r = e.preload,
            i = e.logo,
            a = e.video,
            n = e.logos,
            o = B("div", ["hiplayer-video-wrap"]),
            s = B("div", ["hiplayer-video-inner-wrap"]),
            l = B("div", ["hiplayer-logo-wrap"]),
            d = G({
              current: !0,
              poster: null == a ? void 0 : a.poster,
              url: null == a ? void 0 : a.url,
              screenshot: t,
              preload: r,
            });
          if ((s.appendChild(d), s.appendChild(l), i)) {
            var u = B("div", ["hiplayer-logo"]);
            (u.style.left = i.left), (u.style.top = i.top);
            var c = B("img");
            c.setAttribute("src", i.src), u.appendChild(c), s.appendChild(u);
          }
          n &&
            n.forEach(function (e, t) {
              var r = B("div", ["hiplayer-logo" + t, "hiplayer-logo"]),
                i = B("img");
              i.setAttribute("src", e.imgSrc),
                r.appendChild(i),
                l.appendChild(r);
            });
          var h = B("div", ["hiplayer-subtitle-wrapper"]);
          s.appendChild(h);
          var f = B("div", ["hiplayer-bezel"]),
            p = B("div", ["hiplayer-loading-icon"]);
          return (
            (p.innerHTML =
              '<div class="hiplayer-loading-dot hiplayer-loading-dot-1"></div>\n  <div class="hiplayer-loading-dot hiplayer-loading-dot-2"></div>'),
            f.appendChild(p),
            s.appendChild(f),
            o.appendChild(s),
            o
          );
        })(i);
        a.appendChild(o);
        var s = B("div", ["hiplayer-controller-mask"]);
        a.appendChild(s);
        var d = null;
        (d = l.isMobile
          ? j({
              tran: t,
              index: r,
              options: i,
            })
          : H({
              tran: t,
              index: r,
              options: i,
            })),
          a.appendChild(d);
        var u,
          c = B("div", ["hiplayer-notice"]);
        if ((a.appendChild(c), i.bigPlayIcon)) {
          var h =
            (((u = B("button", ["hiplayer-big-play-icon"])).innerHTML =
              M.bigPlay),
            u);
          a.appendChild(h);
        }
        return a.innerHTML;
      }
      function Y(e, t) {
        for (var r = 0; r < t.length; r++) {
          var i = t[r];
          (i.enumerable = i.enumerable || !1),
            (i.configurable = !0),
            "value" in i && (i.writable = !0),
            Object.defineProperty(e, i.key, i);
        }
      }
      var K,
        V = (function () {
          function e(e) {
            var t = e.container,
              r = e.options,
              i = e.index,
              a = e.tran;
            (this._container = void 0),
              (this._container = t),
              (this._container.innerHTML = z({
                tran: a,
                index: i,
                options: r,
              })),
              l.addStyle(
                ".hiplayer-controller .hiplayer-icons .hiplayer-pop-mask .hiplayer-pop-list .hiplayer-pop-item-std {\n      color: " +
                  r.theme +
                  ";\n    }"
              ),
              l.addStyle(
                ".hiplayer-controller .hiplayer-icons .hiplayer-pop-mask .hiplayer-pop-list .hiplayer-pop-item:hover {\n      color: " +
                  r.theme +
                  ";\n    }"
              );
          }
          var t, r, i;
          return (
            (e.prototype.getSubtitleList = function () {
              return this._container.querySelector(".hiplayer-subtitle-list");
            }),
            (t = e),
            (r = [
              {
                key: "volumeText",
                get: function () {
                  return this._container.querySelector(".hiplayer-volume-text");
                },
              },
              {
                key: "volumeBar",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-volume-bar-inner"
                  );
                },
              },
              {
                key: "volumeBarWrap",
                get: function () {
                  return this._container.querySelector(".hiplayer-volume-bar");
                },
              },
              {
                key: "volumeBarWrapWrap",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-volume-bar-wrap"
                  );
                },
              },
              {
                key: "volumeButton",
                get: function () {
                  return this._container.querySelector(".hiplayer-volume");
                },
              },
              {
                key: "volumeButtonIcon",
                get: function () {
                  return this._container.querySelector(".hiplayer-volume-icon");
                },
              },
              {
                key: "volumeIcon",
                get: function () {
                  return this._container.querySelector(".hiplayer-volume-icon");
                },
              },
              {
                key: "playedBar",
                get: function () {
                  return this._container.querySelector(".hiplayer-played");
                },
              },
              {
                key: "loadedBar",
                get: function () {
                  return this._container.querySelector(".hiplayer-loaded");
                },
              },
              {
                key: "playedBarWrap",
                get: function () {
                  return this._container.querySelector(".hiplayer-bar-wrap");
                },
              },
              {
                key: "video",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-video-current"
                  );
                },
              },
              {
                key: "logoWrap",
                get: function () {
                  return this._container.querySelector(".hiplayer-logo-wrap");
                },
              },
              {
                key: "videoWrap",
                get: function () {
                  return this._container.querySelector(".hiplayer-video-wrap");
                },
              },
              {
                key: "playButton",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-play-icon .hiplayer-icon-content"
                  );
                },
              },
              {
                key: "nextPlayButton",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-next-play-icon"
                  );
                },
              },
              {
                key: "bigPlayButton",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-big-play-icon"
                  );
                },
              },
              {
                key: "controllerMask",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-controller-mask"
                  );
                },
              },
              {
                key: "ptime",
                get: function () {
                  return this._container.querySelector(".hiplayer-ptime");
                },
              },
              {
                key: "mask",
                get: function () {
                  return this._container.querySelector(".hiplayer-mask");
                },
              },
              {
                key: "speed",
                get: function () {
                  return this._container.querySelector(".hiplayer-speed-text");
                },
              },
              {
                key: "speedList",
                get: function () {
                  return this._container.querySelector(".hiplayer-speed-list");
                },
              },
              {
                key: "speedItem",
                get: function () {
                  return this._container.querySelectorAll(
                    ".hiplayer-speed-item"
                  );
                },
              },
              {
                key: "dtime",
                get: function () {
                  return this._container.querySelector(".hiplayer-dtime");
                },
              },
              {
                key: "controller",
                get: function () {
                  return this._container.querySelector(".hiplayer-controller");
                },
              },
              {
                key: "browserFullButton",
                get: function () {
                  return this._container.querySelector(".hiplayer-full-icon");
                },
              },
              {
                key: "webFullButton",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-full-in-icon"
                  );
                },
              },
              {
                key: "qualityList",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-quality-list"
                  );
                },
              },
              {
                key: "camareButton",
                get: function () {
                  return this._container.querySelector(".hiplayer-camera-icon");
                },
              },
              {
                key: "qualityButton",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-quality-icon"
                  );
                },
              },
              {
                key: "barPreview",
                get: function () {
                  return this._container.querySelector(".hiplayer-bar-preview");
                },
              },
              {
                key: "barWrap",
                get: function () {
                  return this._container.querySelector(".hiplayer-bar-wrap");
                },
              },
              {
                key: "notice",
                get: function () {
                  return this._container.querySelector(".hiplayer-notice");
                },
              },
              {
                key: "subtitleWrap",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-subtitle-wrapper"
                  );
                },
              },
              {
                key: "subtitleButton",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-subtitle-icon"
                  );
                },
              },
              {
                key: "seekRewButton",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-seek-rew-icon"
                  );
                },
              },
              {
                key: "seekFFButton",
                get: function () {
                  return this._container.querySelector(
                    ".hiplayer-seek-ff-icon"
                  );
                },
              },
              {
                key: "videoLogos",
                get: function () {
                  return this._container.querySelectorAll(".hiplayer-logo");
                },
              },
            ]) && Y(t.prototype, r),
            i && Y(t, i),
            Object.defineProperty(t, "prototype", {
              writable: !1,
            }),
            e
          );
        })();
      !(function (e) {
        (e.quality_start = "quality_start"),
          (e.quality_end = "quality_end"),
          (e.destroy = "destroy"),
          (e.resize = "resize"),
          (e.fullscreen = "fullscreen"),
          (e.fullscreen_cancel = "fullscreen_cancel"),
          (e.webfullscreen = "webfullscreen"),
          (e.webfullscreen_cancel = "webfullscreen_cancel"),
          (e.next_video = "next_video"),
          (e.speed_rate = "speed_rate"),
          (e.subtitle_switch = "subtitle_switch"),
          (e.play_btn_click = "play_btn_click"),
          (e.pause_btn_click = "pause_btn_click"),
          (e.seek_frwd_10 = "seek_frwd_10"),
          (e.seek_back_10 = "seek_back_10"),
          (e.seek_frwd = "seek_frwd"),
          (e.seek_back = "seek_back"),
          (e.volume_bar_seek = "volume_bar_seek");
      })(K || (K = {}));
      var q,
        W = K;
      !(function (e) {
        (e.abort = "abort"),
          (e.canplay = "canplay"),
          (e.canplaythrough = "canplaythrough"),
          (e.durationchange = "durationchange"),
          (e.emptied = "emptied"),
          (e.ended = "ended"),
          (e.error = "error"),
          (e.loadeddata = "loadeddata"),
          (e.loadedmetadata = "loadedmetadata"),
          (e.loadstart = "loadstart"),
          (e.mozaudioavailable = "mozaudioavailable"),
          (e.pause = "pause"),
          (e.play = "play"),
          (e.playing = "playing"),
          (e.progress = "progress"),
          (e.ratechange = "ratechange"),
          (e.seeked = "seeked"),
          (e.seeking = "seeking"),
          (e.stalled = "stalled"),
          (e.suspend = "suspend"),
          (e.timeupdate = "timeupdate"),
          (e.volumechange = "volumechange"),
          (e.waiting = "waiting");
      })(q || (q = {}));
      var X = q;
      function Q(e, t) {
        var r =
          ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
          e["@@iterator"];
        if (r) return (r = r.call(e)).next.bind(r);
        if (
          Array.isArray(e) ||
          (r = (function (e, t) {
            if (!e) return;
            if ("string" == typeof e) return Z(e, t);
            var r = Object.prototype.toString.call(e).slice(8, -1);
            "Object" === r && e.constructor && (r = e.constructor.name);
            if ("Map" === r || "Set" === r) return Array.from(e);
            if (
              "Arguments" === r ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
            )
              return Z(e, t);
          })(e)) ||
          (t && e && "number" == typeof e.length)
        ) {
          r && (e = r);
          var i = 0;
          return function () {
            return i >= e.length
              ? {
                  done: !0,
                }
              : {
                  done: !1,
                  value: e[i++],
                };
          };
        }
        throw new TypeError(
          "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
        );
      }
      function Z(e, t) {
        (null == t || t > e.length) && (t = e.length);
        for (var r = 0, i = new Array(t); r < t; r++) i[r] = e[r];
        return i;
      }
      var J = (function () {
          function e() {
            (this.videoEvents = [
              X.abort,
              X.canplay,
              X.canplaythrough,
              X.durationchange,
              X.emptied,
              X.ended,
              X.error,
              X.loadeddata,
              X.loadedmetadata,
              X.loadstart,
              X.mozaudioavailable,
              X.pause,
              X.play,
              X.playing,
              X.progress,
              X.ratechange,
              X.seeked,
              X.seeking,
              X.stalled,
              X.suspend,
              X.timeupdate,
              X.volumechange,
              X.waiting,
            ]),
              (this.playerEvents = [
                W.quality_start,
                W.quality_end,
                W.destroy,
                W.resize,
                W.fullscreen,
                W.fullscreen_cancel,
                W.webfullscreen,
                W.webfullscreen_cancel,
                W.next_video,
                W.speed_rate,
                W.subtitle_switch,
                W.play_btn_click,
                W.pause_btn_click,
                W.seek_frwd_10,
                W.seek_back_10,
                W.seek_frwd,
                W.seek_back,
                W.volume_bar_seek,
              ]),
              (this._events = {}),
              (this._events = {});
          }
          var t = e.prototype;
          return (
            (t.subscribe = function (e, t) {
              return this._getEventTypeByName(e) && "function" == typeof t
                ? (this._events[e] || (this._events[e] = []),
                  this._events[e].push(t),
                  this._events[e].length - 1)
                : -1;
            }),
            (t.emit = function (e, t) {
              if (this._events[e] && this._events[e].length)
                for (var r, i = Q(this._events[e]); !(r = i()).done; ) {
                  (0, r.value)(t);
                }
            }),
            (t.unsubscribe = function (e, t) {
              this._getEventTypeByName(e) &&
                -1 !== t &&
                this._events[e].splice(t, 1);
            }),
            (t._getEventTypeByName = function (e) {
              return -1 !== this.playerEvents.indexOf(e)
                ? "player"
                : -1 !== this.videoEvents.indexOf(e)
                ? "video"
                : (console.error("Unknown event name: " + e), null);
            }),
            e
          );
        })(),
        $ = (function () {
          function e(e) {
            var t = this;
            (this._player = void 0),
              (this._lastScrollPosition = {
                left: 0,
                top: 0,
              }),
              (this._player = e),
              this._player.events.subscribe(W.webfullscreen, function () {
                t._player.resize();
              }),
              this._player.events.subscribe(
                W.webfullscreen_cancel,
                function () {
                  t._player.resize(),
                    l.setScrollPosition(t._lastScrollPosition);
                }
              );
            var r = function () {
                t._player.resize(),
                  t.isFullScreen("browser")
                    ? t._player.events.emit(W.fullscreen)
                    : (l.setScrollPosition(t._lastScrollPosition),
                      t._player.events.emit(W.fullscreen_cancel));
              },
              i = function () {
                var e = document,
                  r =
                    e.fullscreenElement ||
                    e.mozFullScreenElement ||
                    e.msFullscreenElement;
                (r && r !== t._player.container) ||
                  (t._player.resize(),
                  r
                    ? t._player.events.emit(W.fullscreen)
                    : (l.setScrollPosition(t._lastScrollPosition),
                      t._player.events.emit(W.fullscreen_cancel)));
              };
            /Firefox/.test(navigator.userAgent)
              ? (document.addEventListener("mozfullscreenchange", i),
                document.addEventListener("fullscreenchange", i))
              : /iPhone|iPad|iPod/i.test(navigator.userAgent)
              ? (this._player.video.addEventListener(
                  "webkitbeginfullscreen",
                  function () {
                    t._player.resize(), t._player.events.emit(W.fullscreen);
                  }
                ),
                this._player.video.addEventListener(
                  "webkitendfullscreen",
                  function () {
                    t._player.resize(),
                      l.setScrollPosition(t._lastScrollPosition),
                      t._player.pause(),
                      t._player.events.emit(W.fullscreen_cancel);
                  }
                ))
              : (this._player.container.addEventListener("fullscreenchange", r),
                this._player.container.addEventListener(
                  "webkitfullscreenchange",
                  r
                ),
                document.addEventListener("msfullscreenchange", i),
                document.addEventListener("MSFullscreenChange", i));
          }
          var t = e.prototype;
          return (
            (t.isFullScreen = function (e) {
              void 0 === e && (e = "browser");
              var t = document;
              switch (e) {
                case "browser":
                  return (
                    t.fullscreenElement ||
                    t.mozFullScreenElement ||
                    t.webkitFullscreenElement ||
                    t.msFullscreenElement
                  );
                case "web":
                  return this._player.container.classList.contains(
                    "hiplayer-fulled"
                  );
              }
            }),
            (t.request = function (e) {
              void 0 === e && (e = "browser");
              var t = "browser" === e ? "web" : "browser",
                r = this.isFullScreen(t);
              switch (
                (r || (this._lastScrollPosition = l.getScrollPosition()), e)
              ) {
                case "browser":
                  this._player.container.requestFullscreen
                    ? this._player.container.requestFullscreen()
                    : this._player.container.mozRequestFullScreen
                    ? this._player.container.mozRequestFullScreen()
                    : this._player.container.webkitRequestFullscreen
                    ? this._player.container.webkitRequestFullscreen()
                    : this._player.video.webkitEnterFullscreen
                    ? this._player.video.webkitEnterFullscreen()
                    : this._player.video.webkitEnterFullScreen
                    ? this._player.video.webkitEnterFullScreen()
                    : this._player.container.msRequestFullscreen &&
                      this._player.container.msRequestFullscreen();
                  break;
                case "web":
                  this._player.container.classList.add("hiplayer-fulled"),
                    document.body.classList.add("hiplayer-web-fullscreen-fix"),
                    this._player.events.emit(W.webfullscreen);
              }
              r && this.cancel(t);
            }),
            (t.cancel = function (e) {
              void 0 === e && (e = "browser");
              var t = document;
              switch (e) {
                case "browser":
                  t.cancelFullScreen
                    ? t.cancelFullScreen()
                    : t.mozCancelFullScreen
                    ? t.mozCancelFullScreen()
                    : t.webkitCancelFullScreen
                    ? t.webkitCancelFullScreen()
                    : t.webkitCancelFullscreen
                    ? t.webkitCancelFullscreen()
                    : t.msCancelFullScreen
                    ? t.msCancelFullScreen()
                    : t.msExitFullscreen && t.msExitFullscreen();
                  break;
                case "web":
                  this._player.container.classList.remove("hiplayer-fulled"),
                    document.body.classList.remove(
                      "hiplayer-web-fullscreen-fix"
                    ),
                    this._player.events.emit(W.webfullscreen_cancel);
              }
            }),
            (t.toggle = function (e) {
              void 0 === e && (e = "browser"),
                this.isFullScreen(e) ? this.cancel(e) : this.request(e);
            }),
            e
          );
        })(),
        ee = (function () {
          function e(e) {
            (this.storageName = {
              volume: "hiplayer-volume",
              subtitle: "hiplayer-subtitle",
              muted: "hiplayer-muted",
            }),
              (this.default = {
                volume: "0.7",
                subtitle: "",
                muted: "0",
              }),
              (this.data = {}),
              e.volume && (this.default.volume = e.volume.toString()),
              this._init();
          }
          var t = e.prototype;
          return (
            (t._init = function () {
              for (var e in this.storageName)
                if (this.storageName.hasOwnProperty(e)) {
                  var t = this.storageName[e],
                    r = l.storage.get(t);
                  this.data[e] = r || this.default[e];
                }
            }),
            (t.get = function (e) {
              return this.data[e];
            }),
            (t.set = function (e, t) {
              (this.data[e] = t), l.storage.set(this.storageName[e], t);
            }),
            e
          );
        })(),
        te = (function () {
          function e(e) {
            (this._elements = {}),
              (this._elements = {
                volume: e.volumeBar,
                played: e.playedBar,
                loaded: e.loadedBar,
              });
          }
          var t = e.prototype;
          return (
            (t.set = function (e, t, r) {
              (t = Math.max(t, 0)), (t = Math.min(t, 1));
              var i = this._elements[e];
              i && (i.style[r] = 100 * t + "%");
            }),
            (t.get = function (e) {
              var t = this._elements[e];
              return t ? parseFloat(t.style.width) / 100 : 0;
            }),
            e
          );
        })(),
        re = (function () {
          function e(e) {
            var t = this;
            (this._player = void 0),
              (this._autoHideTimer = null),
              (this._disableAutoHide = !1),
              (this._subscriptions = {}),
              (this._player = e),
              (this._autoHideTimer = null),
              l.isMobile ||
                ((this._player.container.onmouseover = function () {
                  t._show();
                }),
                (this._player.container.onmouseleave = function () {
                  t._hide();
                }),
                (this._player.container.onclick = function () {
                  t.setAutoHide();
                }),
                (this._subscriptions[X.play] = this._player.on(
                  X.play,
                  function () {
                    t.setAutoHide();
                  }
                )),
                (this._subscriptions[X.pause] = this._player.on(
                  X.pause,
                  function () {
                    t.setAutoHide();
                  }
                ))),
              this._initPlayButton(),
              this._initPlayTime(),
              this._initNextPlayButton(),
              this._initPlayedBar(),
              this._initFullButton(),
              this._initQualityButton(),
              this._initSubtitleButton(),
              this._initScreenshotButton(),
              this._initSeekButton(),
              l.isMobile || this._initVolumeButton();
          }
          var t = e.prototype;
          return (
            (t._initPlayButton = function () {
              var e = this;
              this._player.template.playButton &&
                ((this._player.template.playButton.innerHTML =
                  this._player.isPaused() ? M.play : M.pause),
                (this._player.template.playButton.onclick = function () {
                  e._player.toggle();
                })),
                this._player.template.bigPlayButton &&
                  ((this._player.template.bigPlayButton.innerHTML =
                    this._player.isPaused() ? M.bigPlay : M.bigPause),
                  (this._player.template.bigPlayButton.onclick = function () {
                    e._player.toggle();
                  })),
                l.isMobile
                  ? (this._player.template.videoWrap &&
                      (this._player.template.videoWrap.onclick = function () {
                        e._toggle();
                      }),
                    this._player.template.controllerMask &&
                      (this._player.template.controllerMask.onclick =
                        function () {
                          e._toggle();
                        }))
                  : (this._player.template.videoWrap &&
                      (this._player.template.videoWrap.onclick = function () {
                        e._player.toggle();
                      }),
                    this._player.template.controllerMask &&
                      (this._player.template.controllerMask.onclick =
                        function () {
                          e._player.toggle();
                        }));
            }),
            (t._initNextPlayButton = function () {
              var e = this;
              this._player.template.nextPlayButton &&
                (this._player.template.nextPlayButton.onclick = function () {
                  e._player.events.emit(W.next_video);
                });
            }),
            (t._initPlayTime = function () {
              var e = this._player.video.duration;
              e &&
                e !== 1 / 0 &&
                this._player.template.dtime &&
                (this._player.template.dtime.innerHTML = l.secondToTime(e)),
                this._player.template.ptime &&
                  (this._player.template.ptime.innerHTML = l.secondToTime(0));
            }),
            (t._initPlayedBar = function () {
              var e = this,
                t = this._player.template.playedBarWrap;
              if (t) {
                this._player.bar.set(
                  "played",
                  this._player.video.currentTime / this._player.video.duration,
                  "width"
                ),
                  this._player.template.ptime &&
                    (this._player.template.ptime.innerHTML = l.secondToTime(
                      this._player.video.currentTime
                    ));
                var r = this._player.video.buffered.length
                  ? this._player.video.buffered.end(
                      this._player.video.buffered.length - 1
                    ) / this._player.video.duration
                  : 0;
                this._player.bar.set("loaded", r, "width");
                var i = function (r) {
                    var i =
                      ((r.clientX ||
                        (r.changedTouches &&
                          r.changedTouches[0] &&
                          r.changedTouches[0].clientX)) -
                        l.getBoundingClientRectViewLeft(t)) /
                      t.clientWidth;
                    (i = Math.max(i, 0)),
                      (i = Math.min(i, 1)),
                      e._player.bar.set("played", i, "width"),
                      e._player.pause(),
                      e._player.template.ptime &&
                        (e._player.template.ptime.innerHTML = l.secondToTime(
                          i * e._player.video.duration
                        ));
                  },
                  a = function r(a) {
                    document.removeEventListener(l.nameMap.dragEnd, r),
                      document.removeEventListener(l.nameMap.dragMove, i);
                    var n =
                      ((a.clientX ||
                        (a.changedTouches &&
                          a.changedTouches[0] &&
                          a.changedTouches[0].clientX)) -
                        l.getBoundingClientRectViewLeft(t)) /
                      t.clientWidth;
                    (n = Math.max(n, 0)),
                      (n = Math.min(n, 1)),
                      e._player.bar.set("played", n, "width");
                    var o =
                      e._player.bar.get("played") * e._player.video.duration;
                    e._player.video.currentTime < o
                      ? e._player.events.emit(
                          W.seek_frwd,
                          o - e._player.video.currentTime
                        )
                      : e._player.video.currentTime > o &&
                        e._player.events.emit(
                          W.seek_back,
                          e._player.video.currentTime - o
                        ),
                      e._player.seek(o),
                      e._player.play();
                  },
                  n = function () {
                    document.addEventListener(l.nameMap.dragMove, i),
                      document.addEventListener(l.nameMap.dragEnd, a);
                  },
                  o = function (r) {
                    if (e._player.video.duration) {
                      var i = t.getBoundingClientRect().left,
                        a =
                          (r.clientX ||
                            (r.changedTouches &&
                              r.changedTouches[0] &&
                              r.changedTouches[0].clientX)) - i;
                      if (a < 0 || a > t.offsetWidth) return;
                      e._player.video.duration, t.offsetWidth;
                    }
                  };
                l.isMobile
                  ? ((t.ontouchstart = n), (t.ontouchmove = o))
                  : ((t.onmousedown = n), (t.onmousemove = o)),
                  l.isMobile ||
                    ((t.onmouseenter = function () {
                      e._player.video.duration;
                    }),
                    (t.onmouseleave = function () {
                      e._player.video.duration;
                    }));
              }
            }),
            (t._initFullButton = function () {
              var e = this;
              this._player.template.browserFullButton &&
                (this._player.template.browserFullButton.onclick = function () {
                  e._player.fullScreen.toggle("browser");
                }),
                this._player.template.webFullButton &&
                  (this._player.template.webFullButton.onclick = function () {
                    e._player.fullScreen.toggle("web");
                  });
            }),
            (t._initVolumeButton = function () {
              var e = this,
                t = parseFloat(this._player.user.get("volume"));
              this._player.bar.set("volume", t, "height"),
                this._player.template.volumeText &&
                  (this._player.template.volumeText.innerText =
                    (100 * t).toFixed(0) + "%"),
                this.switchVolumeIcon();
              var r = function (t) {
                  var r = t || window.event,
                    i =
                      ((r.clientY ||
                        (r.changedTouches &&
                          r.changedTouches[0] &&
                          r.changedTouches[0].clientY)) -
                        l.getBoundingClientRectViewTop(
                          e._player.template.volumeBarWrap
                        )) /
                      120;
                  e._player.volume(1 - i, !1, !0);
                },
                i = function t() {
                  var i;
                  document.removeEventListener(l.nameMap.dragEnd, t),
                    document.removeEventListener(l.nameMap.dragMove, r),
                    null === (i = e._player.template.volumeButton) ||
                      void 0 === i ||
                      i.classList.remove("hiplayer-volume-active");
                },
                a = function () {
                  var t;
                  document.addEventListener(l.nameMap.dragMove, r),
                    document.addEventListener(l.nameMap.dragEnd, i),
                    null === (t = e._player.template.volumeButton) ||
                      void 0 === t ||
                      t.classList.add("hiplayer-volume-active");
                },
                n = this._player.template.volumeBarWrapWrap;
              n &&
                ((n.onclick = function (t) {
                  var r = t || window.event,
                    i =
                      ((r.clientY ||
                        (r.changedTouches &&
                          r.changedTouches[0] &&
                          r.changedTouches[0].clientY)) -
                        l.getBoundingClientRectViewTop(
                          e._player.template.volumeBarWrap
                        )) /
                      120;
                  e._player.volume(1 - i, !1, !0),
                    e._player.events.emit(W.volume_bar_seek, 1 - i);
                }),
                l.isMobile ? (n.ontouchstart = a) : (n.onmousedown = a));
              var o = this._player.template.volumeButtonIcon;
              o &&
                (o.onclick = function () {
                  e._player.video.muted
                    ? e._player.muted(!1, !1)
                    : e._player.muted(!0, !1);
                });
            }),
            (t._initQualityButton = function () {
              var e = this;
              this._player.options.video.qualities &&
                this._player.template.qualityList &&
                (this._player.template.qualityList.onclick = function (t) {
                  t.target &&
                    t.target.classList.contains("hiplayer-quality-item") &&
                    e._player.onQualitySwitch(t.target.dataset.id);
                });
            }),
            (t._initSubtitleButton = function () {
              var e = this;
              this._player.options.video.subtitles &&
                this._player.template.getSubtitleList() &&
                (this._player.template.getSubtitleList().onclick = function (
                  t
                ) {
                  t.target &&
                    t.target.classList.contains("hiplayer-subtitle-item") &&
                    e._player.onSubtitleSwitch(t.target.dataset.id);
                });
            }),
            (t._initScreenshotButton = function () {
              var e = this;
              this._player.options.screenshot &&
                this._player.template.camareButton &&
                (this._player.template.camareButton.onclick = function () {
                  var t,
                    r,
                    i = document.createElement("canvas");
                  (i.width = e._player.video.videoWidth),
                    (i.height = e._player.video.videoHeight),
                    null === (t = i.getContext("2d")) ||
                      void 0 === t ||
                      t.drawImage(e._player.video, 0, 0, i.width, i.height),
                    i.toBlob(function (e) {
                      r = URL.createObjectURL(e);
                      var t = "" + Date.now(),
                        i = document.createElement("a");
                      (i.href = r),
                        (i.download = t + ".png"),
                        (i.style.display = "none"),
                        document.body.appendChild(i),
                        i.click(),
                        document.body.removeChild(i),
                        URL.revokeObjectURL(r);
                    }),
                    e._player.events.emit("screenshot", r);
                });
            }),
            (t._initSeekButton = function () {
              var e = this,
                t = this._player.template.seekFFButton,
                r = this._player.template.seekRewButton;
              t &&
                (t.onclick = function () {
                  e._player.seek(e._player.video.currentTime + 10, !1),
                    e._player.events.emit(W.seek_frwd_10);
                }),
                r &&
                  (r.onclick = function () {
                    e._player.seek(e._player.video.currentTime - 10, !1),
                      e._player.events.emit(W.seek_back_10);
                  });
            }),
            (t.setAutoHide = function () {
              var e = this;
              this._show(),
                this._autoHideTimer && clearTimeout(this._autoHideTimer),
                (this._autoHideTimer = setTimeout(function () {
                  !e._player.video.played.length ||
                    e._player.isPaused() ||
                    e._disableAutoHide ||
                    e._hide();
                }, 3e3));
            }),
            (t.setDisableAutoHide = function (e) {
              this._disableAutoHide = e;
            }),
            (t._show = function () {
              this._player.container.classList.remove(
                "hiplayer-hide-controller"
              );
            }),
            (t._hide = function () {
              this._player.container.classList.add("hiplayer-hide-controller");
            }),
            (t._isShow = function () {
              return !this._player.container.classList.contains(
                "hiplayer-hide-controller"
              );
            }),
            (t._toggle = function () {
              this._isShow() ? this._hide() : this._show();
            }),
            (t.switchVolumeIcon = function () {
              var e = this._player.template.volumeIcon;
              e &&
                (this._player.volume() >= 0.95 || this._player.volume() > 0
                  ? (e.innerHTML = M.volumeUp)
                  : (e.innerHTML = M.volumeOff));
            }),
            (t.destroy = function () {
              for (var e in (this._autoHideTimer &&
                (clearTimeout(this._autoHideTimer),
                (this._autoHideTimer = null)),
              this._subscriptions))
                this._subscriptions.hasOwnProperty(e) &&
                  this._player.unsubscribe(e, this._subscriptions[e]);
            }),
            e
          );
        })(),
        ie = (function () {
          function e(e) {
            var t = this;
            (this.loop = void 0),
              (this._player = void 0),
              (this._subscriptions = {}),
              (this._player = e),
              (this.loop = this._player.options.loop),
              this._player.template.speedList &&
                (this._player.template.speedList.onclick = function (e) {
                  if (
                    e.target &&
                    e.target.classList.contains("hiplayer-speed-item")
                  ) {
                    var r = e.target.dataset.speed;
                    r &&
                      (t._player.speed(parseFloat(r), !0),
                      t._player.events.emit(W.speed_rate, r));
                  }
                });
          }
          return (
            (e.prototype.destroy = function () {
              for (var e in this._subscriptions)
                this._subscriptions.hasOwnProperty(e) &&
                  this._player.unsubscribe(e, this._subscriptions[e]);
            }),
            e
          );
        })(),
        ae = function (e) {
          var t = this;
          (this._isFocus = !1),
            document.addEventListener(
              "click",
              function () {
                t._isFocus = !1;
              },
              !0
            ),
            e.container.addEventListener(
              "click",
              function () {
                t._isFocus = !0;
              },
              !0
            ),
            e.options.hotkey &&
              document.addEventListener("keydown", function (r) {
                if (t._isFocus) {
                  var i,
                    a,
                    n =
                      null === (i = document.activeElement) || void 0 === i
                        ? void 0
                        : i.tagName.toUpperCase(),
                    o =
                      null === (a = document.activeElement) || void 0 === a
                        ? void 0
                        : a.getAttribute("contenteditable");
                  if (
                    "INPUT" !== n &&
                    "TEXTAREA" !== n &&
                    "" !== o &&
                    "true" !== o
                  ) {
                    var s,
                      l = r || window.event;
                    switch (l.code && l.code.toLowerCase()) {
                      case "space":
                        l.preventDefault(), e.toggle();
                        break;
                      case "arrowleft":
                        if ((l.preventDefault(), e.options.live)) break;
                        e.seek(e.video.currentTime - 5),
                          e.controller.setAutoHide();
                        break;
                      case "arrowright":
                        if ((l.preventDefault(), e.options.live)) break;
                        e.seek(e.video.currentTime + 5),
                          e.controller.setAutoHide();
                        break;
                      case "arrowup":
                        l.preventDefault(), (s = e.volume() + 0.1), e.volume(s);
                        break;
                      case "arrowdown":
                        l.preventDefault(), (s = e.volume() - 0.1), e.volume(s);
                    }
                  }
                }
              }),
            document.addEventListener("keydown", function (t) {
              var r = t || window.event;
              switch (r.code && r.code.toLowerCase()) {
                case "escape":
                  e.fullScreen.isFullScreen("web") &&
                    e.fullScreen.cancel("web");
              }
            });
        };
      function ne(e, t) {
        return (ne =
          Object.setPrototypeOf ||
          function (e, t) {
            return (e.__proto__ = t), e;
          })(e, t);
      }
      var oe = {
        fLoader: (function (e) {
          var t, r;
          function i(t) {
            var r,
              i = (r = e.call(this, t) || this).load.bind(
                (function (e) {
                  if (void 0 === e)
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    );
                  return e;
                })(r)
              );
            return (
              (r.load = function (e, t, r) {
                if (e.url.endsWith(".ts")) {
                  var a = "",
                    n = e.frag.baseurl || e.frag.url,
                    o = n.indexOf("?");
                  -1 !== o && (a = n.substring(o)), (e.url += a);
                }
                i(e, t, r);
              }),
              r
            );
          }
          return (
            (r = e),
            ((t = i).prototype = Object.create(r.prototype)),
            (t.prototype.constructor = t),
            ne(t, r),
            i
          );
        })(r(10).DefaultConfig.loader),
      };
      function se(e, t) {
        for (var r = 0; r < t.length; r++) {
          var i = t[r];
          (i.enumerable = i.enumerable || !1),
            (i.configurable = !0),
            "value" in i && (i.writable = !0),
            Object.defineProperty(e, i.key, i);
        }
      }
      var le = (function () {
        function e(e) {
          (this.container = void 0),
            (this.theme = void 0),
            (this.live = void 0),
            (this.autoplay = void 0),
            (this.loop = void 0),
            (this.direction = void 0),
            (this.screenshot = void 0),
            (this.hotkey = void 0),
            (this.preload = void 0),
            (this.volume = void 0),
            (this.mutex = void 0),
            (this.muted = void 0),
            (this.playbackSpeed = void 0),
            (this.webfullscreen = void 0),
            (this.fullscreen = void 0),
            (this.logos = void 0),
            (this.logo = void 0),
            (this._lang = void 0),
            (this._video = {
              type: "auto",
              url: "",
              qualities: [],
              subtitles: [],
            }),
            (this.pluginOptions = void 0),
            (this.nextPlayIcon = void 0),
            (this.bigPlayIcon = void 0),
            (this.container = e.container
              ? e.container
              : document.getElementsByClassName("hiplayer")[0]),
            (this.theme = e.theme ? e.theme : "#ff5593"),
            (this.live = !!e.live && e.live),
            (this.autoplay = !!e.autoplay && e.autoplay),
            (this.loop = !!e.loop && e.loop),
            (this._lang = e.lang ? e.lang : navigator.language),
            (this.direction = this.getDirByLang(this.lang)),
            (this.screenshot = void 0 !== e.screenshot && e.screenshot),
            (this.hotkey = void 0 === e.hotkey || e.hotkey),
            (this.preload = e.preload ? e.preload : "auto"),
            (this.volume = e.volume ? e.volume : 0.7),
            (this.mutex = !!e.mutex && e.mutex),
            (this.muted = !!e.muted && e.muted),
            (this.playbackSpeed = e.playbackSpeed ? e.playbackSpeed : null),
            (this.webfullscreen =
              void 0 === e.webfullscreen || e.webfullscreen),
            (this.fullscreen = void 0 === e.fullscreen || e.fullscreen),
            (this.webfullscreen = this.fullscreen && this.webfullscreen),
            (this.pluginOptions = e.pluginOptions),
            (this.nextPlayIcon = void 0 === e.nextPlayIcon || e.nextPlayIcon),
            (this.bigPlayIcon = void 0 === e.bigPlayIcon || e.bigPlayIcon),
            e.logo &&
              (this.logo = {
                src: e.logo.src,
                top: e.logo.top || "20px",
                left: e.logo.left || "80%",
              }),
            e.logos && (this.logos = e.logos),
            e.video && this.setVideo(e.video);
        }
        var t,
          r,
          i,
          a = e.prototype;
        return (
          (a.setVideo = function (e) {
            var t = JSON.parse(JSON.stringify(e));
            (this._video.type = t.type ? t.type : "auto"),
              (this._video.url = t.url),
              (this._video.poster = t.poster),
              (this._video.customType = t.customType),
              (this._video.defaultQuality = t.defaultQuality),
              (this._video.qualities = t.qualities || []),
              (this._video.defaultSubtitle = t.defaultSubtitle),
              (this._video.subtitles = t.subtitles || []),
              this._video.qualities.length > 0 &&
                !this._video.defaultQuality &&
                (this._video.defaultQuality = this._video.qualities[0].id),
              this._video.subtitles.length > 0 &&
                !this._video.defaultSubtitle &&
                (this._video.defaultSubtitle = this._video.subtitles[0].id);
          }),
          (a.getDirByLang = function (e) {
            return "ar-AE" === e ? "rtl" : "ltr";
          }),
          (t = e),
          (r = [
            {
              key: "lang",
              get: function () {
                return this._lang;
              },
              set: function (e) {
                (this._lang = e),
                  (this.direction = this.getDirByLang(this._lang));
              },
            },
            {
              key: "video",
              get: function () {
                return this._video;
              },
            },
          ]) && se(t.prototype, r),
          i && se(t, i),
          Object.defineProperty(t, "prototype", {
            writable: !1,
          }),
          e
        );
      })();
      var de = function (e) {
          var t = e.querySelector(".hiplayer-notice"),
            r = null;
          return function (e, i, a) {
            void 0 === i && (i = 2e3),
              void 0 === a && (a = 0.8),
              t &&
                ((t.innerHTML = e),
                (t.style.opacity = "" + a),
                r && (clearTimeout(r), (r = null)),
                i > 0 &&
                  (r = setTimeout(function () {
                    t.style.opacity = "0";
                  }, i)));
          };
        },
        ue = r(36);
      //i got decrypt
      function ce(e, t, r) {
        var i = "";
        try {
          (e = ue.enc.Utf8.parse(e)), (t = ue.enc.Utf8.parse(t));
          var a = ue.enc.Base64.parse(r),
            n = ue.enc.Base64.stringify(a);
          i = ue.AES.decrypt(n, e, {
            iv: t,
            mode: ue.mode.CBC,
            padding: ue.pad.Pkcs7,
          }).toString(ue.enc.Utf8);
        } catch (e) {}
        return i;
      }
      function he(e, t) {
        var r = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(e);
          t &&
            (i = i.filter(function (t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            })),
            r.push.apply(r, i);
        }
        return r;
      }
      function fe(e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = null != arguments[t] ? arguments[t] : {};
          t % 2
            ? he(Object(r), !0).forEach(function (t) {
                pe(e, t, r[t]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
            : he(Object(r)).forEach(function (t) {
                Object.defineProperty(
                  e,
                  t,
                  Object.getOwnPropertyDescriptor(r, t)
                );
              });
        }
        return e;
      }
      function pe(e, t, r) {
        return (
          t in e
            ? Object.defineProperty(e, t, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (e[t] = r),
          e
        );
      }
      function ge(e, t) {
        for (var r = 0; r < t.length; r++) {
          var i = t[r];
          (i.enumerable = i.enumerable || !1),
            (i.configurable = !0),
            "value" in i && (i.writable = !0),
            Object.defineProperty(e, i.key, i);
        }
      }
      var ve = (function () {
          function e(e) {
            (this._player = void 0),
              (this.activeCues = []),
              (this._player = e),
              this.init();
          }
          var t,
            r,
            i,
            a = e.prototype;
          return (
            (a.init = function () {
              this.switchSubtitle(this.activeSubtitle);
            }),
            (a.switchSubtitle = function (e, t) {
              if ((void 0 === t && (t = !1), !e))
                return this.removeTrack(), void (this.activeSubtitle = "");
              if ("off" === e)
                return (
                  this.removeTrack(),
                  this.updateSubtitleController("off"),
                  (this.activeSubtitle = "off"),
                  void (t && this._player.notice(this.tran("NoSubtitle")))
                );
              this.removeTrack();
              var r = this.findSubtitleById(e);
              this.addTrack(r),
                this.updateSubtitleController(e),
                (this.activeSubtitle = e),
                t &&
                  this._player.notice(
                    this.tran("Switching to") +
                      " " +
                      (null == r ? void 0 : r.name)
                  );
            }),
            (a.addTrack = function (e) {
              var t,
                r = this;
              if (e)
                switch (e.type) {
                  case "vtt":
                    (this.video.innerHTML =
                      '<track src="' +
                      e.url +
                      '" label="subtitle-vtt" kind="metadata" default/>'),
                      this.video.textTracks &&
                        this.video.textTracks[0] &&
                        (t = this.video.textTracks[0]) &&
                        this.initTrack(t);
                    break;
                  case "xml":
                    this.fetchSubtitlesFromXML(e.id, e.url).then(function (i) {
                      var a = i.id,
                        n = i.subtitleDoc;
                      if (r.activeSubtitle === a) {
                        var o,
                          s,
                          d = l.transSubtitleXml(n);
                        if (e.secret && e.secret.key) {
                          var u = {
                            key: (s = e.secret.key).slice(0, 16),
                            iv: s.slice(16),
                          };
                          o = {
                            key: u.key,
                            iv: u.iv,
                          };
                        }
                        (t = r.resolveSubtitle(d, {
                          offset: e.offset || 0,
                          secret: o,
                        })) && r.initTrack(t);
                      }
                    });
                }
            }),
            (a.initTrack = function (e) {
              var t = this;
              e &&
                ((e.oncuechange = function () {
                  var r = e.activeCues || [];
                  if (
                    r &&
                    0 !== r.length &&
                    t.container &&
                    ((t.container.innerHTML = ""), r.length > 0)
                  ) {
                    for (
                      var i = document.createElement("div"),
                        a = [],
                        n = {},
                        o = 0;
                      o <= r.length - 1;
                      o++
                    ) {
                      var s = r[o];
                      if (
                        (t.activeCues.push(s),
                        s.style &&
                          s.style.position &&
                          1 === s.style.position.type)
                      ) {
                        var l =
                          s.style.position.alignment +
                          "/" +
                          s.style.position.ml +
                          "/" +
                          s.style.position.mr +
                          "/" +
                          s.style.position.mv;
                        n[l] ? n[l].push(s) : (n[l] = [s]);
                      } else a.push(s);
                    }
                    for (var d in n)
                      if (n.hasOwnProperty(d)) {
                        var u = n[d];
                        1 === u.length && (a.push(u[0]), delete n[d]);
                      }
                    a = a.sort(function (e, t) {
                      return e.startTime - t.startTime;
                    });
                    for (var c = 0; c < a.length; c++) {
                      var h = a[c],
                        f = t.createCueHtmlWithStyle(h);
                      i.innerHTML += f;
                    }
                    for (var p in n)
                      if (n.hasOwnProperty(p)) {
                        var g = n[p],
                          v = t.createGroupCuesHtmlWithStyle(g);
                        i.innerHTML += v;
                      }
                    t.container.innerHTML = i.innerHTML;
                    for (
                      var y =
                          t.container.getElementsByClassName("subtitle-text"),
                        m = 0;
                      m < y.length;
                      m++
                    ) {
                      var b = y[m],
                        _ = b.childNodes;
                      _.length > 0 &&
                        _[0] &&
                        _[0].textContent &&
                        b.setAttribute("data-text", _[0].textContent);
                    }
                  }
                }),
                this.video.addEventListener(
                  "timeupdate",
                  this.removeCueOnTimeChange.bind(this)
                ));
            }),
            (a.createCueHtmlWithStyle = function (e) {
              var t = this.createCueHtml(e),
                r = "";
              if (e.style) {
                var i,
                  a = this.resolveCueStyle(
                    e.style.baseW,
                    e.style.baseH,
                    e.style
                  ),
                  n = this.resolveCuePosition(
                    e.style.baseW,
                    e.style.baseH,
                    e.style.position
                  );
                (r += n.position + a.style),
                  (i = (a.transform + n.transform).trim()) &&
                    (r += "transform: " + i + ";");
              }
              return (
                '<div class="subtitle-cue" id="cue' +
                e.id +
                '"\n    base-font-size="' +
                ((e.style && e.style.font && e.style.font.size) || "") +
                '"\n    base-shadow="' +
                ((e.style && e.style.border && e.style.border.shadow) || "") +
                '"\n    base-shadow-color="' +
                ((e.style && e.style.color && e.style.color.back) || "") +
                '"\n    base-letter-spacing="' +
                ((e.style && e.style.font && e.style.font.spacing) || "") +
                '"\n    style="' +
                r +
                '">' +
                t +
                "</div>"
              );
            }),
            (a.createGroupCuesHtmlWithStyle = function (e) {
              if (!e || 0 === e.length) return "";
              var t = "",
                r = e[0].style.position,
                i = e[0].style.baseW,
                a = e[0].style.baseH,
                n = e.sort(function (e, t) {
                  return e.startTime - t.startTime;
                });
              r &&
                r.alignment >= 1 &&
                r.alignment <= 3 &&
                (n = e.sort(function (e, t) {
                  return t.startTime - e.startTime;
                }));
              for (var o = 0; o < n.length; o++) {
                var s = n[o],
                  l = this.createCueHtml(s),
                  d = "";
                if (s.style) {
                  var u = this.resolveCueStyle(
                      s.style.baseW,
                      s.style.baseH,
                      s.style
                    ),
                    c = u.style,
                    h = u.transform;
                  (d += c), (h = h.trim()) && (d += "transform: " + h + ";");
                }
                t +=
                  '<div class="subtitle-cue" id="cue' +
                  s.id +
                  '"\n      base-font-size="' +
                  ((s.style && s.style.font && s.style.font.size) || "") +
                  '"\n      base-shadow="' +
                  ((s.style && s.style.border && s.style.border.shadow) || "") +
                  '"\n      base-shadow-color="' +
                  ((s.style && s.style.color && s.style.color.back) || "") +
                  '"\n      base-letter-spacing="' +
                  ((s.style && s.style.font && s.style.font.spacing) || "") +
                  '"\n      style="' +
                  d +
                  '">' +
                  l +
                  "</div>";
              }
              var f = this.resolveCuePosition(i, a, r),
                p = f.position,
                g = f.transform;
              return (
                g && (p += "transform: " + g.trim() + ";"),
                '<div class="subtitle-cues-group" style="' +
                  p +
                  '">' +
                  t +
                  "</div>"
              );
            }),
            (a.createCueHtml = function (e) {
              var t = document.createElement("div");
              return (
                t.appendChild(e.getCueAsHTML()),
                t.innerHTML
                  .replace(/\\n+/g, "\\N")
                  .split(/\\N/)
                  .map(function (t) {
                    if (!t) return "";
                    var r = t.replace(/\\h/g, "&nbsp;");
                    return e.style && 3 === e.style.border.style
                      ? '<div><p style="background: ' +
                          e.style.color.outline +
                          '">' +
                          r +
                          "</p></div>"
                      : e.style && e.style.border.outline
                      ? '<div class="subtitle-text">' + r + "</div>"
                      : "<div>" + r + "</div>";
                  })
                  .join("")
              );
            }),
            (a.fetchSubtitlesFromXML = function (e, t) {
              return new Promise(function (r, i) {
                var a = new XMLHttpRequest();
                a.open("get", t, !0),
                  (a.onload = function () {
                    if (200 === this.status) {
                      var t = this.response,
                        i = new DOMParser().parseFromString(t, "text/xml");
                      r({
                        id: e,
                        subtitleDoc: i,
                      });
                    }
                  }),
                  (a.onerror = function () {
                    i();
                  }),
                  a.send();
              });
            }),
            (a.resolveSubtitle = function (e, t) {
              var r;
              if (this.video.textTracks && this.video.textTracks.length > 0)
                for (var i = this.video.textTracks.length, a = 0; a < i; a++) {
                  var n = this.video.textTracks[a];
                  n && "subtitle-xml" === n.label && (r = n);
                }
              r ||
                ((r = this.video.addTextTrack(
                  "metadata",
                  "subtitle-xml"
                )).mode = "showing");
              for (var o = e.dias || [], s = 0; s < o.length; s++) {
                var l = o[s],
                  d = l.st,
                  u = l.et,
                  c = l.con;
                t.offset && ((d += t.offset), (u += t.offset)),
                  t.secret && (c = ce(t.secret.key, t.secret.iv, c));
                var h = new VTTCue(d, u, c),
                  f = e.note.height,
                  p = e.note.width;
                this.container &&
                  this.container.setAttribute("base-width", "" + p),
                  l.style &&
                    (h.style = fe(
                      {
                        baseW: p,
                        baseH: f,
                      },
                      l.style
                    )),
                  (h.id = s + ""),
                  r.addCue(h);
              }
              return r;
            }),
            (a.resolveCueStyle = function (e, t, r) {
              var i = this.container
                ? this.container.getBoundingClientRect().width
                : 0;
              this.container.setAttribute("base-width", "" + e);
              var a = i / e,
                n = "",
                o = "",
                s = r.font;
              if (s) {
                if ((s.name && (o = "font-family: " + s.name + ";"), s.size)) {
                  var l = Math.floor(s.size * a) - 4;
                  l < 14 && (l = 14), (o += "font-size: " + l + "px;");
                }
                s.spacing &&
                  (o +=
                    "letter-spacing: " + (s.spacing * a).toFixed(1) + "px;"),
                  s.bold && (o += "font-weight: bold;"),
                  s.italic && (o += "font-style: italic;"),
                  s.underline &&
                    (o +=
                      "text-decoration: underline; text-decoration-color: " +
                      r.color.primary +
                      ";"),
                  s.strikeout &&
                    (o +=
                      "text-decoration: line-through; text-decoration-thickness: from-font; text-decoration-color: " +
                      r.color.primary +
                      ";"),
                  s.angle && (n += " rotate(" + -s.angle + "deg)");
              }
              var d = "",
                u = r.color;
              u && u.primary && (d += "color: " + u.primary + ";");
              var c = r.scale;
              c &&
                (100 !== c.x && (n += " scaleX(" + c.x / 100 + ")"),
                100 !== c.y && (n += " scaleY(" + c.y / 100 + ")"));
              var h = "",
                f = r.border;
              return (
                f &&
                  (1 === f.style
                    ? (f.outline &&
                        (h += "-webkit-text-stroke-color: " + u.outline + ";"),
                      f.shadow &&
                        (h +=
                          "text-shadow: " +
                          f.shadow * a +
                          "px " +
                          f.shadow * a +
                          "px " +
                          u.back +
                          ";"))
                    : f.style),
                {
                  style: o + d + h,
                  transform: n,
                }
              );
            }),
            (a.resolveCuePosition = function (e, t, r) {
              var i =
                  "position: absolute; bottom: 13%; max-width: 100%; text-align: center;",
                a = "";
              if (!r)
                return {
                  position: i,
                  transform: a,
                };
              if (1 === r.type) {
                var n = parseFloat(((r.ml / e) * 100).toFixed(1)),
                  o = parseFloat(((r.mr / e) * 100).toFixed(1)),
                  s = parseFloat(((r.mv / t) * 100).toFixed(1));
                (i = "position: absolute; width: " + (100 - n - o) + "%;"),
                  7 === r.alignment &&
                    (i +=
                      "top: " + s + "%; left: " + n + "%; text-align: left;"),
                  8 === r.alignment &&
                    (i +=
                      "top: " + s + "%; left: " + n + "%; text-align: center;"),
                  9 === r.alignment &&
                    (i +=
                      "top: " + s + "%; right: " + o + "%; text-align: right;"),
                  4 === r.alignment &&
                    (i += "top: 46.5%; left: " + n + "%; text-align: left;"),
                  5 === r.alignment &&
                    (i += "top: 46.5%; left: " + n + "%; text-align: center;"),
                  6 === r.alignment &&
                    (i += "top: 46.5%; right: " + o + "%; text-align: right;"),
                  1 === r.alignment &&
                    (i +=
                      "bottom: " +
                      s +
                      "%; left: " +
                      n +
                      "%; text-align: left;"),
                  2 === r.alignment &&
                    (i +=
                      "bottom: " +
                      s +
                      "%; left: " +
                      n +
                      "%; text-align: center;"),
                  3 === r.alignment &&
                    (i +=
                      "bottom: " +
                      s +
                      "%; right: " +
                      o +
                      "%; text-align: right;");
              } else if (2 === r.type) {
                var l = ((r.ml / e) * 100).toFixed(1) + "%";
                i =
                  "position: absolute; top: " +
                  (((r.mv / t) * 100).toFixed(1) + "%") +
                  "; left: " +
                  l +
                  "; text-align: left;";
              } else if (3 === r.type) {
                var d = parseFloat(((r.ml / e) * 100).toFixed(1));
                (i =
                  "position: absolute; top: " +
                  parseFloat(((r.mv / t) * 100).toFixed(1)).toFixed(1) +
                  "%; left: " +
                  d.toFixed(1) +
                  "%; width: 100%;"),
                  7 === r.alignment && (i += "text-align: left;"),
                  8 === r.alignment &&
                    ((a += " translateX(-50%)"), (i += "text-align: center;")),
                  9 === r.alignment &&
                    ((a += " translateX(-100%)"), (i += "text-align: right;")),
                  4 === r.alignment &&
                    ((a += " translateY(-50%)"), (i += "text-align: left;")),
                  5 === r.alignment &&
                    ((a += " translateX(-50%) translateY(-50%)"),
                    (i += "text-align: center;")),
                  6 === r.alignment &&
                    ((a += " translateX(-100%) translateY(-50%)"),
                    (i += "text-align: right;")),
                  1 === r.alignment &&
                    ((a += " translateY(-100%)"), (i += "text-align: left;")),
                  2 === r.alignment &&
                    ((a += " translateX(-50%) translateY(-100%)"),
                    (i += "text-align: center;")),
                  3 === r.alignment &&
                    ((a += " translateX(-100%) translateY(-100%)"),
                    (i += "text-align: right;"));
              }
              return {
                position: i,
                transform: a,
              };
            }),
            (a.removeCueOnTimeChange = function () {
              var e = this;
              this.activeCues &&
                0 !== this.activeCues.length &&
                ((this.activeCues = this.activeCues.filter(function (e) {
                  return null !== e;
                })),
                this.activeCues.forEach(function (t, r) {
                  if (t) {
                    var i = e.video.currentTime;
                    if (i > t.endTime || i < t.startTime) {
                      var a =
                        e.container && e.container.querySelector("#cue" + t.id);
                      a && (a.innerHTML = ""), (e.activeCues[r] = null);
                    }
                  }
                }));
            }),
            (a.updateSubtitleController = function (e) {
              var t = this.findSubtitleById(e);
              if (t) {
                var r = this.subtitleList;
                if (r)
                  for (var i = r.children, a = 0; a < i.length; a++) {
                    var n = i[a];
                    if (n && n.getAttribute("data-id"))
                      n.getAttribute("data-id") === t.id
                        ? n.classList.add("hiplayer-pop-item-std")
                        : n.classList.remove("hiplayer-pop-item-std");
                    else n.classList.remove("hiplayer-pop-item-std");
                  }
              }
            }),
            (a.findSubtitleById = function (e) {
              var t;
              if (e)
                return (
                  "off" === e
                    ? (t = {
                        id: "off",
                        name: this.tran("NoSubtitle"),
                        type: "",
                        url: "",
                      })
                    : this.subtitles.forEach(function (r) {
                        r.id === e && (t = r);
                      }),
                  t
                );
            }),
            (a.removeTrack = function () {
              if (this.video.textTracks && this.video.textTracks.length > 0)
                for (var e = 0; e < this.video.textTracks.length; e++) {
                  var t = this.video.textTracks[e];
                  (t.oncuechange = null), (t.mode = "hidden");
                  for (var r = t.cues || [], i = r.length, a = 0; a < i; a++) {
                    var n = r[e];
                    n && t.removeCue(n);
                  }
                }
              (this.activeCues = []),
                this.container && (this.container.innerHTML = ""),
                this.video && (this.video.innerHTML = "");
            }),
            (a.destroy = function () {
              this.removeTrack(),
                this.video.removeEventListener(
                  "timeupdate",
                  this.removeCueOnTimeChange.bind(this)
                );
            }),
            (t = e),
            (r = [
              {
                key: "container",
                get: function () {
                  return this._player.template.subtitleWrap;
                },
              },
              {
                key: "subtitleList",
                get: function () {
                  return this._player.template.getSubtitleList();
                },
              },
              {
                key: "video",
                get: function () {
                  return this._player.video;
                },
              },
              {
                key: "tran",
                get: function () {
                  return this._player.tran;
                },
              },
              {
                key: "activeSubtitle",
                get: function () {
                  return this._player.options.video.defaultSubtitle || "";
                },
                set: function (e) {
                  this._player.options.video.defaultSubtitle = e;
                },
              },
              {
                key: "subtitles",
                get: function () {
                  return this._player.options.video.subtitles;
                },
              },
            ]) && ge(t.prototype, r),
            i && ge(t, i),
            Object.defineProperty(t, "prototype", {
              writable: !1,
            }),
            e
          );
        })(),
        ye = (function () {
          function e(e, t) {
            (this._video = void 0),
              (this._container = void 0),
              (this._loadingChecker = void 0),
              (this._video = e),
              (this._container = t),
              this.init();
          }
          var t = e.prototype;
          return (
            (t.init = function () {
              this.initloadingChecker();
            }),
            (t.initloadingChecker = function () {
              var e = this,
                t = 0,
                r = 0,
                i = !1;
              this._loadingChecker = setInterval(function () {
                (r = e._video.currentTime),
                  i || r !== t || e._video.paused || (e.show(), (i = !0)),
                  i && r > t && !e._video.paused && (e.hide(), (i = !1)),
                  (t = r);
              }, 100);
            }),
            (t.show = function () {
              this._container.classList.add("hiplayer-loading");
            }),
            (t.hide = function () {
              this._container.classList.remove("hiplayer-loading");
            }),
            (t.destroy = function () {
              this._loadingChecker && clearInterval(this._loadingChecker);
            }),
            e
          );
        })(),
        me = (function () {
          function e(e, t, r) {
            (this.container = void 0),
              (this.template = void 0),
              (this.logos = void 0),
              (this.container = e),
              (this.template = t),
              r && (this.logos = r),
              this.init();
          }
          var t = e.prototype;
          return (
            (t.init = function () {
              var e = this;
              window.addEventListener("resize", function () {
                e.initResize(), e.resizeLogo();
              }),
                this.initResize();
            }),
            (t.updateLogos = function (e) {
              this.logos = e;
            }),
            (t.initResize = function () {
              var e = this.container.getBoundingClientRect().width;
              e >= 750 ? this.setArrow(!1) : this.setArrow(!0),
                e >= 620 ? this.showVolume() : this.hideVolume(),
                e >= 575 ? this.showSpeed() : this.hideSpeed(),
                e >= 520 ? this.showSubtitle() : this.hideSubtitle(),
                e >= 450 ? this.showQuality() : this.hideQuality(),
                this.updateSubtitleFontSize(e);
            }),
            (t.updateSubtitleFontSize = function (e) {
              if (this.template.subtitleWrap) {
                var t,
                  r =
                    this.template.subtitleWrap.getElementsByClassName(
                      "subtitle-cue"
                    ),
                  i = this.template.subtitleWrap.getAttribute("base-width");
                if (i) t = e / parseInt(i);
                if (r && t)
                  for (var a = 0; a < r.length; a++) {
                    var n = r[a],
                      o = n.getAttribute("base-font-size");
                    if (o) {
                      var s = parseInt(o),
                        l = Math.floor(s * t) - 4;
                      l < 14 && (l = 14), (n.style.fontSize = l + "px");
                    }
                    var d = n.getAttribute("base-letter-spacing");
                    if (d) {
                      var u = parseFloat(d) * t;
                      n.style.letterSpacing = u.toFixed(1) + "px";
                    }
                    var c = n.getAttribute("base-shadow"),
                      h = n.getAttribute("base-shadow-color");
                    if (c && h) {
                      var f = parseFloat(c) * t;
                      f < 0.5 && (f = 0.5),
                        (n.style.textShadow =
                          f.toFixed(1) + "px " + f.toFixed(1) + "px " + h);
                    }
                  }
              }
            }),
            (t.setArrow = function (e) {
              e
                ? this.container.classList.add("hiplayer-arrow")
                : this.container.classList.remove("hiplayer-arrow");
            }),
            (t.showSpeed = function () {
              this.template.speed &&
                this.template.speed.style.removeProperty("display");
            }),
            (t.hideSpeed = function () {
              this.template.speed &&
                (this.template.speed.style.display = "none");
            }),
            (t.showVolume = function () {
              this.template.volumeIcon &&
                this.template.volumeIcon.style.removeProperty("display");
            }),
            (t.hideVolume = function () {
              this.template.volumeIcon &&
                (this.template.volumeIcon.style.display = "none");
            }),
            (t.showSubtitle = function () {
              this.template.subtitleButton &&
                this.template.subtitleButton.style.removeProperty("display");
            }),
            (t.hideSubtitle = function () {
              this.template.subtitleButton &&
                (this.template.subtitleButton.style.display = "none");
            }),
            (t.showQuality = function () {
              this.template.qualityButton &&
                this.template.qualityButton.style.removeProperty("display");
            }),
            (t.hideQuality = function () {
              this.template.qualityButton &&
                (this.template.qualityButton.style.display = "none");
            }),
            (t.resizeLogo = function () {
              var e = this.logos;
              if (e) {
                var t = this.template.video;
                e.forEach(function (e, r) {
                  var i = document.querySelector(".hiplayer-logo" + r),
                    a = i && i.firstElementChild;
                  if (t && a) {
                    (i.style.top = (e.coory * t.offsetHeight) / 720 + "px"),
                      (i.style.left = (e.coorx * t.offsetHeight) / 720 + "px");
                    var n = (e.width * t.offsetHeight) / 720,
                      o = (e.height * t.offsetHeight) / 720;
                    (a.style.width =
                      (n > t.offsetWidth ? t.offsetWidth : n) + "px"),
                      (a.style.height =
                        (o > t.offsetHeight ? t.offsetHeight : o) + "px");
                  }
                });
              }
            }),
            (t.destroy = function () {
              var e = this;
              window.removeEventListener("resize", function () {
                e.initResize();
              });
            }),
            e
          );
        })(),
        be = r(10),
        _e = 0,
        we = [],
        Te = (function () {
          function e(e) {
            (this.options = void 0),
              (this.container = void 0),
              (this.events = void 0),
              (this.user = void 0),
              (this.template = void 0),
              (this.video = void 0),
              (this.bar = void 0),
              (this.fullScreen = void 0),
              (this.controller = void 0),
              (this.setting = void 0),
              (this.tran = void 0),
              (this.notice = void 0),
              (this.subtitle = void 0),
              (this.loading = void 0),
              (this._resizeHandler = void 0),
              (this._qualitySwitching = !1),
              (this._paused = !0),
              (this._subscriptions = {}),
              (this.options = new le(e)),
              (this.events = new J()),
              (this.user = new ee(this.options)),
              this.isStoredSubtitleExist() &&
                (this.options.video.defaultSubtitle =
                  this.user.get("subtitle")),
              (this.container = this.options.container),
              this.container.classList.add("hiplayer"),
              this.container.classList.add(
                "hiplayer-" + this.options.lang.toLowerCase()
              ),
              "rtl" === this.options.direction
                ? this.container.classList.add("hiplayer-rtl")
                : this.container.classList.remove("hiplayer-rtl"),
              l.isMobile && this.container.classList.add("hiplayer-mobile"),
              (this.tran = Object(d.default)(this.options.lang)),
              (this.template = new V({
                container: this.container,
                options: this.options,
                index: _e,
                tran: this.tran,
              })),
              (this.video = this.template.video),
              this.options.live
                ? this.container.classList.add("hiplayer-live")
                : this.container.classList.remove("hiplayer-live"),
              (this.bar = new te(this.template)),
              (this.controller = new re(this)),
              (this.setting = new ie(this)),
              this._initVideo(this.video),
              (this.notice = de(this.container));
            new ae(this);
            (this.fullScreen = new $(this)),
              (this.loading = new ye(this.video, this.container)),
              (this.subtitle = new ve(this)),
              (this._resizeHandler = new me(
                this.container,
                this.template,
                this.options.logos ? this.options.logos : void 0
              )),
              this.options.muted && this.muted(!0, !0),
              this.options.autoplay && this.play(),
              _e++,
              we.push(this);
          }
          var t = e.prototype;
          return (
            (t.seek = function (e, t) {
              void 0 === t && (t = !1),
                (e && e !== 1 / 0 && e !== -1 / 0) || (e = 0),
                (e = Math.max(e, 0)),
                this.video.duration && (e = Math.min(e, this.video.duration)),
                t &&
                  (this.video.currentTime < e
                    ? this.notice(
                        this.tran("FF") +
                          " " +
                          (e - this.video.currentTime).toFixed(0) +
                          " " +
                          this.tran("s")
                      )
                    : this.video.currentTime > e &&
                      this.notice(
                        this.tran("REW") +
                          " " +
                          (this.video.currentTime - e).toFixed(0) +
                          " " +
                          this.tran("s")
                      )),
                (this.video.currentTime = e),
                this.bar.set("played", e / this.video.duration, "width"),
                this.template.ptime &&
                  (this.template.ptime.innerHTML = l.secondToTime(e));
            }),
            (t.play = function (e) {
              var t = this;
              (void 0 === e && (e = !1),
              (this._paused = !1),
              this.template.playButton &&
                (this.template.playButton.innerHTML = M.pause),
              this.template.bigPlayButton &&
                (this.template.bigPlayButton.innerHTML = M.bigPause),
              e) ||
                Promise.resolve(this.video.play()).catch(function (e) {
                  0 === e.code && (console.warn("[HiPlayer]", e), t.pause());
                });
              if (
                (this.container.classList.remove("hiplayer-paused"),
                this.container.classList.add("hiplayer-playing"),
                this.options.mutex)
              )
                for (var r = 0; r < we.length; r++)
                  this !== we[r] && we[r].pause();
            }),
            (t.pause = function (e) {
              void 0 === e && (e = !1),
                (this._paused = !0),
                this.loading.hide(),
                this.template.playButton &&
                  (this.template.playButton.innerHTML = M.play),
                this.template.bigPlayButton &&
                  (this.template.bigPlayButton.innerHTML = M.bigPlay),
                e || this.video.pause(),
                this.container.classList.remove("hiplayer-playing"),
                this.container.classList.add("hiplayer-paused");
            }),
            (t.volume = function (e, t, r) {
              if (
                (void 0 === t && (t = !1),
                void 0 === r && (r = !1),
                void 0 !== e)
              ) {
                var i = "string" == typeof e ? parseFloat(e) : e;
                (i = Math.max(i, 0)),
                  (i = Math.min(i, 1)),
                  this.bar.set("volume", i, "height"),
                  t ||
                    (this.user.set("volume", i.toString()),
                    this.video.muted && this.muted(!1)),
                  this.template.volumeText &&
                    (this.template.volumeText.innerText =
                      (100 * i).toFixed(0) + "%"),
                  (this.video.volume = i),
                  this.controller.switchVolumeIcon();
              }
              return this.video.volume;
            }),
            (t.muted = function (e, t) {
              return (
                void 0 === t && (t = !1),
                void 0 !== e &&
                  ((this.video.muted = e),
                  this.video.muted
                    ? (this.template.volumeIcon &&
                        (this.template.volumeIcon.innerHTML = M.volumeOff),
                      this.bar.set("volume", 0, "height"),
                      this.template.volumeText &&
                        (this.template.volumeText.innerText = "0%"))
                    : (this.controller.switchVolumeIcon(),
                      this.bar.set("volume", this.volume(), "height"),
                      this.template.volumeText &&
                        (this.template.volumeText.innerText =
                          (100 * this.volume()).toFixed(0) + "%"))),
                t || this.user.set("muted", this.video.muted ? "1" : "0"),
                this.video.muted
              );
            }),
            (t.toggle = function () {
              this.video.paused
                ? (this.play(), this.events.emit(W.play_btn_click))
                : (this.pause(), this.events.emit(W.pause_btn_click));
            }),
            (t.on = function (e, t) {
              return this.events.subscribe(e, t);
            }),
            (t._subscribe = function (e, t) {
              var r = this.on(e, t);
              return (this._subscriptions[e] = r), r;
            }),
            (t.unsubscribe = function (e, t) {
              this.events.unsubscribe(e, t);
            }),
            (t.loadVideo = function (e) {
              this.options.setVideo(e),
                this.isStoredSubtitleExist() &&
                  (this.options.video.defaultSubtitle =
                    this.user.get("subtitle")),
                this._updateController(),
                (this.video.poster = e.poster || ""),
                (this.video.src = e.url),
                this._initMSE(this.video, e.type || "auto"),
                this.speed(1),
                this.bar.set("played", 0, "width"),
                this.volume(this.user.get("volume"), !0, !0),
                this.muted(!!parseInt(this.user.get("muted")), !0),
                this.subtitle.init(),
                this.options.autoplay ? this.play() : this.pause();
            }),
            (t._initMSE = function (e, t) {
              if (
                this.options.video.customType &&
                this.options.video.customType[t]
              )
                "[object Function]" ===
                Object.prototype.toString.call(this.options.video.customType[t])
                  ? this.options.video.customType[t](this.video, this)
                  : console.error("[HiPlayer]", "Illegal customType: " + t);
              else
                switch (
                  ("auto" === t &&
                    (t = /m3u8(#|\?|$)/i.exec(e.src) ? "hls" : "normal"),
                  "hls" === t &&
                    (e.canPlayType("application/x-mpegURL") ||
                      e.canPlayType("application/vnd.apple.mpegURL")) &&
                    (t = "hls-support"),
                  t)
                ) {
                  case "hls":
                  case "hls-support":
                    if (be.isSupported()) {
                      var r = this.options.pluginOptions
                          ? this.options.pluginOptions.hls
                          : oe,
                        i = new be(r);
                      i.loadSource(e.src),
                        i.attachMedia(e),
                        this._subscribe(W.destroy, function () {
                          i.destroy();
                        });
                    }
                }
            }),
            (t._initVideo = function (e, t) {
              var r = this;
              this._initMSE(e, t || this.options.video.type),
                this._subscribe(X.durationchange, function () {
                  r._initVideoLogos(),
                    1 !== e.duration &&
                      e.duration !== 1 / 0 &&
                      r.template.dtime &&
                      (r.template.dtime.innerHTML = l.secondToTime(e.duration));
                }),
                this._subscribe(X.progress, function () {
                  var t = e.buffered.length
                    ? e.buffered.end(e.buffered.length - 1) / e.duration
                    : 0;
                  r.bar.set("loaded", t, "width");
                }),
                this._subscribe(X.error, function () {
                  r.video.error;
                }),
                this._subscribe(X.ended, function () {
                  r.bar.set("played", 1, "width"),
                    r.setting.loop ? (r.seek(0), r.play()) : r.pause();
                }),
                this._subscribe(X.play, function () {
                  r._paused && r.play(!0);
                }),
                this._subscribe(X.timeupdate, function () {
                  r.bar.set(
                    "played",
                    r.video.currentTime / r.video.duration,
                    "width"
                  );
                  var e = l.secondToTime(r.video.currentTime);
                  r.template.ptime &&
                    r.template.ptime.innerHTML !== e &&
                    (r.template.ptime.innerHTML = e),
                    r.options.logos &&
                      0 !== r.options.logos.length &&
                      r.options.logos.forEach(function (e, t) {
                        var i = document.querySelector(".hiplayer-logo" + t);
                        i &&
                          (e.timeAxis <= r.video.currentTime &&
                          e.timeAxis + e.duration >= r.video.currentTime
                            ? ("block" !== i.style.display &&
                                (i.style.display = "block"),
                              (i.style.display = "block"))
                            : "none" !== i.style.display &&
                              (i.style.display = "none"));
                      });
                });
              for (
                var i = function (t) {
                    e.addEventListener(r.events.videoEvents[t], function () {
                      "timeupdate" !== r.events.videoEvents[t] &&
                        r.events.videoEvents[t],
                        r.events.emit(r.events.videoEvents[t]);
                    });
                  },
                  a = 0;
                a < this.events.videoEvents.length;
                a++
              )
                i(a);
              this.volume(this.user.get("volume"), !0, !0),
                this.muted(!!parseInt(this.user.get("muted")), !0);
            }),
            (t._initVideoLogos = function () {
              var e = this.options.logos;
              if (e) {
                var t = this.template.videoWrap;
                e.forEach(function (e, r) {
                  var i = document.querySelector(".hiplayer-logo" + r),
                    a = i.firstElementChild;
                  if ((e.timeAxis <= 0 && (i.style.display = "block"), t)) {
                    (i.style.top = (e.coory * t.offsetHeight) / 720 + "px"),
                      (i.style.left = (e.coorx * t.offsetHeight) / 720 + "px");
                    var n = (e.width * t.offsetHeight) / 720,
                      o = (e.height * t.offsetHeight) / 720;
                    (a.style.width =
                      (n > t.offsetWidth ? t.offsetWidth : n) + "px"),
                      (a.style.height =
                        (o > t.offsetHeight ? t.offsetHeight : o) + "px");
                  }
                });
              }
            }),
            (t.onSubtitleSwitch = function (e) {
              this.subtitle.activeSubtitle !== e &&
                (this.subtitle.switchSubtitle(e, !0),
                this.events.emit(W.subtitle_switch, e),
                this.user.set("subtitle", e));
            }),
            (t.onQualitySwitch = function (e) {
              if (
                this.options.video.qualities &&
                this.options.video.defaultQuality !== e
              ) {
                var t = this.options.video.qualities.find(function (t) {
                  return t.id === e;
                });
                if (
                  (this.events.emit(W.quality_start, t),
                  this.template.qualityButton &&
                    (this.template.qualityButton.innerHTML = t ? t.name : ""),
                  this.template.qualityList)
                )
                  for (
                    var r = this.template.qualityList.children, i = 0;
                    i < r.length;
                    i++
                  ) {
                    var a = r[i];
                    if (a && a.getAttribute("data-id"))
                      a.getAttribute("data-id") === (null == t ? void 0 : t.id)
                        ? a.classList.add("hiplayer-pop-item-std")
                        : a.classList.remove("hiplayer-pop-item-std");
                    else a.classList.remove("hiplayer-pop-item-std");
                  }
              }
            }),
            (t.switchQuality = function (e) {
              var t = this;
              e && e.id && e.url
                ? this.options.video.defaultQuality === e.id ||
                  this._qualitySwitching ||
                  ((this.options.video.defaultQuality = e.id),
                  (this._qualitySwitching = !0),
                  this.notice(this.tran("Switching to") + " " + e.name, -1),
                  this._switchVideoSrc(
                    {
                      src: e.url,
                      type: e.type,
                    },
                    function () {
                      t.subtitle.init(),
                        t.notice(t.tran("Switched to") + " " + e.name),
                        (t._qualitySwitching = !1),
                        t.events.emit(W.quality_end);
                    }
                  ))
                : console.error("[HiPlayer]", "Bad quality paramas: " + e);
            }),
            (t._switchVideoSrc = function (e, t) {
              var r = this,
                i = e.src,
                a =
                  (e.type,
                  G({
                    current: !1,
                    poster: this.video.poster,
                    screenshot: this.options.screenshot,
                    preload: "auto",
                    url: i,
                  }));
              this._initMSE(a, "auto"),
                a.load(),
                a.addEventListener("canplaythrough", function () {
                  var e = r.video.currentTime;
                  r.video &&
                    ((r.video.src = i),
                    (r.video.poster = ""),
                    r._initMSE(r.video, "auto"),
                    r.video.play(),
                    r.video.addEventListener("canplay", function () {
                      if (-1 !== e && r.video.currentTime !== e)
                        return r.seek(e), void (e = -1);
                      r.play();
                    })),
                    t();
                });
            }),
            (t._updateController = function () {
              this.controller.destroy(), this.setting.destroy();
              var e = H({
                tran: this.tran,
                index: _e,
                options: this.options,
              });
              this.template.controller &&
                (this.template.controller.innerHTML = e.innerHTML),
                (this.bar = new te(this.template)),
                (this.setting = new ie(this)),
                (this.controller = new re(this));
            }),
            (t.resize = function () {
              this.events.emit(W.resize);
            }),
            (t.speed = function (e, t) {
              if ((void 0 === t && (t = !1), e)) {
                (this.video.playbackRate = e),
                  this.template.speed &&
                    (this.template.speed.innerText =
                      (e % 1 == 0 ? e.toFixed(1) : e) + "x");
                var r = this.template.speedList;
                if (r)
                  for (var i = r.children, a = 0; a < i.length; a++) {
                    var n = i[a];
                    if (n && n.getAttribute("data-speed")) {
                      var o = n.getAttribute("data-speed") || "";
                      parseFloat(o) === e
                        ? n.classList.add("hiplayer-pop-item-std")
                        : n.classList.remove("hiplayer-pop-item-std");
                    } else n.classList.remove("hiplayer-pop-item-std");
                  }
                t &&
                  this.notice(
                    this.tran("Switching to") + " " + e.toFixed(1) + "x"
                  );
              }
              return this.video.playbackRate;
            }),
            (t.isPaused = function () {
              return this._paused;
            }),
            (t.isSubtitleStored = function () {
              return !!this.user.get("subtitle");
            }),
            (t.isStoredSubtitleExist = function () {
              var e = this.user.get("subtitle");
              if (!e) return !1;
              if (!this.options.video.subtitles) return !1;
              for (var t = 0; t < this.options.video.subtitles.length; t++)
                if (this.options.video.subtitles[t].id === e) return !0;
              return !1;
            }),
            (t.logoChange = function (e) {
              (this.options.logos = e), this._resizeHandler.updateLogos(e);
              var t = this.template.logoWrap;
              this.template.videoLogos.length > 0 &&
                this.template.videoLogos.forEach(function (e) {
                  e.remove();
                }),
                0 === this.template.videoLogos.length &&
                  (null == e ||
                    e.forEach(function (e, r) {
                      var i = B("div", ["hiplayer-logo" + r, "hiplayer-logo"]),
                        a = B("img");
                      a.setAttribute("src", e.imgSrc),
                        i.appendChild(a),
                        t.appendChild(i);
                    }));
            }),
            (t.switchLanguage = function (e, t) {
              this.container.classList.remove(
                "hiplayer-" + this.options.lang.toLowerCase()
              ),
                (this.options.lang = e),
                (this.tran = Object(d.default)(this.options.lang)),
                this.container.classList.add(
                  "hiplayer-" + this.options.lang.toLowerCase()
                ),
                "rtl" === this.options.direction
                  ? this.container.classList.add("hiplayer-rtl")
                  : this.container.classList.remove("hiplayer-rtl"),
                t.qualities && (this.options.video.qualities = t.qualities),
                t.subtitles && (this.options.video.subtitles = t.subtitles),
                this._updateController(),
                t.defaultSubtitle &&
                  !this.isSubtitleStored() &&
                  ((this.options.video.defaultSubtitle = t.defaultSubtitle),
                  this.subtitle.init());
            }),
            (t.destroy = function () {
              for (var e in (we.splice(we.indexOf(this), 1),
              this._subscriptions))
                this._subscriptions.hasOwnProperty(e) &&
                  (this.unsubscribe(e, this._subscriptions[e]),
                  delete this._subscriptions[e]);
              this.setting.destroy(),
                this.controller.destroy(),
                this.loading.destroy(),
                this.subtitle.destroy(),
                this._resizeHandler.destroy(),
                this.pause(),
                (this.video.src = ""),
                (this.container.innerHTML = ""),
                this.events.emit(W.destroy);
            }),
            e
          );
        })();
      t.default = Te;
    },
  ]).default;
});
